package o;

import android.content.Context;
import android.text.TextUtils;
import com.google.firebase.crashlytics.FirebaseCrashlytics;
import id.dana.R;
import id.dana.challenge.ChallengePinWithFaceActivity;
import id.dana.challenge.LoginFailureException;
import id.dana.data.foundation.logger.log.DanaLogConstants;
import id.dana.di.PerActivity;
import id.dana.domain.model.rpc.UserInfo;
import id.dana.domain.model.rpc.response.LoginResponse;
import id.dana.tracker.TrackerKey;
import id.dana.tracker.constant.TrackerType;
import java.util.HashMap;
import java.util.Map;
import kotlin.Metadata;
import kotlin.Unit;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import kotlin.jvm.internal.Lambda;
import o.ShareRecyclerAdapter;
import o.convertDipToPx;
import o.getTypefaceByCat;
import o.isMainThread;
import org.jetbrains.annotations.NotNull;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0005\n\u0002\u0010\u0003\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u000e\n\u0002\b\u0012\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\t\n\u0002\u0018\u0002\n\u0002\b\u0004\b\u0007\u0018\u00002\u00020\u0001Bg\b\u0007\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0006\u0010\b\u001a\u00020\t\u0012\u0006\u0010\n\u001a\u00020\u000b\u0012\u0006\u0010\f\u001a\u00020\r\u0012\u0006\u0010\u000e\u001a\u00020\u000f\u0012\u0006\u0010\u0010\u001a\u00020\u0011\u0012\u0006\u0010\u0012\u001a\u00020\u0013\u0012\u0006\u0010\u0014\u001a\u00020\u0015\u0012\u0006\u0010\u0016\u001a\u00020\u0017\u0012\u0006\u0010\u0018\u001a\u00020\u0019¢\u0006\u0002\u0010\u001aJ\b\u0010 \u001a\u00020\u001eH\u0016J\b\u0010!\u001a\u00020\u001eH\u0016J\b\u0010\b\u001a\u00020\u001eH\u0016J\u0010\u0010\"\u001a\u00020\u001e2\u0006\u0010#\u001a\u00020$H\u0002J\u0018\u0010%\u001a\u00020\u001e2\u0006\u0010&\u001a\u00020'2\u0006\u0010(\u001a\u00020\u001cH\u0002J\u0018\u0010)\u001a\u00020\u001e2\u0006\u0010&\u001a\u00020'2\u0006\u0010(\u001a\u00020\u001cH\u0002J\u0010\u0010*\u001a\u00020\u001e2\u0006\u0010\u001d\u001a\u00020+H\u0002J\u0010\u0010,\u001a\u00020\u001e2\u0006\u0010&\u001a\u00020'H\u0007J\u0018\u0010-\u001a\u00020\u001e2\u0006\u0010.\u001a\u00020+2\u0006\u0010(\u001a\u00020\u001cH\u0016J(\u0010/\u001a\u00020\u001e2\u0006\u0010.\u001a\u00020+2\u0006\u00100\u001a\u00020+2\u0006\u00101\u001a\u00020+2\u0006\u00102\u001a\u00020\u001cH\u0016J0\u00103\u001a\u00020\u001e2\u0006\u0010.\u001a\u00020+2\u0006\u00104\u001a\u00020+2\u0006\u00105\u001a\u00020\u001c2\u0006\u00100\u001a\u00020+2\u0006\u00101\u001a\u00020+H\u0016J(\u00106\u001a\u00020\u001e2\u0006\u0010.\u001a\u00020+2\u0006\u00100\u001a\u00020+2\u0006\u00101\u001a\u00020+2\u0006\u00107\u001a\u00020\u001cH\u0016J \u00108\u001a\u00020\u001e2\u0006\u0010.\u001a\u00020+2\u0006\u00101\u001a\u00020+2\u0006\u0010(\u001a\u00020\u001cH\u0016J(\u00109\u001a\u00020\u001e2\u0006\u0010.\u001a\u00020+2\u0006\u0010:\u001a\u00020+2\u0006\u00101\u001a\u00020+2\u0006\u0010;\u001a\u00020+H\u0016J\u0018\u0010<\u001a\u00020\u001e2\u0006\u0010.\u001a\u00020+2\u0006\u0010=\u001a\u00020>H\u0016J\u0012\u0010?\u001a\u00020\u001c2\b\u0010@\u001a\u0004\u0018\u00010AH\u0002J\u0012\u0010B\u001a\u00020\u001c2\b\u0010&\u001a\u0004\u0018\u00010'H\u0002J\b\u0010C\u001a\u00020\u001eH\u0016J\u001a\u0010D\u001a\u00020\u001e2\b\u0010E\u001a\u0004\u0018\u00010+2\u0006\u0010F\u001a\u00020$H\u0002J\b\u0010G\u001a\u00020\u001eH\u0002J\u001a\u0010H\u001a\u00020\u001e2\b\u0010I\u001a\u0004\u0018\u00010+2\u0006\u0010J\u001a\u00020KH\u0002J\u0010\u0010L\u001a\u00020\u001e2\u0006\u0010M\u001a\u00020\u001cH\u0002J\b\u0010N\u001a\u00020\u001eH\u0007R\u000e\u0010\u0010\u001a\u00020\u0011X\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\tX\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\f\u001a\u00020\rX\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u000e\u001a\u00020\u000fX\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u001b\u001a\u00020\u001cX\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u0014\u001a\u00020\u0015X\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0016\u001a\u00020\u0017X\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\u000bX\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0004\u001a\u00020\u0005X\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0012\u001a\u00020\u0013X\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0007X\u0004¢\u0006\u0002\n\u0000R\u0014\u0010\u001d\u001a\u00020\u001e8BX\u0004¢\u0006\u0006\u001a\u0004\b\u0014\u0010\u001fR\u000e\u0010\u0018\u001a\u00020\u0019X\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u0002\u001a\u00020\u0003X\u0004¢\u0006\u0002\n\u0000¨\u0006O"}, d2 = {"Lid/dana/challenge/pin/PinLoginPresenter;", "Lid/dana/challenge/pin/AbstractPinContract$Presenter;", "view", "Lid/dana/challenge/pin/AbstractPinContract$View;", "login", "Lid/dana/domain/login/interactor/Login;", "trustRiskLogin", "Lid/dana/domain/login/interactor/TrustRiskLogin;", "checkKnowledgeBasedAuthFeature", "Lid/dana/domain/featureconfig/interactor/CheckKnowledgeBasedAuthFeature;", "isAppFirstLaunch", "Lid/dana/domain/featureconfig/interactor/IsAppFirstLaunch;", "context", "Landroid/content/Context;", "deviceInformationProvider", "Lid/dana/data/config/DeviceInformationProvider;", "checkFaceLoginFeature", "Lid/dana/domain/featureconfig/interactor/CheckFaceLoginFeature;", "splitFacade", "Lid/dana/data/toggle/SplitFacade;", "getUserId", "Lid/dana/domain/account/interactor/GetUserId;", "getUserInfo", "Lid/dana/domain/user/interactor/GetUserInfo;", "userInfoMapper", "Lid/dana/myprofile/UserInfoMapper;", "(Lid/dana/challenge/pin/AbstractPinContract$View;Lid/dana/domain/login/interactor/Login;Lid/dana/domain/login/interactor/TrustRiskLogin;Lid/dana/domain/featureconfig/interactor/CheckKnowledgeBasedAuthFeature;Lid/dana/domain/featureconfig/interactor/IsAppFirstLaunch;Landroid/content/Context;Lid/dana/data/config/DeviceInformationProvider;Lid/dana/domain/featureconfig/interactor/CheckFaceLoginFeature;Lid/dana/data/toggle/SplitFacade;Lid/dana/domain/account/interactor/GetUserId;Lid/dana/domain/user/interactor/GetUserInfo;Lid/dana/myprofile/UserInfoMapper;)V", "firstLaunch", "", "userId", "", "()Lkotlin/Unit;", "checkFeatureFaceLoginEnable", "checkIsAppFirstLaunch", "handleLoginError", "e", "", "handleLoginSuccess", "loginResponse", "Lid/dana/domain/model/rpc/response/LoginResponse;", "withMobileData", "handleVerificationMethod", "initEventConfig", "", "initMixpanelEventConfig", "input", "inputPin", "inputAutoRoute", "pubKey", "securityId", "autoRouteStatus", "inputPaymentAuth", "authType", "authStatus", "inputSwitchFaceAuth", "faceAuthNew", "inputTrustRisk", "inputTwilio", "verificationMethod", "sendOtpStrategy", "inputWithData", "data", "Landroid/os/Bundle;", "isKycLevelExist", "userInfo", "Lid/dana/model/UserInfo;", "isLoginResponseValueExist", "onDestroy", "trackDisplayedErrorLogin", "errorMessage", "exception", "trackFirstInstallSuccessLogin", "trackNetworkErrorLogin", "displayedMessage", "networkException", "Lid/dana/data/base/NetworkException;", "trackPinCompleted", "pinSuccess", "trackPinLogin", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
@PerActivity
public final class onValidateSchema implements isMainThread.getMax {
    public static final byte[] getMin;
    private static int invoke = 1;
    private static int invokeSuspend = 0;
    public static final int length = 88;
    private final ShareRecyclerAdapter.ShareViewHolder FastBitmap$CoordinateSystem;
    private final GriverMonitorAnalyticsConfigManager IsOverlapping;
    private final getPerformanceTracker equals;
    private final isMainThread.getMin getMax;
    private final setDomStorageEnabled hashCode;
    private final clearCache isInside;
    private boolean setMax;
    private final DebugMonitor setMin;
    private final GriverCreateDialogParam toDoubleRange;
    private final setDatabasePath toFloatRange;
    private final Context toIntRange;
    private final UpdateAppCallback toString;
    private final sendData values;

    static {
        byte[] bArr = new byte[15566];
        System.arraycopy("9\u000f/÷\u0015ëÍ>õ\rùÇ\u001b#\u0000ù\u0002ú\u000bç!í\u0013ñà3ë\u0002\u000b\u0004õ\u0006ÿ÷\u0015ëÍ>õ\rùÇ\u001b%ö\u0001\u0013×&ÿÛ\u0017Ü-\u0006ùö\u000fÒ3ë\u0002\u000b\u0004õ\u0006ÿ\u0004û\tüû\u0007ÿú\u0005\u0003ø\u0001\u0005ú\u0001\u0006ù\u0007\u0005úú\fùû\býû\u0006ÿ\u0006õ\u000b\u0000õ\u0005\bþõ\býû\u0007\u0006ó\u000b\u0000õ\u0005\u0003ø\b\u0000ø\u0007\u0005ûù\fþö\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\b÷\u0001\tö\u0001\nõ\u0005\u0004÷\u0005\u0001\u0001ù\u0007\u0004þ÷\u0005\u0003ø\u0001\u000bô\u0001\fó\u0005\u0004÷\u0001\u000bô\u0001\fó\u0001\fó\u0001\u0004ÿü\t÷\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\nõ\u0001\u0004\u0002ù\u0007\u0005üø\u0006\u0004ö\fùû\u0006\u0006ô\rúù\u0005ÿ\u0006ö\fþö\u0001\u0004\u0003ø\u0007\u0000ù\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0005ÿü\u0001\u0004\u0007ô\u0005\u0000û\u0001\u0004\u0007\u0004û\u0005\u0001ú\u0001\u0005ú\u0001\u0006ù\tûü\u0001\u0007ø\u0001\u0006ù\u0005\u0000\u0003ø\u0001\b÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0005\u0002\u0005ô\u0006\u0003÷\f\u0001ó\u0006\u0000ú\býû\u0006\u0001ù\u000b\u0002ó\u0005\u0002\u0006ó\u0005\u0003üü\u0005\u0003ø\f\u0001ó\u0005\u0003ýû\u0005\u0003þú\u0005\u0003ÿù\u0005\u0003\u0000ø\núü\u0005\u0003\u0001÷\u0005\u0003\u0002ö\u0007ÿú\u0001\u0004ÿü\u0007\u0000ù\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\nõ\u0001\u000bô\u0005ÿü\u0001\u0004\u0002ù\u0005\u0004÷\u0001\u0004\u0003ø\fÿõ\u0005\u0003ø\u0001\u0004\u0004÷\u0001\u000bô\u0001\u0004\u0005ö\u0001\u0006ù\u0005ÿ\tó\u0001\u0004\u0006õ\u0001\u0006ù\u0001\u0004\u0007ô\u0005\u0001ú\u0001\u0005ú\u0001\u0006ù\tûü\u0001\u0007ø\u0001\u0006ù\u0005\u0000\u0003ø\u0001\b÷\u0005\u0003\u0003õ\u0005\u0006õ\u0001\tö\u0005\u0000û\u0001\u0004\u0002ù\u0001\u0004\bó\u0005\u0003\u0004ô\u0007ýü\tÿø\u0006ÿû\u0005\u0002\u0006ó\u0006\u0001ù\u000b\u0001ô\u0005\u0002\u0001ø\u000b\u0002ó\u0005\u0001\u0007ó\u0005\u0003\u0005ó\u0006ÿû\b\u0000ø\rúù\u0005\u0004ûü\t\u0004ó\u0007ýü\u0007þû\u0007ÿú\u0001\u0005þü\u0007\u0000ù\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0005\u0001\rö\u000eýúûÊA\u0004»\u00143ùö\bù\u0004û\u0001\u0005ú\u0005\u0000\u0006õ\bÿù\u0005\u0006úû\u0006\u0000ú\u0006\u0000\u0002ø\u0007ÿÿû\fùû\u0006\u0002ÿù\u0006ÿû\u0006\u0004ö\fùû\u0006\u0004ö\býû\u0005ÿü\bþú\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\u0006ù\u0007\u0000ù\u0001\u0007ø\u0001\b÷\u0001\tö\u0001\nõ\t÷\u0001\u000bô\u0001\fó\u0001\u0004ÿü\u0001\nõ\u0005\u0004÷\u0001\u0004\u0000û\u0001\u0005ú\u0007\u0002\u0004ó\u000bþ÷\u0006\u0000ú\býû\u0005\u0007þö\u0005\u0002\u0006ó\b\u0000ø\u000b\u0002ó\u0007\u0003úü\u0005\u0005üú\u0006\u0004ö\b\u0000ø\u0005ÿ\u0000ü\u0005\u0003\u0005ó\u0006ÿû\r÷ü\u0005\u0006þ÷\u0005ÿ\u0000ü\u0007ýü\fþö\u0001\u0006ù\u0007\u0000ù\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0004ÿü\fÿõ\u0005\u0003ø\u0001\u0004\u0003ø\u0001\t\u0004û\u0001\u0005ú\u0005\u0004÷\u0001\u0006ù\u0001\u0005ú\u0001\u0007ø\t÷\u0001\b÷\u0001\tö\t÷\u0001\b÷\u0005\u0001\u0001ù\u0006\u0000\u0005õ\u0001\tö\u0005ÿü\u0001\nõ\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\u000bô\u0005\u0000û\u0001\nõ\u0001\u0005ú\u0001\fó\u0006\u0001\u0003ö\u0006ÿû\fùû\r\u0000ó\bþú\u0005ÿ\u0000ü\rûø\u0001\u0004ÿü\u0007\u0000ù\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002\u0004û\u0005\u0001ú\u0001\u0005ú\u0001\u0006ù\tûü\u0001\u0007ø\u0001\u0006ù\u0001\b÷\u0001\tö\u0005\bó\u0001\nõ\u0001\u000bô\tüû\u0007ÿú\u0005\u0003ø\u0001\fó\u0005\u0004÷\u0001\u0004ÿü\týú\u0001\nõ\u0001\u0004\u0000û\tþù\u0006\u0004ö\tÿø\t\u0000÷\u0006\u0000ú\t\u0001ö\býû\t\u0002õ\u0007ýü\t\u0003ô\u0005\u0003ø\t\u0004ó\u0005ÿü\t\u0004ó\u0005ÿü\u0006\u0003÷\b\u0000ø\núü\nûû\nüú\u0007þû\u0007ÿú\u0001\u0004\u0001ú\b\u0004ô\u0007ÿú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u000bô\u0001\u0004\u0000û\nýù\u0006ÿû\u0006\u0005õ\nþø\u0005ÿü\nÿ÷\u0007þû\u0007ÿú\u0001\u0004\u0001ú\b\u0004ô\u0007ÿú\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\u0007ô\u0005\u0004÷\n\u0000ö\n\u0001õ\n\u0002ô\u0005\u0003ø\u0001\u0004ÿü\u0001\u000b÷\u0015ëÍ>õ\rùÇ\u001b%\u0006ñ\u0002þ\r÷\u0015ëÍ>õ\rùÇ '÷\u0000ä\u001fú\u0005\u0006ñ\rÓ3ë\u0002\u000b\u0004õ\u0006ÿ\u0005ÿ\u000bñ\rï\u0013û\u0003ýüý\u000b\u0004û\u0001\u0005ú\u0005\u0006üù\u0001\u0006ù\u0001\u0007ø\u0001\b÷\u0001\u0007ø\u0001\tö\u0001\nõ\u0001\u000bô\u0005\u0004÷\rýö\u0001\fó\u0001\u0004ÿü\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0005\u0006ýø\u0005\u0004\u0001ö\u0006\u0000ú\u000b\u0000õ\u0005\u0006þ÷\r÷ü\u0005\u0006ÿö\u0005\u0003ýû\u0005\u0003þú\u0005\u0006\u0000õ\u0005ÿü\bþú\u0006\u0001ù\u0006\u0000ú\nüú\fþö\u0001\u0004\u0002ù\u0007\u0000ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0005ú\t÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\t÷\u0001\u0004\u0007ô\u0001\u0004\bó\u0005\u0004÷\u0001\fó\u0001\u0004ÿü\u0001\u0005þü\u0005\u0006\u0001ô\u0005\u0006\u0002ó\tÿø\u0006\u0000ú\býû\u000b\u0000õ\u0005\u0003ø\u0005\u0007øü\u0005\u0007ùû\føü\u0006ÿû\tÿø\u0005\u0007úú\býû\u0005ÿü\bþú\u0005\u0006ûú\u0007ÿú\u0001\u0005ÿû\u0007\u0000ù\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0001\u0005\u0002ø\u0001\u0004ÿü\u0005\u0007ûù\u0001\u0006\u0004û\u0006\u0001þû\u0001\u0005ú\u0005ÿü\u0001\u0006ù\u0001\u0007ø\u0005\u0001ú\u0001\b÷\u0006þ\u0006ö\u0001\tö\u0001\nõ\u0001\u000bô\u0005\u0000û\u0001\fó\u0006\u0006ý÷\u0001\u0004ÿü\u0005ÿü\u0001\u0004\u0000û\u0005\u0001ú\u0001\b÷\u0006þ\u0006ö\u0001\tö\u0001\nõ\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0005\u0004÷\u0001\u0004\u0004÷\u0005\u0001\u0002ø\u0001\u0004\u0005ö\u0005ÿü\u0001\u0004\u0006õ\u0005\u0001ú\u0001\b÷\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0006\u0005ùü\u0001\u0005ÿû\u0005ÿü\u0001\fó\u0005\u0000û\u0001\u0004\u0000û\u0005\u0001ú\u0001\b÷\u0006þ\u0006ö\u0001\tö\u0001\nõ\rýö\u0001\u000bô\u0001\u0005\u0000ú\u0006\u0006ÿõ\u0006\u0006\u0000ô\u0006þ\u0003ù\nþø\u0005ÿ\u0004ø\fùû\býû\u0006\u0005\u0002ó\u0007ýü\fþö\u0001\u0005\u0001ù\b\u0004ô\u0007ÿú\u0001\u0005\u0002ø\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\u0005\u0005õ\u0001\u0005\u0006ô\u0006\u0006\u0001ó\n\u0001õ\n\u0002ô\u0005\u0003ø\u0001\u0005\u0007ó\u0001\u0006ýü\u0001\u0006þû\u0001\u0005\u0006ô\u0001\u0006ÿú\u0001\u0006\u0000ù\u0001\u0006\u0001ø\u0001\u0005\u0000ú\u0005\u0005ÿ÷\u0006\u0003÷\u0006\u0004ö\u0006ÿû\u0007\u0006ó\u0005ÿ\u0003ù\u0006\u0001ù\u0006\u0004ö\u0006ÿû\u0006\u0000ú\u0006\u0001ù\býû\b\u0000ø\u0006ÿû\r÷ü\u0006\u0007÷ü\u0007ýü\u0007þû\u0007ÿú\u0001\u0005\u0001ù\u0007\u0000ù\u0001\u0006\u0002÷\u0001\u0006\u0003ö\u0001\u0006\u0004õ\u0006\u0007øû\u0001\u0006\u0005ô\u0005\u0001ú\u0001\u0006\u0006ó\u0001\u0007üü\u0001\u0007ýû\u0001\u0007þú\u0001\u0004\u0002ù\u0001\u0005\u0006ô\u0001\u0007ÿù\u0001\u0007\u0000ø\u0001\u0007\u0001÷\týú\u0001\u0005ú\u0005\u0000û\u0001\u0004\u0006õ\u0005\u0000û\u0001\u0007\u0002ö\u0005\u0000û\u0001\u0007\u0003õ\u0005ÿü\u0001\u0007\u0002ö\u0001\u0007\u0004ô\u0001\u0007\u0005ó\u0001\u0007\u0004ô\u0006\u0007ùú\u0001\bûü\u0001\büû\u0001\býú\u0001\u0007\u0004ô\u0001\bþù\nýù\u0001\u0006\u0005ô\u0006þ\u0007õ\u0001\u0004\u0005ö\u0001\u0007\u0004ô\u0005\u0004÷\u0001\u0004\u0004÷\u0001\u0007\u0004ô\u0001\u0005\u0000ú\u000büù\u0006\u0007úù\u0005\u0004\u0001ö\u0006\u0000ú\t\u0001ö\býû\u000b\u0002ó\u0005\u0003ø\u0005\u0001\u0000ú\u0005\u0003\u0000ø\núü\u0005\u0003ø\u0007\u0004õ\t\u0004ó\u0007ýü\u0007þû\u0007ÿú\u0001\u0005\u0001ù\u0007\u0000ù\u0001\bÿø\u0001\b\u0000÷\u0001\b\u0001ö\u0001\b\u0002õ\u0001\u0007\u0004ô\u0001\b\u0003ô\u0006\u0007ûø\u0001\u0004ÿü\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\b\u0004ó\u0001\b\u0001ö\u0005ÿü\u0001\túü\u0001\u0007\u0004ô\u0001\tûû\n\u0000ö\u0005ÿ\u0000ü\b\u0002ö\u0007ÿú\u0001\tüú\u0007\u0000ù\u0001\týù\u0001\tþø\u0001\büû\u0001\u0005\u0000ú\u0006\u0007ü÷\u0005\bÿô\u0005\u0003ø\u0006\u0006ûù\u0005\u0006ûú\u0007ÿú\u0001\u0005\u0001ù\u0007\u0000ù\u0001\tÿ÷\u0001\t\u0000ö\u0001\t\u0001õ\u0005\u0001ú\u0001\b÷\u0005\u0001\u0001ù\u0001\t\u0002ô\u0005\u0003ø\u0001\t\u0003ó\u0001\nùü\u0001\núû\u0005\u0000û\u0001\túü\u0005\u0000û\u0001\nûú\u0001\nüù\u0001\nýø\u0001\nþ÷\u0005\u0004÷\u0005\u0001\u0001ù\u0001\t\u0002ô\u0005\u0003ø\u0001\u0004\u0004÷\u0001\u0005\u0000ú\u0006\u0007ýö\u0006ÿû\u0006\u0004ö\býû\u000b\u0000õ\føü\u0006ÿû\u0006\u0000ú\u0006\u0001ù\býû\u0006\u0007þõ\u000b\u0000õ\u0005\u0003ø\býû\rúù\u0005ÿ\u0000ü\rûø\u0001\u0005\u0001ù\u0007\u0000ù\u0001\nÿö\u0001\n\u0000õ\u0001\n\u0001ô\u0006\u0007ÿô\u0001\u0005ÿû\u0001\n\u0002ó\u0001\u000bøü\u0005\u0001ú\u0006\u0007ùú\u0005\u0006õ\u0001\u000bùû\u0001\u000búú\u0001\u000bûù\u0005ÿü\u0001\u0007\u0003õ\u0005\u0003\u0004ô\u0001\bûü\u0001\tûû\u0006\u0007\u0000ó\u0005\u0006úû\u0005ÿ\u0003ù\u000b\u0000õ\u0005\u0003ø\u0006ÿû\u0006\u0000ú\u000b\u0000õ\u0005\u0003ø\býû\u0007ý\u0000ü\u0006ÿû\u0006\u0004ö\fùû\u0007ý\u0001û\u0006\u0007ó\rûø\u0001\tüú\u0007\u0000ù\u0001\u000büø\u0001\u000bý÷\u0001\u000bþ\u0004û\u0001\u0005ú\u0005\u0004\u0004ó\u0001\u0006ù\b\u0004ô\b\u0004ô\u0005\u0002þû\u0001\u0007ø\u0001\u0005ú\u0001\u0005ú\u0001\b÷\t÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0007\u0005ÿõ\u0006\u0000ú\u0006\u0000þü\u0006ÿ\u0006õ\u0005ÿ\u0004ø\u0005\u0004\u0001ö\u0006\u0005õ\u0005\u0006þ÷\u0007\u0005\u0000ô\u0006\u0000ú\u0006\u0000þü\u0005ÿü\bþú\u0005ÿ\u0000ü\rûø\u0001\u0004ÿü\b\u0004ô\u0007ÿú\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\b÷\u0007\u0002÷\u0001\u0006ù\u0005\u0004÷\u0001\u0004\u0002ù\u0005\u0004÷\u0007\u0005\u0001ó\u0005\u0003ø\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0007\u0006÷ü\u0005ÿ\u0004ø\u0006þ\u0003ù\u0005\u0003ø\býû\u0007\u0006øû\u0005\u0003\u0000ø\u0005ÿü\bþú\u0006\u0001ù\u0006\u0006úú\rûø\u0001\u0004\u0004÷\b\u0004ô\u0007ÿú\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007÷\u0015ëÍGÿõ\u0003Â\u001f\u0014\u000fûÒ1\u0000ï\u0018\u0004û\t÷\u0001\u0005ú\u0001\u0006ù\t÷\u0001\u0007ø\u0001\u0006ù\u0001\b÷\u0001\tö\u0001\nõ\t÷\u0001\u000bô\u0001\u0006ù\t÷\u0001\fó\u0001\u0006ù\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0004\u0001ú\b\u0004ô\b\u0004ô\u0005\u0002þû\u0001\u0004\u0002ù\u0006ÿÿü\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0007þ\u0003ø\u0006\u0003÷\u0006\u0003÷\u0006\u0005õ\nþø\u0006ÿ\u0006õ\u0007\u0005ô\u0006ÿû\u0007\u0006ó\u0005\u0005üú\u000b\u0002ó\tÿø\u0005\u0002\u0001ø\u0007\u0002þù\u000b\u0000õ\u0005\u0006þ÷\u0005ÿ\u0006ö\fþö\u0001\u0004\u0005ö\b\u0004ô\u0007ÿú\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\bó\u0005\u0004÷\u0005\u0001\u0001ù\u0001\u0005þü\u0005\u0003ø\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0007\u0002ÿø\u0007ýü\fþö\u0001\u0005\u0002ø\b\u0004ô\u0007ÿú\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\u0004\u0001ú\t÷\u0001\u0005\u0005õ\u0001\u0006ù\t÷\u0001\u0005\u0006ô\u0001\u0005\u0007ó\u0001\u0006ýü\n\u0000ö\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0007\u0002\u0000÷\u0006\u0004ö\u0006ÿû\u0006\u0004ö\u0005ÿ\u0005÷\u0005\u0003ø\býû\b\u0000ø\núü\føü\u0005\u0006úû\u0005\u0005üú\u000b\u0002ó\tÿø\u000bÿö\u0007\u0002\u0001ö\býû\u000b\u0000õ\u0005\u0003ø\b\u0000ø\u0005\u0006ûú\u0007ÿú\u0001\u0004\u0005ö\b\u0004ô\u0007ÿú\u0001\u0006þû\u0001\u0006ÿú\u0001\u0004\u0000û\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0007\u0002\u0002õ\u0007ýü\u0005\u0007ý÷\u0005\u0002\u0006ó\u0006\u0001ù\u000b\u0002ó\tÿø\u0006\u0000ú\býû\u0006\u0005ýø\u0005\u0004ýú\tÿø\u0006\u0000ú\u0005\u0001ÿû\t\u0004ó\u0005ÿü\u0007\u0002\u0003ô\u0007ýü\tÿø\u0006\u0000ú\u0005\u0002\u0002÷\u0005\u0002ýü\u0007þû\u0007ÿú\u0001\u0005\u0002ø\b\u0004ô\u0007ÿú\u0001\u0006\u0000ù\u0001\u0006\u0001ø\u0001\nõ\u0001\u0005\u0000ú\u0005\u0004÷\u0001\u0005ÿ\u0004û\u0001\u0005ú\u0005\u0004÷\u0005\u0001\u0003÷\u0005\u0003ø\u0001\u0006ù\u0001\u0005ú\u0001\u0007ø\t÷\n\u0003ó\u0005\u0001\u0004ö\u0001\b÷\u0001\tö\u0001\nõ\u0005\u0000û\u0001\u000bô\u0001\u0005ú\u0005\u0004÷\u0001\u0006ù\u0001\fó\u0005\u0001\u0005õ\tÿø\u0005\u0001\u0006ô\u0005\u0001\u0007ó\u0005\u0002ýü\u0007þû\u0007ÿú\u0001\u0004ÿü\u0007\u0000ù\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0005ÿü\u0001\u000bô\tüû\u0005\u0002þû\u0001\u0004\u0003ø\u0001\fó\u0005\u0002ÿú\u0007ýü\u0005\u0002\u0000ù\u0006\u0000ú\r÷ü\røû\u0005\u0002\u0001ø\u0005\u0002\u0002÷\u0005ÿü\u0006ÿû\u0007\u0004õ\u000b\u0000õ\u0005\u0002\u0003ö\u0005\u0002\u0004õ\u0007ýü\u0007þû\u0007ÿú\u0001\u0004ÿü\u0007\u0000ù\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0006\u0004û\u0001\u0005ú\u0005\u0004÷\u0001\u0006ù\fÿõ\u0005\u0003ø\u0001\u0007ø\u0001\b÷\u0001\tö\u0001\nõ\u0007\u0003\u0000ö\u0006\u0004ö\u0006\u0005õ\u0005\u0002\u0003ö\u0005ÿü\u0005\u0003ÿù\u0006ÿû\u0006\u0004ö\býû\u0007\u0005ô\b\u0000ø\u0005\u0006ûú\u0007ÿú\u0001\u000bô\u0007\u0000ù\u0001\fó\u0001\u0004ÿü\u0001\b÷\u0001\u0004\u0000û\u0007\u0003\u0001õ\u0006\u0004ö\u0006ÿû\tÿø\u0006\u0000ú\u0005ÿ\u0003ù\u000b\u0000õ\u0007ÿÿû\fùû\býû\u0007\u0003\u0002ô\núü\u0005\u0003ø\u0006\u0000ú\nüú\u0007þû\u0007ÿú\u0001\u0004\u0001ú\u0007\u0000ù\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u0005ú\u0006\u0002\u0000ø\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0001\t\u0004û\u0001\u0005ú\u0007\u0000\u0002÷\u0007\u0006ó\r÷ü\u0007þ\u0000û\u0005\u0002\u0006ó\u0007\u0000\u0003ö\u000bþ÷\u0005\u0003ýû\u0005\u0003ø\býû\rúù\u0006\u0004ö\u0006ÿ\u0005ö\fùû\u0006\u0004ö\býû\rúù\u0005ÿ\u0000ü\rûø\u0001\u0006ù\u0007\u0000ù\u0001\u0007ø\u0001\b÷\u0001\tö\u0001\nõ\u0006ÿ\u0004÷\u0006\u0004ö\u0006ÿû\u0006\u0004ö\u0006ÿû\u0007\u0006ó\u0005\u0005üú\u000b\u0002ó\tÿø\u0005\u0002\u0001ø\u0006\u0001ù\u0006\u0004ö\u0005\u0006úû\büü\býû\rúù\u0006ÿû\fùû\r\u0000ó\u0006\u0007ó\b\u0002ö\u0007ÿú\u0001\u000bô\b\u0004ô\u0007ÿú\u0001\fó\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0005ú\u0007\u0000\u0004õ\tÿø\u0006ÿû\u0005\u0004\u0001ö\u0006\u0000ú\u0006\u0001ù\b\u0000ø\býû\u000b\u0002ó\u0005\bþõ\u0005\bÿô\u0005\b\u0000ó\fûù\u0006\u0004ö\u0005\u0005üú\u0006\u0006ûù\u0005ÿ\u0000ü\u0007ýü\fþö\u0001\u0006ù\b\u0004ô\u0007ÿú\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0005\u0000û\u0001\u0004\u0004÷\tüû\u0005\u0002þû\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0007ÿ\u0001ù\u0001\u0004\bó\u0001\u0005þü\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0005\u0003ø\u0001\u0005\u0002ø\u0001\u0005\u0003÷\u0006þ\bô\u0001\u0005\u0004ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0007ÿ\u0001ù\u0007\u0000\u0005ô\t÷\u0001\u0005\u0005õ\u0001\u0005\u0006ô\tûü\u0001\u0005\u0007ó\u0001\u0006ýü\u0005\u0004÷\u0001\u0006þû\u0001\u0006ÿú\u0001\u0006\u0000ù\u0006þ\u0006ö\u0006\u0004\u0000ö\u0001\u0006\u0001ø\t÷\u0001\u0006\u0002÷\u0001\u0004\u0003ø\u0001\u0006\u0003ö\u0007\u0000\u0006ó\u0001\u0006\u0001ø\t÷\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0006\u0004õ\u0007\u0001üü\u0001\u0006\u0005ô\u0001\u0006\u0006ó\u0007\u0000\u0006ó\u0001\u0006\u0001ø\t÷\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0006\u0004õ\u0007\u0001ýû\u0001\u0006\u0005ô\u0001\u0004\u0007ô\u0007ÿ\u0001ù\u0007\u0001þú\t÷\u0001\u0005\u0005õ\u0001\u0005\u0006ô\u0005\u0001ú\u0001\u0007üü\u0001\u0007ýû\u0001\u0004\u0006õ\u0006\u0007ûø\u0001\u0005\u0004ö\u0005\u0004÷\u0005\u0001\u0001ù\u0006\u0000\u0005õ\u0001\u0006þû\u0001\u0007þú\u0006þ\u0006ö\u0007\u0001ÿù\u0001\u0005\u0005õ\u0001\u0005\u0006ô\u0005\u0001ú\u0001\u0007ÿù\u0001\u0007\u0000ø\u0005ÿü\u0001\u0004\u0004÷\u0015ëÍ>õ\rùÇ\u0015%ù\u0011á\u0012\f\u0004ð\tõ\u0002\u0004û\u0001\u0005ú\u0007\u0005þö\u0006ÿ\u0005ö\b\u0000ø\núü\føü\u0006ÿ\u0003ø\u0007þû\u0007ÿú\u0001\u0006ù\b\u0004ô\u0007ÿú\u0001\u0007ø\u0001\b÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\tö\u0005\u0004÷\u0001\fó\u0001\u0005ú\u0007þ\u0003ø\u0006ÿû\u0006ÿû\u0005\u0007\u0001ó\t\u0001ö\býû\u0006\u0001ù\u0006ÿû\u0006þ\u0003ù\u0005\u0003ø\býû\u0005\u0002\u0004õ\u0007ýü\fþö\u0001\u0006ù\b\u0004ô\u0007ÿú\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\nõ\u0006\u0002\u0000ø\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u000bô\b\u0004ô\b\u0004ô\u0005\u0002þû\u0001\u0004\u0003\u0004û\u0001\u0005ú\rÿô\u0006\u0004ö\u0006\u0000ú\u0007\u0005ô\r\u0000ó\bþú\u0005ÿ\u0000ü\u0007ýü\fþö\u0001\u0006ù\b\u0004ô\u0007ÿú\u0001\u0007ø\u0001\b÷\u0001\tö\u0005\u0001ú\u0001\nõ\u0001\u000bô\tûü\u0001\fó\u0001\u000bô\u0001\u0004ÿü\u0005\u0004÷\u0005ÿ\u0001û\u0005\u0003ø\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0005ÿ\u0002ú\u0006ÿû\u000bþ÷\u0006\u0000ú\u0005ÿ\u0003ù\u0005ÿ\u0004ø\u0006\u0005õ\u0005\u0003ø\býû\b\u0000ø\u0005ÿ\u0005÷\u0005\u0003ø\fúú\u0005ÿ\u0006ö\fþö\u0001\u0004\u0003ø\u0007\u0000ù\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\tüû\u0007ÿú\u0005\u0003ø\u0001\u0004\u0007ô\u0005\u0004÷\u0001\u0004\u0000û\u0005ÿ\u0007õ\u0001\u0004\bó\u0005\u0001ú\u0001\nõ\u0001\u000bô\tûü\u0001\fó\u0001\u000bô\u0005ÿ\bô\u0005\u0003ø\u0001\u0004ÿü\u0005ÿ\tó\u0001\u0005þü\u0001\u000bô\u0005\u0000ÿü\u0001\u0005ÿû\u0001\u000bô\u0001\u0005\u0000ú\u0001\u0004\u0001ú\u0001\u0005\u0001ù\u0005\u0000\u0000û\u0001\u0004\bó\u0001\u0005\u0002ø\u0001\u0004\u0001ú\u0005\u0000\u0001ú\u0001\u0005\u0003÷\u0005\u0000\u0002ù\u0001\u0005\u0003÷\u0001\u0004\u0001ù\u0012Û\u0017\u0013ü\u0004û\t÷\u0001\u0005ú\t÷\u0001\u0006ù\u0001\u0007ø\u0001\b÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0001\fó\u0005ÿü\u0001\u0004ÿü\u0001\u0004\u0000û\rÿô\u0006\u0003÷\u0007\u0006ó\u0006\u0000ú\u0006\u0000\u0002ø\u0005\u0003ø\u0006\u0004ö\u0005\u0005\u0003ó\u0006\u0000þü\b\u0000ø\u0006\u0003÷\u0006\u0004ö\u0006\u0000ú\u000b\u0000õ\u0005\u0002\u0003ö\u0005ÿü\nÿ÷\fþö\u0001\u0004\u0001ú\b\u0004ô\u0007ÿú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0004\u0000û\u0006\u0006üø\u0006\u0004ö\u0006ÿ\u0005ö\u0005\u0005\u0003ó\u000b\u0000õ\u0005\u0003ø\u0005\u0006ùü\u0006\u0002ýû\u0005\u0003ø\u0007\u0004õ\rùú\u0005ÿü\u0006\u0002ýû\nûû\u0005\u0003\u0002ö\u0007ÿú\u0001\u0004\u0001ú\b\u0004ô\u0007ÿú\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0005\u0000û\u0001\u0004ÿü\u0001\u0004\bó\u0001\fó\u0001\u0004\u0004÷\u0005\u0004÷\u0005\u0001\u0001ù\u0001\u0005þü\u0005\u0003ø\u0001\u0005ÿû\u0005\u0004÷\u0001\u0005ÿû\tüû\u0007ÿú\u0005\u0003ø\u0001\u0005\u0000÷\u0015ëÍ>õ\rùÇ\u00173ë\u0002\u000b\u0004õ\u0006ÿ÷\u0015ëÍGÿõ\u0003Â\u001e\u001d\n\u0001ö\u0011ë\u0004û\u0001\u0005ú\u0005\u0004÷\u0001\u0006ù\u0001\u0007ø\u0001\b÷\u0007\u0004ÿö\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\tö\u0007\u0000ù\u0001\nõ\u0001\u000bô\u0001\u0007ø\u0001\fó\u0007\u0004\u0000õ\u0006\u0006ô\u000b\u0000õ\u0005\u0003ø\u0006\u0004ö\u0005\u0005\u0003ó\u000b\u0000õ\u0006\u0001ÿú\u0005\u0006ûú\u0007ÿú\u0001\u0004ÿü\u0007\u0000ù\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\t÷\u0005\u0001ú\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0005ú\u0005\u0002ÿú\u0001\u0004\u0005ö\u0001\u0005ú\u0005\u0004÷\u0007\u0004\u0001ô\u0005\u0003ø\u0001\u0006ù\tüû\u0005\u0002þû\u0001\u0004\u0006õ\u0006\u0001\u0004õ\u0001\u0004\u0005ö\u0001\u0004\u0007\r\u0000ýùü\rè\u000b\u000b\tð÷\u0015ëÍ>õ\rùÇ%!þ÷\u0005ùÛ3ô\u0003ø\u0001\r\u0004û\u0006\u0004üú\u0001\u0005ú\u0001\u0006ù\u0006\u0004üú\u0001\u0007ø\u0001\b÷\u0005\u0001ú\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0006\u0004ýù\u0006þ\u0003ù\u0005\u0003ø\býû\u0005ÿ\u0004ø\fùû\u0006\u0004þø\býû\u000b\u0000õ\u0005\u0006þ÷\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\u0004ÿü\b\u0004ô\u0007ÿú\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0005\u0004÷\u0001\u0004\u0004÷\u0006\u0004ÿ÷\u0001\u0004\u0005ö\u0006þ\u0006ö\u0006\u0004\u0000ö\u0001\tö\u0006\u0004\u0001õ\u0006\u0001\u0002÷\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0001\u0006ù\u0006\u0004\u0003ó\u0001\u0005ÿû\u0006\u0005ùü\u0001\u0007ø\u0005ÿü\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0006\u0005úû\u0005\u0003ø\u0001\u0005\u0002ø\u0001\fó\u0006\u0005ûú\u0007þû\u0007ÿú\u0001\u0004ÿü\u0007\u0000ù\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\u0005\u0005õ\fÿõ\u0005\u0003ø\u0001\u0005\u0002ø\u0006\u0004ÿ÷\u0001\u0004\u0005ö\u0006þ\u0006ö\u0006\u0004\u0000ö\u0001\tö\u0001\u0005\u0006ô\u0001\u0005\u0007ó\u0001\u0006ýü\u0001\u0006þû\u0001\u0006ÿú\u0001\u0006\u0000ù\u0005\u0000û\u0001\u0005\u0000ú\u0006þ\u0006ö\u0001\u0006\u0001ø\u0001\u0006\u0002÷\u0001\u0006\u0003ö\u0001\u0006\u0004õ\u0006\u0001\u0003ö\u0001\u0005ú\u0001\fó\u0006\u0005üù\u000býø\u0006ÿû\tÿø\u0006\u0000ú\u0005\u0005üú\u0005\u0007øü\býû\u0006\u0005ýø\u0006ÿû\u0006\u0004ö\býû\u000b\u0000õ\u0005\b\u0000ó\u0006\u0005þ÷\u0006ÿû\u0006\u0005ÿö\u0005\u0003ø\u0006\u0004ö\fúú\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\u0004ÿü\b\u0004ô\u0007ÿú\u0001\u0006\u0005ô\u0001\u0006\u0006ó\u0001\u0007üü\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\u0005\u0002ø\u0001\u0006ù\u0001\u0007ýû\u0001\u0004\u0002ù\t÷\u0001\u0007þú\u0001\u0007ÿù\u0001\u0007\u0000ø\u0001\u0007\u0001÷\tüû\u0005\u0002þû\u0001\u0007\u0002ö\u0001\u0007\u0003õ\u0005\u0000\u0005ö\u0006ÿû\t\u0000÷\u0006\u0005õ\u0005\u0003ø\u0005\b÷ü\u0005ÿ\u0004ø\u0007\u0006ó\u0006\u0000ú\u0005\u0003ø\fúú\u0006\u0000ÿû\t\u0001ö\u0005\u0006ûú\u0007ÿú\u0001\u0007\u0004ô\u0007\u0000ù\u0001\u0007\u0005ó\u0001\bûü\u0001\u0005þü\u0001\büû\u0001\býú\u0001\fó\u0006\u0005\u0000õ\býû\u000b\u0000õ\u0005\u0003ø\u0005ÿ\u0005÷\u0005\u0003ø\býû\u0006\u0005\u0001ô\býû\u000b\u0000õ\u0005\u0003ø\u0006\u0005\u0002ó\u0007ýü\fþö\u0001\u0004ÿü\u0007\u0000ù\u0001\bþù\u0001\bÿø\u0001\u0004\u0003ø\u0006\u0006øü\u0001\u0005ÿû\u0001\b\u0000\u0004û\u0005ÿü\u0001\u0005ú\u0001\u0006ù\u0007\u0003\u0003ó\u0006ÿû\u0006\u0004ö\füø\u0006\u0002ýû\føü\u000bþ÷\u0006\u0000ú\r÷ü\u0007þ\u0000û\tÿø\u0006\u0000ú\býû\u0007þ\u0006õ\fþö\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\b÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\u0004ÿü\u0005\u0004÷\u0001\u0004\u0000û\u0001\fó\t÷\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\fó\t÷\u0001\u0004\u0001ú\u0007\u0004ùü\u0005\u0003ø\u0001\u0004\u0002ù\u0005\u0000û\u0001\u0005÷\u0015ëÍ>õ\rùÇ\u00131\u0000ï\u0018Ú!û\u0003óà3ë\u0002\u000b\u0004õ\u0006ÿ÷\u0015ëÍ>õ\rùÇ&\u0014\ný\bê\u0001\nù÷\u0013ü\u0004û\u0001\u0005ú\u0001\u0005ú\tüû\u0005\u0002þû\u0001\u0006ù\u0005\u0004÷\u0001\u0007ø\u0001\u0005ú\u0005ÿü\u0001\b÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0001\u0004ÿü\u0001\u0004\u0000û\u0005\u0004\u0004ó\u0006\u0004ö\u0005\u0004ýú\u0005\u0002\u0000ù\u0005\u0005úü\røû\u0006\u0000ú\býû\b\u0000ø\u0005\u0005ûû\u0006\u0004ö\u0005\u0005üú\u0006\u0004ö\u0005\u0005ýù\u0005\u0003\u0002ö\u0007ÿú\u0001\u0004\u0001ú\b\u0004ô\u0007ÿú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0005ÿü\u0001\u0004\u0005ö\t÷\u0001\u0004\u0006õ\t÷\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005ú\u0001\u0005þü\u0001\u0005ÿû\u0005\u0004÷\u0005\u0001\u0001ù\u0001\u0005\u0000ú\u0005\u0003ø\u0001\u0007ø\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0005\u0005þø\u0005\u0003ø\u0001\u0004ÿü\u0001\u0005\u0001ù\u0005\u0005ÿ÷\u0007ýü\tÿø\u000bþ÷\u0006\u0000ú\u0005\u0005üú\u000b\u0002ó\u0007\u0006ó\býû\u0005\u0005\u0000ö\u0005\u0005\u0001õ\u0006ÿû\u0006\u0004ö\u0005\u0005üú\u0006\u0004ö\u0005\u0005\u0002ô\fþö\u0001\u0005\u0002ø\u0007\u0000ù\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\u0005\u0005õ\u0005\u0000û\u0001\u0004\u0005ö\u0005\u0000û\u0001\b\rö\u000eýúûÊ5\fÿ\u0006ñ\t\u0006º\u0015,ÿ\u0006ñ\u0013ü\u0004û\u0001\u0005ú\u0001\u0006ù\u0005\u0007ûù\u0006\u0004ö\u0006ÿ\u0005ö\u0006ÿ\u0006õ\u0007\u0005ô\u0006\u0000ú\t\u0004ó\u0007ýü\fþö\u0001\u0007ø\u0007\u0000ù\u0001\b÷\u0001\tö\u0001\nõ\u0005ÿü\u0001\u000bô\u0001\fó\u0001\u0006ù\u0007ý\u0002ú\u000b\u0000õ\u0005\bþõ\u0006\u0000ú\u000b\u0000õ\u0006\u0001ÿú\u0005ÿ\u0000ü\rûø\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0005\u0000û\u0001\u0004\u0002ù\u0006\u0006ÿõ\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0007ý\u0003ù\u0007ý\u0004ø\n\u0002ô\u0005\u0003ø\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\u0005ÿû\u0001\u0005\u0000ú\u0005\u0000û\u0001\u0005\u0001ù\u0001\u0005\u0002ø\u0001\u0005\u0003÷\u0005\u0001ú\u0001\u0005\u0004ö\u0006þ\u0006ö\u0001\u0005\u0005õ\u0001\u0005\u0006ô\u0001\u0005\u0007ó\u0001\u0006ýü\u0001\u0006þû\u0001\u0006ÿú\u0001\u0006\u0000ù\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0006\u0001ø\u0006\u0002\u0003õ\u0006\u0002\u0003õ\u0007ý\u0005÷\u0001\u0006\u0001ø\u0001\u0006\u0002÷\u0001\u0006\u0003ö\u0001\u0006\u0004õ\u0001\u0006\u0005ô\u0001\u0006\u0006ó\u0005\u0003ø\u0005\u0001\u0001ù\u0001\u0007üü\u0007ý\u0003ù\u0001\u0007ýû\u0001\u0007þú\u0001\u0007ÿù\u0005ÿü\u0001\u0007\u0000ø\u0005\u0000û\u0001\u0007\u0001÷\u0001\nõ\u0005ÿü\u0001\u0007\u0002ö\tüû\u0005\u0002þû\u0001\u0006\u0001ø\u0001\u0006ù\u0007ý\u0006ö\t\u0000÷\u0006\u0000ú\u000b\u0000õ\u0005\u0006þ÷\býû\u000b\u0000õ\u0005\u0003þú\u0007ý\u0007õ\u0006\u0000þü\rúù\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\u0007ø\u0007\u0000ù\u0001\u0007\u0003õ\u0001\u0007\u0004ô\u0001\u0007\u0005ó\u0001\bûü\u0005\u0004÷\u0001\büû\u0005\u0004÷\rýö\u0001\büû\u0005ÿü\u0001\u0005\u0001ù\u0001\býú\u0001\bþù\u0001\bÿø\u0005ÿü\u0001\u0004\u0002ù\u0001\b\u0000÷\u0005\u0000û\u0001\b\u0001ö\u0001\u0006ù\u0006\u0007ýö\u0005\u0004ýú\u0007\u0006ó\u0005\u0002\u0002÷\u0005ÿü\u0005\u0003\u0002ö\u0007ÿú\u0001\u0007ø\u0007\u0000ù\u0001\b\u0002õ\u0001\b\u0003ô\u0001\u0005ú\u0001\u0004\u0001ú\u0005\u0000û\u0001\u0007\u0002ö\u0005\u0000\u0005ö\u0001\u0004\u0003ø\u0001\bûü\u0005\u0000û\u0001\b\u0004ó\u0001\u0005\u0004ö\u0001\túü\u0001\tûû\u0007ý\bô\u0007ý\tó\u0005\u0007úú\r÷ü\u0005\u0006þ÷\u0007þÿü\tÿø\u0006\u0000ú\u000b\u0002ó\u0005\u0001\u0007ó\u0005ÿü\u0005\u0003\u0002ö\u0007ÿú\u0001\tüú\u0007\u0000ù\u0001\týù\u0001\tþø\u0001\fó\u0001\u0006ù\u0005\u0000\u0000û\u0006\u0004ö\u0006ÿû\u0006\u0004ö\u0006ÿ\u0006õ\u000b\u0000õ\u0005\u0003ø\f\u0001ó\u0006\u0000ú\r÷ü\u0007þ\u0000û\u0007\u0006ó\u0006\u0002ø\rùú\u0005ÿü\u0006\u0002ýû\nûû\u0005\u0003\u0002ö\u0007ÿú\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\tÿ÷\u0001\t\u0000ö\u0001\t\u0001õ\u0001\t\u0002ô\u0001\u0007\u0005ó\u0001\tûû\u0007þ\u0001ú\u0005\u0006ûú\u0007ÿú\u0001\tüú\u0007\u0000ù\u0001\t\u0003ó\u0001\nùü\u0001\núû\u0005\u0004÷\u0001\büû\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\nûú\u0005ÿü\u0001\b\u0004ó\u0005\u0000û\u0001\u000bô\u0001\bûü\u0006\u0007ùú\u0001\nüù\u0001\bûü\u0007þ\u0002ù\u0001\nýø\u0001\u0006ù\u0007þ\u0003ø\u0006\u0004ö\u0006ÿû\f\u0001ó\u0005\u0003ýû\u0005\u0003ø\býû\u000b\u0000õ\u0005\u0003ø\u0006\u0004ö\u0006ÿû\u0006\u0000ú\u000b\u0000õ\u0005\u0003ø\u0006\u0004þø\fùû\r\u0000ó\u0006\u0007ó\b\u0002ö\u0007ÿú\u0001\u0007ø\u0007\u0000ù\u0001\nþ÷\u0001\nÿö\u0001\n\u0000õ\u0001\u0006ù\u0007þ\u0004÷\u0005ÿü\u0006\u0002ýû\u0005\u0003ø\u0005\u0006úû\býû\u000b\u0000õ\u0005\u0003ø\u0005\u0007øü\býû\b\u0000ø\u0006ÿ\u0005ö\u0006ÿ\u0006õ\u0007\u0005ô\u0006ÿ\u0003ø\fþö\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\n\u0001ô\u0001\n\u0002ó\u0001\u0004\u0004÷\u0001\tûû\u0007þ\u0005ö\u0005\u0004\u0000÷\u000b\u0000õ\nþø\b\u0000ø\rúù\u0006\u0001ù\f\u0001ó\u000bÿö\u0005\u0007þö\u0005\u0002\u0006ó\u0007þ\u0006õ\fþö\u0001\tüú\u0007\u0000ù\u0001\u000bøü\u0001\u000bùû\u0001\u000búú\b\u0004ô\u0006\u0001ýü\u0001\u0005ÿû\u0001\tûû\u000bûú\u0006\u0003÷\u0006\u0004ö\u0006ÿû\u0007\u0006ó\büü\u0005\u0005üú\u0006\u0003÷\u0006\u0000ú\u0006\u0001ù\býû\b\u0000ø\u0005ÿ\u0000ü\b\u0002ö\u0007ÿú\u0001\tüú\b\u0004ô\u0007ÿú\u0001\u000bûù\u0001\u000büø\u0001\u0006\u0000ù\u0005ÿü\u0001\u0007\u0001÷\u0005\u0000\u0002ù\u0001\nüù\u0001\u000bú÷\u0015ëÍGÿõ\u0003Â\u001a\u0019\u0012õå\u0014\u000f\u0004û\u0005\u0004÷\u0005\u0001\u0001ù\u0001\u0005ú\u0005\u0003ø\u0001\u0006ù\u0001\u0007ø\u0001\u0007ø\u0006\u0004üú\u0001\b÷\u0001\tö\u0007\u0001\u0000ø\u0006\u0003÷\u0005\u0007\u0001ó\u000b\u0000õ\u0005\u0003ø\b\u0000ø\býû\u000b\u0000õ\føü\u0006ÿû\u0007\u0006ó\u0006\u0000ú\u0005\u0003þú\bþú\u0005\u0005\u0003ó\u0006\u0001ù\fúú\u0005ÿ\u0000ü\rûø\u0001\nõ\u0007\u0000ù\u0001\u000bô\u0001\fó\u0001\u0004ÿü\t÷\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0005\u0001ú\u0001\u0004\u0002ù\tûü\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0004\u0005ö\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0004\u0006õ\u0001\tö\u0006þ\u0002ú\u0006ÿ\u0005ö\u0006\u0000ú\u000b\u0000õ\føü\býû\u0005\u0002\u0004õ\u0007ýü\fþö\u0001\nõ\u0007\u0000ù\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0001\u0007ø\u0005\u0004÷\u0001\u0006ù\u000bûú\u0001\u0005ÿû\n\u0000ö\u0001\u0005ÿû\t÷\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0005\u0001ú\u0001\u0004\u0002ù\tûü\u0001\u0004\u0003ø\u0005\u0001\u0001ù\u0001\u0005ú\u0005\u0003ø\u0001\u0004\u0004÷\u0007\u0001\u0001÷\u0001\b÷\u0001\u0005\u0000ú\u0001\u0007÷\u0015ëÍ>õ\rùÇ\u0015)õ\u0012\u0000Ð\u001e\u0012\u0001Ñ3ë\u0002\u000b\u0004õ\u0006ÿó\b\u0002\u0007ï\u0004û\u0001\u0005ú\u0001\u0006ù\u0005\u0004\u0004ó\u0007þÿü\tÿø\u0006ÿû\tÿø\u000bÿö\u0006\u0001ù\u000b\u0001ô\u000bÿö\u0006\u0005ýø\rùú\u0005ÿü\fý÷\u0007\u0001\u0002ö\nüú\fþö\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\b÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0006ù\u0007\u0001\u0003õ\u0006\u0004ö\u0006ÿû\u0006\u0003÷\u0006\u0000ú\u000b\u0000õ\u0005\u0003ø\býû\b\u0000ø\u0005ÿü\bþú\u000b\u0000õ\u0005\u0003\u0001÷\t\u0004ó\u0007ýü\u0007þû\u0007ÿú\u0001\u0007ø\u0007\u0000ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0005ú\n\u0000ö\u0001\u0004\u0005ö\u0001\nõ\fÿõ\u0005\u0003ø\u0001\u0004\u0006õ\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0001\u0005ÿû\u0007\u0001\u0004ô\bÿù\u000bþ÷\u0006\u0000ú\büü\býû\u000b\u0000õ\u0005\u0003ø\u0006\u0004ö\u0005ÿ\u0005÷\u0006\u0001ÿú\u0006ÿû\b\u0000ø\u0005ÿü\bþú\u000b\u0000õ\nûû\u0005\u0003\u0002ö\u0007ÿú\u0001\u0005\u0000ú\u0007\u0000ù\u0001\u0005\u0001ù\u0001\u0005\u0002ø\u0001\u0004\bó\u0001\u0005ÿû\u0007ÿ\u0006ô\u0006\u0003÷\u0006\u0004ö\býû\u0006\u0001ù\u0006\u0004ö\b\u0000ø\u0005\u0006ûú\u0007ÿú\u0001\u0005\u0000ú\u0007\u0000ù\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\u0005\u0005õ\tüû\u0005\u0002þû\u0001\u0004\u0006õ\u0006\u0001\u0001ø\u0001\u0004\u0005ö\u0005\u0004÷\u0001\u0005\u0006ô\u0001\u0005ÿû\u0006\u0003\u0003ô\u0006\u0004ö\u0007ýü\u0006\u0007úù\u0005\u0004\u0001ö\fùû\b\u0000ø\u0007\u0001\u0005ó\u0005\bþõ\u0006\u0006ûù\núü\u0005\u0003ø\u0006\u0004ö\u0006\u0000ú\t\u0004ó\u0005ÿü\u0007ýü\u0006\u0004ö\tÿø\u0006\u0004ûû\u0005\u0001\u0000ú\t\u0004ó\b\u0002ö\u0007ÿú\u0001\u0005\u0000ú\b\u0004ô\u0007ÿú\u0001\u0005\u0007ó\u0001\u0006ýü\u0001\fó\u0005\u0001ú\u0001\u0006þû\u0001\u0006ÿú\u0001\u0006\u0000ù\u0001\u0005\u0005õ\u0001\u0005ÿû\u0007\u0002ûü\u0006\u0003÷\f\u0001ó\u0006\u0000ú\u0006\u0000ú\u0005\u0003ø\býû\u0006\u0001ù\u0005\u0004\u0000÷\u0006\u0001ù\u0007\u0002üû\tÿø\u0006\u0004ûû\t\u0004ó\u0007\u0002ýú\u0007ýü\u0007þû\u0007ÿú\u0001\u0005\u0000ú\u0007\u0000ù\u0001\u0006\u0001ø\u0001\u0006\u0002÷\u0001\u0004\u0002ù\u0001\u000bô\u0007þ\u0007ô\u0001\u0006\u0003ö\u0001\u0006\u0004õ\u0001\u0006\u0005ô\u0001\u0006\u0006ó\tûü\u0001\u0007üü\u0001\u0007ýû\u0001\u0007þú\t÷\u0001\u0007ÿù\u0001\u0007\u0000ø\n\u0003ó\t÷\u0001\u0007ÿù\u0001\u0007\u0001÷\u0015ëÍGÿõ\u0003Â\u00131\u0000ï\u0018Ó\u001d\n\u0001\u0004û\u0001\u0005ú\n\u0003ó\u000bùü\u0001\u0006ù\u0001\u0007ø\u0001\b÷\u0001\tö\u0001\u0005ú\n\u0003ó\u000bùü\u0001\u0006ù\u0001\u0007ø\u000búû\u0005\u0003ø\u0001\b÷\u0001\tö\u0001\nõ\u000bûú\u0001\u000bô\u0001\fó\u0005\u0000û\u0001\u0004ÿü\u0001\tö\u0001\u0004\u0000û\u000büù\u000býø\u000bþ÷\u000bÿö\u000b\u0000õ\u0005\u0003ø\u000b\u0001ô\u000bÿö\b\u0000ø\u000b\u0002ó\føü\u0006ÿû\fùû\fúú\fûù\u0006\u0004ö\füø\fý÷\u0006\u0004ö\u0006\u0000ú\nüú\fþö\u0001\u0004\u0001ú\b\u0004ô\u0007ÿú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\fÿõ\u0005\u0003ø\u0001\u0004\u0005ö\u0001\u0004\u0006õ\f\u0000ô\u0006\u0003÷\fùû\býû\b\u0000ø\núü\u0005\u0003ø\f\u0001ó\u0006\u0000ú\r÷ü\røû\u0006\u0000ú\býû\b\u0000ø\rùú\rúù\u000b\u0000õ\nûû\t\u0004ó\rûø\u0001\u0004\u0007ô\u0007\u0000ù\u0001\u0004\bó\u0001\u0005þü\u0001\u0005ÿû\u0005\u0004÷\u0001\u0005\u0000ú\u0001\u0005\u0001ù\t÷\u0001\u0005\u0002ø\rü÷\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0005\u0001ú\u0001\u0005\u0005õ\u0001\u0005\u0006ô\tûü\u0001\u0005\u0007ó\u0001\u0005\u0006ô\t÷\u0001\u0006ýü\rýö\u0001\u0006þû\u0005\u0001ú\u0001\u0005\u0005õ\u0001\u0005\u0006ô\tûü\u0001\u0005\u0007ó\u0001\u0005\u0006ô\t÷\u0001\u0006ýü\u0001\u0006þû\rþõ\u0001\u000bô\u0005ÿü\u0001\u0004ÿü\u0001\t\u0004û\u0001\u0005ú\u0007\u0004úû\u0001\u0006ù\u0001\u0007ø\u0001\u0005ú\u0001\b÷\u0006\u0004ýù\u0006\u0000ú\u000b\u0000õ\u0006\u0001ÿú\rúù\u000b\u0000õ\u0005\u0003ø\u0006ÿû\u0005\u0004\u0001ö\u0006\u0000ú\u0006\u0001ù\b\u0000ø\u0007\u0004ûú\u0006\u0004ö\u0005\u0005üú\u0006\u0004ö\b\u0000ø\u0005ÿ\u0006ö\fþö\u0001\tö\b\u0004ô\u0007ÿú\u0001\nõ\u0001\u000bô\u0001\fó\u0001\fó\u0005\u0004÷\u0001\u0004ÿü\u0001\b÷\u0007\u0004üù\u0005\u0004ýú\tÿø\u0006\u0000ú\u0005\u0002\u0002÷\u0005\u0002ýü\u0007þû\u0007ÿú\u0001\tö\b\u0004ô\u0007ÿú\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\b\u0004ô\u0006\u0001ýü\u0001\u0004\u0003ø\u0001\u0004\u0002þ\u000f\u0004û\u0005\u0000û\u0001\u0005ú\u0001\u0006ù\u0005\u0005ÿ÷\u0007ýü\tÿø\u0006ÿû\u0005\u0007\u0001ó\u000b\u0000õ\u0005\u0006þ÷\býû\u000b\u0002ó\føü\u0006ÿû\fùû\býû\u0005ÿü\u0006\u0007ó\u0007\u0004ýø\u0005\u0005üú\u0006\u0005\u0002ó\u0007ýü\fþö\u0001\u0007ø\u0007\u0000ù\u0001\b÷\u0001\tö\u0001\nõ\u0007ÿ\u0004ö\u0001\u000bô\u0001\fó\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0004ÿü\u0001\fó\u0005ÿü\u0001\u0005ú\u0001\u0006ù\u0005\u0000\u0000û\u0005\u0006ûú\u0007ÿú\u0001\u0007ø\u0007\u0000ù\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\fó\u0001\u0004\u0003ø\u0007ý\bô\u0001\u000bô\u0005\u0004÷\u0005\u0001\u0001ù\u0006\u0000\u0005õ\u0001\u0004\u0004÷\t÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\fó\u0001\u0004\u0007ô\u0005\u0004÷\u0001\u0004\u0004÷\t÷\u0001\u0004\u0005ö\u0005\u0001\u0001ù\u0007\u0004þ÷\u0005\u0003ø\u0001\u0004\u0006÷\u0015ëÍ>õ\rùÇ\u0014-\u0000ýùü\r\u0004û\u0006\u0002\u0000ø\u0001\u0005ú\u0005\u0001\u0001ù\u0001\u0006ù\u0005\u0003ø\u0001\u0007ø\tüû\u0007ÿú\u0005\u0003ø\u0001\b÷\u0001\tö\u0001\tö\u0001\nõ\u0006\u0002\u0002ö\u0006\u0000ÿû\u0006\u0001ù\u0005ÿ\u0005÷\u0005\u0003ø\u0006\u0002ø\u0006\u0004ö\u0006ÿ\u0005ö\býû\u000b\u0000õ\u0005\u0003ø\u0006\u0006ûù\u0005ÿ\u0000ü\u0007ýü\fþö\u0001\u000bô\b\u0004ô\u0007ÿú\u0001\fó\u0001\u0004ÿü\u0001\u0004\u0000û\u0005ÿü\u0001\u0004\u0001ú\u0006\u0002\u0000ø\u0001\u0005ú\u0001\u0007ø\u0001\u0004\u0000û\u0005\u0000û\u0001\u0004\u0001ú\u0005\u0004÷\u0001\u0004\u0002ù\u0001\tö\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0006\u0006üø\u0006\u0003÷\u0006\u0004ö\u0006ÿû\býû\u0007\u0004\u0002ó\u0005\u0006þ÷\r÷ü\u0005\u0002\u0003ö\u0007\u0005øü\füø\bþú\u000b\u0000õ\u0007\u0005ùû\u0007ýü\fþö\u0001\u0004\u0005ö\u0007\u0000ù\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\b÷\u0015ëÍ>õ\rùÇ%!þ÷\u0005ù\u0004û\u0005\u0004÷\u0001\u0005ú\u0001\u0006ù\u0007ÿþü\u0005\u0004\u0000÷\u0006\u0001ù\býû\u0006ÿ\u0006õ\u000b\u0000õ\u0005\u0003ø\u0007\u0004õ\u0006ÿû\u0006\u0004ö\füø\bþú\u0006\u0001ù\u0006\u0006úú\rûø\u0001\u0007ø\u0007\u0000ù\u0001\b÷\u0001\tö\u0001\nõ\u0001\nõ\u0001\u000bô\u0001\fó\u0001\u0004ÿü\u0007\u0005ý÷\bÿù\u0006ÿû\fùû\býû\b\u0000ø\u0005ÿü\bþú\u000b\u0000õ\u0007ÿÿû\býû\u0007\u0004\u0002ó\u0006þ\u0001û\u0006\u0004úü\u0006\u0004ûû\u0005\u0001\u0000ú\u0005\u0003\u0002ö\u0007ÿú\u0001\u0004\u0000û\u0007\u0000ù\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\fó\u0001\u000bô\fÿõ\u0005\u0003ø\u0001\u0004\u0003ø\t÷\u0001\u0004\u0004÷\u0001\u0004\u0005÷\u0015ëÍ>õ\rùÇ'\u0019\u0005\u0002û\u0000ÿ\u0003\u0002ñÿë!õ\rï\u0013õ\u0006ÿ×3ë\u0002\u000b\u0004õ\u0006ÿ\u0004û\u0001\u0005ú\u0005ÿü\u0001\u0006ù\fÿõ\u0005\u0003ø\u0001\u0007ø\u0001\b÷\u0005\u0007üø\u0007ýü\u0005\u0007ý÷\u0007\u0006ó\býû\u0005\u0007þö\u0005\u0002\u0006ó\b\u0000ø\u0005\u0001ÿû\u0006ÿû\u0006\u0004ö\u0005\u0005üú\u0006\u0004ö\b\u0000ø\u0005\u0007ÿõ\rûø\u0001\tö\b\u0004ô\u0007ÿú\u0001\nõ\u0001\u000bô\u0001\fó\u0001\b÷\u0005\u0007\u0000ô\u0005\u0006\u0002ó\u0005\u0007\u0001ó\u000b\u0000õ\u0005\u0003ø\u0005\b÷ü\u0007\u0005ô\u0006ÿû\tÿø\u0006\u0000ú\u0006\u0000ú\u0005\u0003þú\bþú\u0005ÿ\u0005÷\u0005\u0003þú\bþú\u0005ÿ\u0000ü\rûø\u0001\tö\u0007\u0000ù\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0005ú\u0005\u0007ûù\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0005\bøû\u0001\u0004\u0001ú\u0005\u0000û\u0001\u0006ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0005\bùú\u0005\u0006ûú\u0007ÿú\u0001\u0004\u0005ö\u0007\u0000ù\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0004\u0004÷\u0005\búù\u0006\u0004ö\u0006\u0000ú\u000b\u0000õ\føü\býû\u0005\u0002\u0004õ\u0007ýü\u0007þû\u0007ÿú\u0001\u0004\u0005ö\b\u0004ô\u0007ÿú\u0001\u0005þü\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0004\bó\u0001\u0004\u0003ø\u0001\u0005\u0001ù\u0001\u0005\u0002ø\u0005\u0004÷\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0005\u0001ú\u0001\u0005\u0005õ\u0001\u0005\u0006ô\u0001\fó\t÷\u0005\u0001ú\u0001\u0005\u0007ó\u0001\u0006ýü\u0005\u0001ú\u0001\u0005\u0007ó\u0001\u0006þû\u0001\u0006ÿú\u0001\u0006\u0000ù\t÷\u0005\u0001ú\u0001\u0006\u0001ø\t÷\u0005\u0001ú\nö\u0001\u0006\u0002÷\u0001\u0006\u0003ö\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0005\bûø\tÿø\u0005\u0001\u0006ô\u0005\u0005\u0001õ\u0005\u0003\u0002ö\u0007ÿú\u0001\u0004\u0005ö\b\u0004ô\u0007ÿú\u0001\u0006\u0004õ\u0001\u0006\u0005ô\u0001\u0006\u0006ó\u0001\u0004\u0004÷\u000büù\u000býø\u0006ÿû\u0005\u0004\u0001ö\fùû\b\u0000ø\u0005\bü÷\u0005\u0001\u0000ú\u0006\u0003÷\b\u0000ø\núü\nûû\nüú\fþö\u0001\u0004\u0005ö\b\u0004ô\u0007ÿú\u0001\u0007üü\u0001\u0007ýû\u0001\u0007þú\u0001\u0007ÿù\u0005\u0004÷\u0005\u0001\u0001ù\u0001\u0007\u0000ø\u0005\u0003ø\u0001\u0007\u0001÷\u0001\u0007\u0002ö\u0001\u0007\u0003õ\u0001\u0007þú\u0005\u0004÷\u0001\u0007\u0001÷\u0005\u0004÷\u0001\u0007\u0001÷\u0001\u0007\u0004ô\u0001\u0007\u0005ó\u0001\u0007\u0004ô\u0005\u0001ú\u0001\bûü\u0001\u0007\u0004ô\u0001\büû\u0001\býú\u0001\u0006\u0006÷\u0015ëÍGÿõ\u0003Â\u001b+ñ\rï\u0013û\u0003ë\u000b\tðê\u0017\u0005\u0006â\u000b\u000b\tð\u0004û\tüû\u0007ÿú\u0005\u0003ø\u0001\u0005ú\u0001\u0006ù\u0005\u0004üû\u0006\u0004ö\u0005\u0004ýú\tÿø\u0005\u0001\u0006ô\u0005\u0003ø\u0005\u0004þù\u0007ýü\fþö\u0001\u0007ø\u0007\u0000ù\u0001\b÷\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0001\u0004ÿü\u0005\u0004ÿø\u0006ÿû\u0005\u0004\u0000÷\u0006\u0001ù\u0006\u0002ø\u0005ÿü\bþú\u0007\u0005ô\u0006ÿû\u0005\u0004\u0001ö\fùû\b\u0000ø\býû\u0005\u0004\u0002õ\u0006\u0001ù\u0006\u0004ö\b\u0000ø\u0005ÿ\u0000ü\b\u0002ö\u0007ÿú\u0001\u0004\u0000û\b\u0004ô\u0007ÿú\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u000bô\u0001\nõ\u0005\u0004÷\u0001\u0004\u0004÷\u0001\u0006ù\u0005\u0004\u0003ô\u0006\u0005õ\nþø\rúù\u0005ÿ\u0000ü\u0007ýü\fþö\u0001\u0007ø\u0007\u0000ù\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\fó\u0001\u0004\u0003ø\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0005\u0001ú\u0001\u0005ÿû\u0001\u0004\bó\tûü\u0001\u0005\u0000ú\u0001\u0004\bó\u0005\u0000\u0003ø\u0001\u0005\u0001\u0005ÿß!þ÷\u0005ù\nÒ(\u0003\u0004\u0005þ\u000fÙ\u0018\u000e\u0000î\u0006þ÷\u0015ëÍ>õ\rùÇ 'øõ\u0003\rÔ)\u0003ûô\u0013Ñ3ë\u0002\u000b\u0004õ\u0006ÿ\rö\u000eýúûÊFñ\u0013üº&\u0011\u0013üá\u001fõ\u0003\u0007÷\u0015ëÍ>õ\rùÇ$#ù\u0006õ\u0004øà3ë\u0002\u000b\u0004õ\u0006ÿþ\u000fß!þ÷\u0005ù÷\u0015ëÍ>õ\rùÇ\u001b#\u0000ù\u0002ú\u000bÕ1õ\u000eøø\t\u0006Ñ3ë\u0002\u000b\u0004õ\u0006ÿ\u0004û\u0005\u0001ú\t÷\u0001\u0005ú\u0001\u0006ù\u0007þ\u0007ô\tûü\u0001\u0007ø\u0005\u0001\u0001ù\u0001\b÷\u0005\u0003ø\u0001\tö\u0001\nõ\u0007þ\bó\u0006\u0004ö\u0006\u0000ú\u0007\u0005ô\u000bþ÷\u0005\u0007úú\býû\u0005\u0002\u0004õ\u0007ýü\fþö\u0001\u000bô\u0007\u0000ù\u0001\fó\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\nõ\u0007ÿþü\f\u0001ó\u0006\u0000ú\u0006\u0000ú\u0005\u0003ø\r÷ü\u0007ÿÿû\u0006\u0000ú\u0006\u0001ù\býû\u0006\u0005\u0001ô\r÷ü\u0005\u0006þ÷\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\u000bô\b\u0004ô\u0007ÿú\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0007ÿ\u0000ú\u0001\u0004\u0006õ\u0007ÿ\u0001ù\u0006þ\u0006ö\u0005ÿü\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0005\u0001ú\t÷\u0001\u0005ú\u0001\u0006ù\u0006\u0003üû\u0007ÿ\u0002ø\tûü\u0001\u0007ø\u0001\tö\u0001\nõ\u0007ÿ\u0003÷\u0006\u0000ú\u000b\u0002ó\u0005\u0001\u0007ó\u0005\u0002ýü\fþö\u0001\u000bô\b\u0004ô\u0007ÿú\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0005\u0001ù\fÿõ\u0005\u0003ø\u0001\u0005\u0002ø\u0007ÿ\u0001ù\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0006\u0004\u0000ö\u0001\u0005\u0005õ\u0001\nõ\u0007ÿ\u0004ö\u0006\u0004ö\u0006ÿû\u0006\u0004ö\u0005ÿ\u0005÷\u0005\u0003ø\býû\füø\fý÷\u0006\u0003÷\býû\tÿø\fùû\u0005\b÷ü\t\u0004ó\u0007ýü\fþö\u0001\u000bô\u0007\u0000ù\u0001\u0005\u0006ô\u0001\u0005\u0007ó\u0001\u0006ýü\u0005\u0001ú\u0001\u0006þû\u0001\u0006ÿú\u0001\u0006\u0000ù\u0005\u0001\u0001ù\u0001\b÷\u0005\u0003ø\u0001\u0006\u0001ø\u0005\u0000û\u0001\u0006\u0002÷\u0005\u0000\u0001ú\u0001\u0006\u0003ö\u0007ÿ\u0005õ\u0005\u0003ø\u0001\u0005\u0002ø\u0005\u0001ú\u0001\u0006þû\u0001\u0006ÿú\u0001\u0006\u0000ù\u0001\u0006\u0001ø\u0001\u0006\u0004õ\u0001\u0006ýü\u0007ÿ\u0006ô\u0001\u0006\u0005ô\u0007ÿ\u0006ô\u0001\u0006\u0006ó\u0005\u0001ú\u0001\u0007üü\u0001\u0007ýû\u0001\u0007þú\u0001\u0007ÿù\u0001\u0007\u0000ø\u0005\u0004÷\u0001\u0007\u0001÷\u0001\u0007\u0002ö\u0007ÿ\u0007ó\u0006\u0003÷\u0006\u0000ú\u000b\u0000õ\nþø\b\u0000ø\u0005ÿü\u0006\u0002ýû\u0005\u0003ø\u0006\u0004ö\t\u0000÷\u0006\u0000ú\u000b\u0000õ\u0005\u0003ø\b\u0000ø\u0007\u0000ýü\tÿø\u0006\u0000ú\u000b\u0002ó\u0005\u0003ø\u0005\u0004þù\rûø\u0001\u0007\u0003õ\u0007\u0000ù\u0001\u0007\u0004ô\u0001\u0007\u0005ó\u0001\bûü\u0005ÿ\u0007õ\u0001\u0006\u0003ö\u0001\u0007\u0000ø\u0001\nõ\u0007\u0000þû\u0007ýü\u0006\u0004ö\tÿø\u0006\u0000ú\u000b\u0002ó\u0005\u0005\u0001õ\t\u0004ó\b\u0002ö\u0007ÿú\u0001\u000bô\u0007\u0000ù\u0001\büû\u0001\býú\u0001\u0005þü\u0005ÿü\u0001\u0006\u0002÷\u0001\u0005\u0001ù\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0005\u0002ø\u0001\bþù\u0007\u0000ÿú\u0006\u0004\u0000ö\tûü\u0001\bÿø\u0001\b\u0000÷\tüû\u0005\u0002þû\u0001\b\u0001ö\u0001\b\u0002õ\u0005\u0001ú\u0005\u0000û\u0001\b\u0003ô\t÷\u0001\u0005ú\b\u0004ô\u0001\b\u0004ó\u0001\u0007\u0002ö\u0006\u0002\u0002ö\u0006\u0004ö\u0005\u0004ýú\tÿø\u0006ÿû\tÿø\u000bÿö\u0005\u0007þö\tÿø\u0006\u0000ú\u0007\u0000\u0000ù\føü\u0006ÿû\býû\t\u0001ö\fûù\u0006\u0004ö\u0006ÿ\u0006õ\u0007\u0005ô\u0006ÿ\u0003ø\u0007þû\u0007ÿú\u0001\u0007\u0003õ\b\u0004ô\u0007ÿú\u0001\túü\u0001\tûû\u0001\u0006\u0004õ\u0001\u0007\u0000ø\u0007\u0000\u0001ø\u0001\u0006\u0006ó\u0001\tüú\u0001\týù\u0001\u0007\u0000ø\u0001\tþø\u0005\u0003\u0003õ\u0001\u0006\u0005ñ\u001e÷\u0015ëÍ>õ\rùÇ!\u0013\bûþ\u0011Ç\u0004û\u0005ÿü\u0001\u0005ú\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0006ù\u0005\u0004÷\u0005\u0001\u0001ù\u0006\u0000\u0005õ\u0001\u0007ø\u0001\b÷\u0005ÿü\u0001\tö\u0005\u0000û\u0001\tö\t÷\u0007\u0003ûû\u0001\nõ\u0007\u0003üú\u0007\u0003ýù\u0005\u0003ø\u0001\u000bô\u0001\fó\u0007\u0003þø\u0007ýü\u000býø\u0006ÿû\u0005\u0002\u0006ó\u000b\u0000õ\røû\u0006\u0000ú\u0007\u0000\u0000ù\u0005\u0003ø\t\u0004ó\u0005ÿü\u0006ÿ\u0005ö\fùû\u0006\u0004ö\býû\u0005ÿü\bþú\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\u0004ÿü\b\u0004ô\u0007ÿú\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0007\u0003ÿ÷\u0001\nõ\u0001\u000bô\u0001\b÷\u0005\u0000û\u0001\u0005ú\u0001\u0004\u0003ø\u0007\u0002÷\u0006\u0003÷\u0006\u0004ö\u0006ÿû\tÿø\u0005\u0005úü\u0005\u0003ø\u000b\u0001ô\u0006\u0000ú\u0006\u0002ø\u0006\u0001ù\u0006\u0003÷\u0006þ\u0003ù\nþø\u0005ÿü\bþú\u0006\u0004ö\u0006ÿ\u0005ö\býû\u000b\u0000õ\u0005\u0003ø\u0006\u0004ö\u0006\u0005\u0002ó\rûø\u0001\u0004\u0004÷\b\u0004ô\u0007ÿú\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\b÷\u0005\u0004÷\u0001\u0007ø\u0001\u0005þü\u0001\b\u0004û\u0005û\u0001\u0005ú\t÷\u0001\u0006ù\t÷\nö\u0001\u0007ø\u0001\b÷\u0001\tö\u0001\nõ\u0001\tö\u0005ÿü\u0001\u000bô\u0005\u0000û\u0001\u000bô\u0001\fó\u0005\u0001ú\nö\u0001\u0004ÿü\u0001\u0004\u0000û\u0005\u0002ù\u0005\u0003ø\u0001\u0004\u0001ú\u0001\tö\u0005\u0004÷\u0001\u0004\u0002ù\u0001\fó\u0005\u0001ú\nö\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0005\u0001ú\u0001\u0004\u0003ø\u0001\u0004\u0004÷\t÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0005\u0005ö\u0005\u0006õ\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0005\bó\u0006þü\u0005\u0003ø\u0006ÿû\u0006\u0000ú\u0006\u0001ù\u0006\u0002ø\u0006\u0003÷\u0006\u0004ö\u0006\u0005õ\u0005\u0003ø\u0006\u0006ô\u0005ÿü\u0006\u0007ó\u0007ýü\u0007þû\u0007ÿú\u0001\u0005ÿû\u0007\u0000ù\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0001\u0005\u0002ø\u0005\u0001ú\u0001\u0004\u0003ø\u0001\u0004\u0004÷\t÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0007\u0002÷\u0001\u0005ú\u0001\u0005\u0003÷\u0007\u0003ö\u0006\u0004ö\u0006ÿû\u0007\u0004õ\u0007\u0005ô\u0006ÿû\u0007\u0006ó\büü\býû\u0005ÿü\bþú\bÿù\b\u0000ø\u0005ÿü\bþú\u0006\u0001ù\u0006\u0004ö\b\u0001÷\b\u0002ö\u0007ÿú\u0001\u0005\u0004ö\u0007\u0000ù\u0001\u0005\u0005õ\u0001\u0005\u0006ô\u0001\u0005\u0007ó\u0001\tö\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\u0006ý\u0004û\u0001\u0005ú\u0005\u0000û\u0001\u0006ù\u0001\u0007ø\u0005\u0001ú\u0001\b÷\u0001\tö\tûü\u0001\nõ\u0001\tö\u0001\u000bô\u0005\u0000\u0003ø\u0001\fó\u0001\tö\u0005\u0000\u0004÷\u0005\u0003ø\u0001\u0004ÿü\u0005ÿü\u0001\u0006ù\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0004\u0000û\u0005\u0000\u0005ö\u0001\u0004\u0001ú\u0005\u0004÷\u0001\u0004\u0002ù\u0001\u0005ú\u0001\u0004\u0003ø\u0005\u0000\u0006õ\u0006\u0004ö\u0007ýü\u000býø\t\u0000÷\fùû\u0005\u0000\u0007ô\u0005\u0003ø\u0006\u0003÷\u0006\u0000ú\u000b\u0000õ\nþø\rúù\u0005\u0000\bó\u0005\u0001þü\u0005\u0001ÿû\u0005\u0001\u0000ú\t\u0004ó\u0007ýü\fþö\u0001\u0004\u0004÷\b\u0004ô\u0007ÿú\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\bó\n\u0000ö\u0005ÿ\u0000ü\rûø\u0001\u0005þü\b\u0004ô\u0007ÿú\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0005\u0000\u0003ø\u0001\fó\u0001\tö\u0001\u0004ÿü\u0001\u0005ú\u0001\u0005ú\u0001\u0005\u0002ø\u0005\u0001ú\u0001\b÷\u0001\tö\tûü\u0001\nõ\u0001\tö\u0005\u0001\u0001ù\u0001\u0005\u0003÷\u0005\u0003ø\u0001\u000bô\u0005\u0001\u0002ø\u0001\u0004\u0001\u0004û\u000bûú\u0001\u0005ú\u0001\u0006ù\u0005\býö\u000bþ÷\u0005\u0007úú\r÷ü\u0005\bþõ\u0006\u0000ú\u0006\u0001ù\býû\b\u0000ø\u0006\u0003÷\u0005\bÿô\u0005\b\u0000ó\u0005ÿ\u0006ö\u0007þû\u0007ÿú\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\b÷\u0001\tö\u0001\nõ\u0001\u0006ù\u0006þ\u0000ü\u0006ÿû\t\u0000÷\u0006\u0000ú\u000b\u0000õ\u0006þ\u0001û\u000b\u0000õ\u0005\u0006ÿö\u0005\u0007úú\fúú\u0005\u0006ûú\u0007ÿú\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\u000bô\u0001\fó\u0001\u0004ÿü\u0005\u0000û\u0001\u0004\u0000û\u0005\u0004÷\u0001\u0004\u0001ú\u0005\u0001\u0002ø\u0001\u0004\u0002ù\u0001\u0006ù\u0006þ\u0002ú\u0006ÿû\u0006\u0004ö\fùû\u0006\u0003÷\u0006þ\u0003ù\nþø\rúù\u0005ÿ\u0006ö\fþö\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0005\u0004÷\u0001\u0004\u0001ú\u0006þ\u0004ø\u0001\u0004\u0002ù\u0005ÿü\u0001\u0004\u0006õ\u0001\u0004\u0007ô\u0001\u0004\u0007ô\u0001\u0004\bó\u0005\u0000\u0003ø\u0001\u0005þü\u0005ÿü\u0001\u0005ÿû\u0001\u0005\u0000ú\u0001\u0005\u0001ù\u0005\u0000\u0003ø\u0006þ\u0006ö\u0001\u0005\u0002ø\u0005\u0000û\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\u0005\u0005õ\u0005ÿü\u0001\u0005\u0006ô\u0001\u0005\u0007ó\u0001\u0006ýü\u0006þ\u0007õ\u0001\u0005ú\u0006þ\bô\u0001\u0006þû\u0005ÿü\u0001\u0004\u0000û\u0006þ\tó\u0001\u0006ÿú\u0001\u0004\u0007ô\u0001\u0006\u0000ù\u0006ÿÿü\u0001\u0006\u0001ø\u0001\u0004\u0007ô\t÷\u0001\u0006\u0002÷\u0006ÿ\u0000û\u0001\u0006\u0003ö\u0001\u0006\u0004õ\u0006ÿ\u0001ú\u0001\u0006\u0005ô\u0005\u0003ø\u0001\u0006\u0006ó\u0001\u0007üü\u0005\u0001ú\u0001\u0007ýû\u0006ÿ\u0002ù\u0001\u0007þú\u0001\u0007ÿù\u0001\u0007\u0000ø\u0001\u0007\u0001÷\u0001\u0006ù\u0005\u0000\u0001ú\u0006ÿû\b\u0000ø\u0005ÿü\fý÷\u0006ÿ\u0003ø\fþö\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\u0007\u0002ö\u0001\u0007\u0003õ\u0001\u0007\u0004ô\u0001\u0007\u0005ó\u0001\u0004ÿü\u0006ÿ\u0004÷\u0001\u0006ÿú\u0001\bûü\u0001\u0007üü\u0006ÿ\u0001ú\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\büû\u0001\býú\u0001\bþù\u0001\bÿø\u0001\b\u0000÷\u0007\u0002÷\u0001\b\u0001ö\u0005\u0000\u0000û\u0001\b\u0002õ\u0001\b\u0003ô\u0005\u0000û\u0001\u0005\u0006ô\u0005\u0004÷\u0005\u0001\u0001ù\u0001\b\u0004ó\u0005\u0003ø\u0001\u0004\u0001ú\u0001\túü\u0005û\u0006\u0004ö\u0006ÿ\u0005ö\u0006ÿû\u0006\u0000ú\u000b\u0000õ\nþø\u0006ÿ\u0006õ\u000b\u0000õ\u0005\u0003ø\u0006ÿ\u0007ô\u0006þü\u0005\u0003ø\b\u0000ø\u0005\u0006ûú\u0007ÿú\u0001\tûû\u0007\u0000ù\u0001\tüú\u0001\týù\u0001\tþø\u0001\u0004\u0007ô\u0005\u0004÷\u0001\u0004\u0001ú\u0001\tÿ÷\u0001\túü\u0006ÿ\bó\tÿø\u0006ÿû\u0005\u0007\u0001ó\u000b\u0000õ\u0005\u0003ø\u0005\b÷ü\u000b\u0002ó\u0005\u0003ø\u0006\u0004ö\u0006ÿû\u0006\u0000ú\u0006\u0000þü\u0005\u0002\u0004õ\u0005ÿü\u0006\u0004ö\u0006\u0000ÿû\u000b\u0000õ\u0005\u0006þ÷\u0005\u0006ûú\u0007ÿú\u0001\tûû\b\u0004ô\u0007ÿú\u0001\t\u0000ö\u0001\t\u0001õ\u0001\u0007\u0005ó\u0001\t\u0002ô\tüû\u0005\u0002þû\u0001\t\u0003ó\u0001\u0006ù\u0005\u0000\u0006õ\u0006\u0004ö\u0006ÿû\u0006\u0006ô\u000b\u0000õ\føü\u0005ÿ\u0005÷\u0005\u0003ø\u0006\u0002ø\bÿù\u0006\u0005õ\u0005\u0003ø\u0006\u0004ö\r\u0000ó\u0006\u0007ó\rûø\u0001\u0007ø\u0007\u0000ù\u0001\nùü\u0001\núû\u0001\t\u0002ô\u0001\büû\u0001\býú\u0001\nûú\u0001\nüù\u0001\nýø\u0006\u0000\u0000ú\u0001\nþ÷\u0001\túü\u0006\u0000\u0001ù\u0006\u0004ö\u0006ÿû\u0006\u0004ö\u0006ÿû\u0007\u0006ó\u0006\u0000ú\u0006\u0000\u0002ø\føü\u0005ÿ\u0005÷\nþø\b\u0000ø\u0006\u0000\u0003÷\u0005\u0001ÿû\u0005\u0001\u0000ú\t\u0004ó\u0007ýü\u0007þû\u0007ÿú\u0001\tûû\b\u0004ô\u0007ÿú\u0001\nÿö\u0001\n\u0000õ\u0001\n\u0001ô\u0001\u0004\u0005ö\t÷\u0001\n\u0002ó\u0005\u0000\u0003ø\u0001\u000bøü\u0001\u000bùû\u0006\u0000\u0004ö\u0001\u0006\u0001ø\u0001\u0004\u0007ô\u0005\u0004÷\u0005\u0001\u0001ù\u0006\u0000\u0005õ\u0001\u0004\u0001ú\u0005\u0000û\u0001\u0004\u0006õ\t÷\u0001\n\u0002ó\u0006\u0000\u0006ô\u0001\u000búú\u0001\u000bûù\nö\u0001\u000büø\u0001\u000bý÷\u0001\u000bþö\u0005\u0000\u0003ø\u0005\u0000û\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0001\büû\u0001\býú\u0001\u000bÿõ\u0001\u000b\u0000ô\u0001\u000b\u0001ó\u0006\u0000\u0007ó\u0001\b\u0001ö\b\u0004ô\u0006\u0001ýü\u0001\f÷ü\u0005ÿ\u0002ú\u0001\føû\u0005\u0004÷\u0005\u0001\u0001ù\u0001\b\u0004ó\u0005\u0003ø\u0001\u0004\u0001ú\u0001\fùú\u0006\u0001þû\u0001\u0006þû\u0001\u0006ù\u0005\bùú\u0006ÿû\u0005ÿ\u0005÷\u0006\u0001ÿú\núü\u0005\u0003ø\u0006ÿû\u0007\u0006ó\býû\u000b\u0000õ\u0005\u0003ø\u000b\u0002ó\tÿø\u0006\u0000ú\u0006\u0001\u0000ù\u0007ýü\u0007þû\u0007ÿú\u0001\u0007ø\b\u0004ô\u0007ÿú\u0001\fúù\u0001\fûø\u0001\fü÷\u0001\fýö\u0001\fþõ\u0001\büû\u0001\býú\u0006\u0001\u0001ø\n\u0001õ\u0006\u0001\u0002÷\u0001\fÿô\u0001\f\u0000ó\u0001\u0004ÿ\u0000ü\u0005\bøû\u0001\nþ÷\u0006\u0001\u0003ö\u0001\føû\u0006\u0001\u0004õ\u0001\b\u0002\u0004û\u0001\u0005ú\u0001\u0006ù\u0001\u0007ø\u0001\b÷\u0005\u0000\u0005ö\u0006ÿû\u0006\u0005õ\u0005\bþõ\u0007\u0006ó\u0006\u0000ú\nþø\u0005\u0002\u0004õ\b\u0002ö\u0007ÿú\u0001\tö\u0007\u0000ù\u0001\nõ\u0001\u000bô\u0001\u0005ú\u0001\fó\u0001\u0004ÿü\u0001\u0004\u0000û\u0005\u0004÷\u0001\u0004\u0001ú\b\u0004ô\u0007\u0000ù\u0005\u0003ø\u0001\u0004\u0002ù\u0001\u0004\u0003ø\n\u0000ö\u0005ÿ\u0000ü\rûø\u0001\u0004\u0004÷\u0007\u0000ù\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0001\u0006ù\u0001\u0007ø\u0005\u0001ú\u0001\u0004\u0007ô\u0001\u0004\bó\t÷\u0001\u0005þü\t÷\u0005\u0001ú\u0001\u0005ÿû\u0001\u0005\u0000\u0004û\fÿõ\u0005\u0003ø\u0001\u0005ú\u0001\u0006ù\u0001\u0007ø\u0001\b÷\u0005\u0004÷\u0001\tö\u0001\nõ\u0001\u000bô\u0006\u0003\u0003ô\u0006\u0004ö\u0006ÿû\u0006\u0004ö\u0005\u0005üú\u0006\u0004ö\u0006\u0005\u0002ó\u0007ýü\u0007þû\u0007ÿú\u0001\fó\u0007\u0000ù\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0001ú\t÷\u0001\u0004\u0002ù\t÷\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0001\u0004\u0006õ\u0006\u0006ùû\u0005\u0004ýú\tÿø\u0006\u0004ûû\u0006ÿ\u0005ö\füø\u0006\u0002ýû\u0005\u0003ø\u0006\u0006úú\u0005ÿü\u0006ÿ\u0005ö\u0005\u0005üú\u0006\u0006ûù\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\u0004\u0007ô\u0007\u0000ù\u0001\u0004\bó\u0001\u0005þü\u0001\nõ\u0001\u0004\u0005÷\u0015ëÍ>õ\rùÇ!\u0013\bûþ\u0011\u000f\u0000õ\tö\u0004û\u0001\u0005ú\u0005\u0004÷\u0001\u0006ù\fÿõ\u0005\u0003ø\u0001\u0007ø\u0001\b÷\u0005\u0004\u0003ô\u0005\u0005\u0003ó\u0006\u0001ù\u0005\u0006ùü\bþú\u000b\u0000õ\u0005\u0003ø\u0005\u0006úû\býû\u000b\u0000õ\røû\u0005\u0002\u0001ø\u0006\u0004ö\u0006þü\u0005\u0003ø\b\u0000ø\u0005\u0006ûú\u0007ÿú\u0001\tö\b\u0004ô\u0007ÿú\u0001\nõ\u0001\u000bô\u0001\fó\t÷\u0001\u0004ÿü\t÷\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\fó\u0001\u0005\u0004û\u0001\u0005ú\u0001\u0006ù\u0001\u0007ø\u0006\u0001\u0005ô\u0006\u0000ú\u0006\u0001ù\býû\u0005ÿü\bþú\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\b÷\b\u0004ô\u0007ÿú\u0001\tö\u0001\nõ\u0001\u000bô\u0001\fó\u0001\u0007ø\u0005\u0004\u0004ó\u0006\u0001\u0006ó\u000b\u0000õ\nþø\füø\fý÷\u0006\u0000ú\u0006\u0004ö\u0006\u0002üü\u0006\u0002ýû\nûû\t\u0004ó\rûø\u0001\b÷\b\u0004ô\u0007ÿú\u0001\u0004ÿü\u0001\u0004\u0000û\u0001\u0004\u0001ú\u0001\u0007ø\u0005\u0000\u0001ú\u0006ÿû\u0006ÿû\u0006\u0000ú\u0006\u0001ù\u0005\u0006ùü\fý÷\u0006ÿû\tÿø\u0006\u0000ú\býû\u0006\u0001ù\u000b\u0002ó\tÿø\u0005\u0002\u0001ø\u0006ÿ\u0005ö\u0006ÿ\u0006õ\u0006\u0001ù\u0006\u0004ö\b\u0001÷\u0007ýü\fþö\u0001\b÷\b\u0004ô\u0007ÿú\u0001\u0004\u0002ù\u0001\u0004\u0003ø\u0001\u0004\u0004÷\u0001\u0004\u0005ö\u0006\u0002þú\u0005\u0006\u0002ó\fùû\u0005\u0006ùü\fý÷\u0006\u0004ö\u0006ÿû\u0005\u0002\u0006ó\u0006\u0001ù\u0005\u0007øü\u0006\u0002ÿù\u0007ýü\u0007\u0006ó\u0005\u0002\u0002÷\u0005ÿü\u0005\u0003\u0002ö\u0007ÿú\u0001\u0004\u0006õ\u0007\u0000ù\u0001\u0004\u0007ô\u0001\u0004\bó\u0001\u0005þü\u0001\u0005ÿû\u0006\u0002\u0000ø\u0001\u0005\u0000ú\u0005\u0001ú\u0001\u0005\u0001ù\u0001\u0005\u0002ø\u0001\u0005\u0003÷\u0001\u0005\u0004ö\u0005\u0001ú\u0001\u0005\u0005õ\u0001\u0005\u0006ô\u0001\u0005\u0007ó\u0001\u0006ýü\u0001\u0006þû\b\u0004ô\b\u0004ô\u0007ÿú\u0005\u0003ø\u0001\u0006ÿú\u0001\u0004\u0005ö\u0006\u0002\u0001÷\u0005\u0006\u0002ó\u0006\u0000ú\u000b\u0000õ\u0005\u0003ø\u0006\u0002ø\rúù\u0006\u0001ù\u0006\u0004ö\u0006ÿû\u0005\u0007\u0001ó\u000b\u0000õ\u0006þ\u0001û\nüú\fþö\u0001\u0004\u0006õ\u0007\u0000ù\u0001\u0006\u0000ù\u0001\u0006\u0001ø\u0001\u0006ù\u0005\u0000û\u0001\u0006\u0002÷\u0001\u0006\u0003ö\týú\u0001\u0006\u0004õ\t÷\u0005\u0000û\u0001\u0006\u0005ô\u0001\u0006\u0006ó\u0001\u0007üü\u0005\u0001ú\u0001\u0007ýû\u0001\u0007þú\u0001\u0007ø\u0006\u0002\u0002ö\u0006\u0004ö\u0006ÿ\u0005ö\býû\u000b\u0000õ\u0005\b\u0000ó\u0005ÿ\u0000ü\rûø\u0001\b÷\b\u0004ô\u0007ÿú\u0001\u0007ÿù\u0001\u0007\u0000ø\u0001\u0007\u0001÷\u0005\u0001ú\u0001\u0005\u0000ú\u0001\u0007\u0002ö\u0001\u0007\u0003õ\u0005\u0001ú\u0001\u0007\u0004ô\u0006\u0002\u0003õ\u0006\u0001ýü\u0001\u0006ÿú\u0006\u0002\u0004ô\u0001\u0007\u0005ó\u0005\u0004÷\u0005\u0001\u0001ù\u0006\u0000\u0005õ\u0001\bûü\b\u0004ô\u0006\u0001ýü\u0001\u0006ÿú\u0001\büû\u0006\u0002\u0005ó\u0001\u0007\u0005ó\t÷\u0001\býú\u0005\u0001ú\u0001\u0005\u0000ú\u0001\bþù\t÷\u0001\bÿø\u0001\fó\u0001\u000bô\u0005\u0000û\u0001\b\u0000÷\u0001\b\u0001ö\u0001\b\u0002õ\u0005\u0004÷\u0001\bûü\u0001\b\u0003ô\u0005ÿü\u0001\b\u0000÷\tûü\u0001\b\u0004ó\u0001\túü\u0001\u0004\u0001ú\t÷\u0005\u0000û\u0001\u0006\u0005ô\u0001\u0006\u0006ó\u0001\u0007üü\u0005\u0001ú\u0001\u0007ýû\u0001\u0007þú\t÷\u0001\býú\u0005\u0001ú\u0001\u0005\u0001ù\u0001\tûû\u0005\u0001ú\u0001\u0005\u0000ú\u0001\tüú\u0006\u0002\u0002ö\u0001\u0006\u0004õ\u0001\fó\u0006\u0003ûü\u0001\týù\u0005\u0001ú\u0001\u0005\u0001ù\u0001\tþø\u0006þ\u0006ö\u0006\u0003üû\u0001\tÿ÷\u0001\t\u0000ö\u0001\t\u0001õ\u0001\t\u0002ô\u0006\u0003þù\u0001\týù\u0001\fó\tüû\u0007ÿú\u0005\u0003ø\u0001\t\u0003ó\u0001\nùü\u0001\u0005þü\u0005\u0000û\u0001\núû\u0001\u0007ø\u0006\u0003ÿø\u0007\u0006ó\u0005\u0005üú\u000b\u0001ô\u0006\u0000ú\býû\u0005\u0003üü\u0005\u0003ø\r\u0000ó\bþú\u0006\u0000\u0003÷\u0005\u0002\u0002÷\u0005ÿü\nüú\fþö\u0001\b÷\u0007\u0000ù\u0001\nûú\u0001\nüù\u0001\b\u0003ô\u0005\u0001ú\u0001\u0005\u0000ú\u0005\u0001ú\u0001\nýø\u0001\nþ÷\u0001\u0004\u0005ö\u0006\u0003\u0000÷\u000býø\u0006\u0000ú\u0005\u0001ÿû\u0005\u0004þù\rûø\u0001\u0004\u0006õ\u0007\u0000ù\u0001\nÿö\u0001\n\u0000õ\u0001\b\u0002õ\n\u0001õ\u0001\n\u0001ô\u0001\u0006\u0006ó\u0001\n\u0002ó\u0001\u000bøü\u0001\u000bùû\u0005\u0001ú\u0001\u0005\u0000ú\u0001\u0007\u0002ö\u0001\u0007\u0003õ\u0005\u0001ú\u0006\u0003\u0001ö\n\u0002ô\u0005\u0003ø\u0001\u0007\u0004ô\u0006þ\u0007õ\u0001\n\u0001ô\u0001\u0004\u0005ö\rþõ\u0006\u0004ö\u0005\u0003\u0000ø\u0005ÿü\bþú\u0007\u0005ô\u0006\u0000ÿû\u0007\u0006ó\u000b\u0000õ\u0006þ\u0001û\u0006\u0004ö\u0006\u0003\u0002õ\núü\u0005\u0003ø\u0006\u0000ú\t\u0004ó\rûø\u0001\u0004\u0006õ\b\u0004ô\u0007ÿú\u0001\u000búú\u0001\u000bûù\u0001\u000büø\u0001\u0007ø\u0006\u0003\u0003ô\u0005ÿ\u0000ü\u0007ýü\u0007þû\u0007ÿú\u0001\b÷\u0007\u0000ù\u0001\u000bý÷\u0001\u000bþö\u0001\büû\u0005\u0004÷\u0001\bûü\u0005ÿü\u0001\núû\u0001\u0007ø\u0006\u0003\u0004ó\u0006\u0004ö\tÿø\u0006\u0000ÿû\tÿø\u0006\u0000ú\u0006\u0001ù\b\u0000ø\u0005\bü÷\u0006\u0004úü\u0006\u0004ûû\t\u0004ó\u0005ÿü\t\u0004ó\u0005\u0002ýü\fþö\u0001\b÷\u0007\u0000ù\u0001\u000bÿõ\u0001\u000b\u0000ô\u0001\u000b\u0001".getBytes("ISO-8859-1"), 0, bArr, 0, 15566);
        getMin = bArr;
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:143:?, code lost:
        r1.getMax(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:145:0x03d2, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x0408, code lost:
        r0 = r15;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:173:0x0460, code lost:
        if (r15 <= 30) goto L_0x0462;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:194:0x04da, code lost:
        if (r15 <= 88) goto L_0x0462;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:225:0x058c, code lost:
        if (r15 <= 98) goto L_0x0464;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0156, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:?, code lost:
        r1.getMax(r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x01f2, code lost:
        r0 = th;
     */
    /* JADX WARNING: Removed duplicated region for block: B:136:0x03c0 A[Catch:{ all -> 0x03b5, all -> 0x0401 }] */
    /* JADX WARNING: Removed duplicated region for block: B:137:0x03c1 A[Catch:{ all -> 0x03b5, all -> 0x0401 }] */
    /* JADX WARNING: Removed duplicated region for block: B:163:0x042d A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:172:0x045e  */
    /* JADX WARNING: Removed duplicated region for block: B:176:0x046a  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void getMax(id.dana.domain.model.rpc.response.LoginResponse r23, boolean r24) {
        /*
            r22 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r22
            r0 = r23
            r3 = r24
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0, (int) r3)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            int r3 = length
            r3 = r3 | 514(0x202, float:7.2E-43)
            short r3 = (short) r3
            r4 = 9638(0x25a6, float:1.3506E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r4 = (short) r3
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x05aa }
            r6 = 0
            r5[r6] = r3     // Catch:{ all -> 0x05aa }
            byte[] r3 = getMin     // Catch:{ all -> 0x05aa }
            r7 = 8
            byte r3 = r3[r7]     // Catch:{ all -> 0x05aa }
            byte r3 = (byte) r3     // Catch:{ all -> 0x05aa }
            byte[] r8 = getMin     // Catch:{ all -> 0x05aa }
            byte r8 = r8[r4]     // Catch:{ all -> 0x05aa }
            short r8 = (short) r8     // Catch:{ all -> 0x05aa }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x05aa }
            java.lang.String r3 = setMax(r3, r8, r9)     // Catch:{ all -> 0x05aa }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x05aa }
            byte[] r8 = getMin     // Catch:{ all -> 0x05aa }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x05aa }
            byte r8 = (byte) r8     // Catch:{ all -> 0x05aa }
            byte[] r10 = getMin     // Catch:{ all -> 0x05aa }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x05aa }
            short r10 = (short) r10     // Catch:{ all -> 0x05aa }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x05aa }
            java.lang.String r8 = setMax(r8, r10, r12)     // Catch:{ all -> 0x05aa }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x05aa }
            byte[] r12 = getMin     // Catch:{ all -> 0x05aa }
            byte r12 = r12[r7]     // Catch:{ all -> 0x05aa }
            byte r12 = (byte) r12     // Catch:{ all -> 0x05aa }
            byte[] r13 = getMin     // Catch:{ all -> 0x05aa }
            byte r13 = r13[r4]     // Catch:{ all -> 0x05aa }
            short r13 = (short) r13     // Catch:{ all -> 0x05aa }
            java.lang.String r12 = setMax(r12, r13, r9)     // Catch:{ all -> 0x05aa }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x05aa }
            r10[r6] = r12     // Catch:{ all -> 0x05aa }
            java.lang.reflect.Method r3 = r3.getMethod(r8, r10)     // Catch:{ all -> 0x05aa }
            java.lang.Object r0 = r3.invoke(r0, r5)     // Catch:{ all -> 0x05aa }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x05aa }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r5 = 0
        L_0x0083:
            int r8 = r0.length
            if (r5 >= r8) goto L_0x0125
            r8 = r0[r5]
            java.lang.Object[] r10 = new java.lang.Object[r4]     // Catch:{ all -> 0x011c }
            r10[r6] = r8     // Catch:{ all -> 0x011c }
            byte[] r8 = getMin     // Catch:{ all -> 0x011c }
            byte r8 = r8[r7]     // Catch:{ all -> 0x011c }
            byte r8 = (byte) r8     // Catch:{ all -> 0x011c }
            byte[] r12 = getMin     // Catch:{ all -> 0x011c }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x011c }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x011c }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x011c }
            java.lang.String r8 = setMax(r8, r12, r13)     // Catch:{ all -> 0x011c }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x011c }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x011c }
            byte[] r14 = getMin     // Catch:{ all -> 0x011c }
            r15 = 32
            byte r14 = r14[r15]     // Catch:{ all -> 0x011c }
            short r14 = (short) r14     // Catch:{ all -> 0x011c }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x011c }
            java.lang.String r12 = setMax(r12, r14, r15)     // Catch:{ all -> 0x011c }
            java.lang.Class[] r14 = new java.lang.Class[r4]     // Catch:{ all -> 0x011c }
            byte[] r15 = getMin     // Catch:{ all -> 0x011c }
            byte r15 = r15[r7]     // Catch:{ all -> 0x011c }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011c }
            byte[] r16 = getMin     // Catch:{ all -> 0x011c }
            byte r11 = r16[r4]     // Catch:{ all -> 0x011c }
            short r11 = (short) r11     // Catch:{ all -> 0x011c }
            java.lang.String r11 = setMax(r15, r11, r9)     // Catch:{ all -> 0x011c }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x011c }
            r14[r6] = r11     // Catch:{ all -> 0x011c }
            java.lang.reflect.Method r8 = r8.getMethod(r12, r14)     // Catch:{ all -> 0x011c }
            r11 = 0
            java.lang.Object r8 = r8.invoke(r11, r10)     // Catch:{ all -> 0x011c }
            byte[] r10 = getMin     // Catch:{ all -> 0x0113 }
            byte r10 = r10[r7]     // Catch:{ all -> 0x0113 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0113 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0113 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r14]     // Catch:{ all -> 0x0113 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0113 }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x0113 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0113 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0113 }
            byte r12 = r12[r7]     // Catch:{ all -> 0x0113 }
            int r12 = r12 - r4
            byte r12 = (byte) r12     // Catch:{ all -> 0x0113 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0113 }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x0113 }
            short r13 = (short) r13     // Catch:{ all -> 0x0113 }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0113 }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x0113 }
            java.lang.reflect.Method r10 = r10.getMethod(r12, r11)     // Catch:{ all -> 0x0113 }
            java.lang.Object r8 = r10.invoke(r8, r11)     // Catch:{ all -> 0x0113 }
            java.lang.Integer r8 = (java.lang.Integer) r8     // Catch:{ all -> 0x0113 }
            int r8 = r8.intValue()     // Catch:{ all -> 0x0113 }
            r3[r5] = r8
            int r5 = r5 + 1
            r11 = 30
            goto L_0x0083
        L_0x0113:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011b
            throw r1
        L_0x011b:
            throw r0
        L_0x011c:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0124
            throw r1
        L_0x0124:
            throw r0
        L_0x0125:
            r12 = 7
            r14 = 2
            r0 = 0
        L_0x0128:
            int r15 = r0 + 1
            r10 = 61
            r0 = r3[r0]     // Catch:{ all -> 0x040c }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x040c }
            r5 = 9
            r8 = 47
            r11 = 18
            r6 = 34
            r13 = 3
            switch(r0) {
                case -52: goto L_0x0404;
                case -51: goto L_0x03ea;
                case -50: goto L_0x03d4;
                case -49: goto L_0x03c6;
                case -48: goto L_0x034e;
                case -47: goto L_0x034a;
                case -46: goto L_0x032b;
                case -45: goto L_0x032a;
                case -44: goto L_0x0318;
                case -43: goto L_0x0306;
                case -42: goto L_0x0302;
                case -41: goto L_0x02fe;
                case -40: goto L_0x02f3;
                case -39: goto L_0x02ef;
                case -38: goto L_0x02eb;
                case -37: goto L_0x02e0;
                case -36: goto L_0x02dc;
                case -35: goto L_0x02ba;
                case -34: goto L_0x02a2;
                case -33: goto L_0x029e;
                case -32: goto L_0x029a;
                case -31: goto L_0x028f;
                case -30: goto L_0x0274;
                case -29: goto L_0x0260;
                case -28: goto L_0x025c;
                case -27: goto L_0x0248;
                case -26: goto L_0x01f5;
                case -25: goto L_0x01e8;
                case -24: goto L_0x01e2;
                case -23: goto L_0x01dc;
                case -22: goto L_0x01d8;
                case -21: goto L_0x01d5;
                case -20: goto L_0x01ca;
                case -19: goto L_0x01c6;
                case -18: goto L_0x01c2;
                case -17: goto L_0x01b7;
                case -16: goto L_0x01aa;
                case -15: goto L_0x01a5;
                case -14: goto L_0x019d;
                case -13: goto L_0x018c;
                case -12: goto L_0x0188;
                case -11: goto L_0x0185;
                case -10: goto L_0x017a;
                case -9: goto L_0x0176;
                case -8: goto L_0x0172;
                case -7: goto L_0x0167;
                case -6: goto L_0x015a;
                case -5: goto L_0x0152;
                case -4: goto L_0x014e;
                case -3: goto L_0x014a;
                case -2: goto L_0x0146;
                case -1: goto L_0x0143;
                default: goto L_0x013e;
            }     // Catch:{ all -> 0x040c }
        L_0x013e:
            r5 = 4
            r18 = 0
            goto L_0x0408
        L_0x0143:
            r0 = 4
            goto L_0x0409
        L_0x0146:
            r0 = 162(0xa2, float:2.27E-43)
            goto L_0x0409
        L_0x014a:
            r0 = 151(0x97, float:2.12E-43)
            goto L_0x0409
        L_0x014e:
            r0 = 62
            goto L_0x0409
        L_0x0152:
            int r0 = invoke     // Catch:{ all -> 0x040c }
            r1.setMax = r0     // Catch:{ all -> 0x040c }
        L_0x0156:
            r1.getMax(r11)     // Catch:{ all -> 0x040c }
            goto L_0x013e
        L_0x015a:
            r1.setMax = r4     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r12)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            invokeSuspend = r0     // Catch:{ all -> 0x040c }
            goto L_0x013e
        L_0x0167:
            r1.getMax(r8)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 != 0) goto L_0x0408
            r0 = 29
            goto L_0x0409
        L_0x0172:
            r0 = 98
            goto L_0x0409
        L_0x0176:
            r0 = 157(0x9d, float:2.2E-43)
            goto L_0x0409
        L_0x017a:
            r1.getMax(r8)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 != 0) goto L_0x0408
            r0 = 53
            goto L_0x0409
        L_0x0185:
            r0 = 1
            goto L_0x0409
        L_0x0188:
            r0 = 56
            goto L_0x0409
        L_0x018c:
            r1.getMax(r5)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            r5 = 23
            if (r0 == r5) goto L_0x0199
            r0 = 90
            goto L_0x0409
        L_0x0199:
            r0 = 130(0x82, float:1.82E-43)
            goto L_0x0409
        L_0x019d:
            r1.getMax(r7)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x040c }
            throw r0     // Catch:{ all -> 0x040c }
        L_0x01a5:
            int r0 = invokeSuspend     // Catch:{ all -> 0x040c }
            r1.setMax = r0     // Catch:{ all -> 0x040c }
            goto L_0x0156
        L_0x01aa:
            r1.setMax = r4     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r12)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            invoke = r0     // Catch:{ all -> 0x040c }
            goto L_0x013e
        L_0x01b7:
            r1.getMax(r6)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 != 0) goto L_0x0408
            r0 = 70
            goto L_0x0409
        L_0x01c2:
            r0 = 88
            goto L_0x0409
        L_0x01c6:
            r0 = 99
            goto L_0x0409
        L_0x01ca:
            r1.getMax(r6)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 != 0) goto L_0x0408
            r0 = 87
            goto L_0x0409
        L_0x01d5:
            r0 = 2
            goto L_0x0409
        L_0x01d8:
            r0 = 59
            goto L_0x0409
        L_0x01dc:
            java.lang.String r0 = "DanaLogin"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x040c }
            r5 = 4
            goto L_0x01ed
        L_0x01e2:
            java.lang.String r0 = "[PinLogin] "
            r1.IsOverlapping = r0     // Catch:{ all -> 0x040c }
            r5 = 4
            goto L_0x01ed
        L_0x01e8:
            java.lang.String r0 = "login error: errorCode = "
            r1.IsOverlapping = r0     // Catch:{ all -> 0x040c }
            r5 = 4
        L_0x01ed:
            r1.getMax(r5)     // Catch:{ all -> 0x01f2 }
            goto L_0x013e
        L_0x01f2:
            r0 = move-exception
            goto L_0x040e
        L_0x01f5:
            r1.setMax = r4     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x023f }
            r6 = 0
            r5[r6] = r0     // Catch:{ all -> 0x023f }
            byte[] r0 = getMin     // Catch:{ all -> 0x023f }
            byte r0 = r0[r7]     // Catch:{ all -> 0x023f }
            byte r0 = (byte) r0     // Catch:{ all -> 0x023f }
            byte[] r6 = getMin     // Catch:{ all -> 0x023f }
            r8 = 5903(0x170f, float:8.272E-42)
            byte r6 = r6[r8]     // Catch:{ all -> 0x023f }
            int r6 = -r6
            short r6 = (short) r6     // Catch:{ all -> 0x023f }
            r8 = 5049(0x13b9, float:7.075E-42)
            short r8 = (short) r8     // Catch:{ all -> 0x023f }
            java.lang.String r0 = setMax(r0, r6, r8)     // Catch:{ all -> 0x023f }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x023f }
            java.lang.Class[] r6 = new java.lang.Class[r4]     // Catch:{ all -> 0x023f }
            byte[] r8 = getMin     // Catch:{ all -> 0x023f }
            byte r8 = r8[r7]     // Catch:{ all -> 0x023f }
            byte r8 = (byte) r8     // Catch:{ all -> 0x023f }
            byte[] r11 = getMin     // Catch:{ all -> 0x023f }
            byte r11 = r11[r4]     // Catch:{ all -> 0x023f }
            short r11 = (short) r11     // Catch:{ all -> 0x023f }
            java.lang.String r8 = setMax(r8, r11, r9)     // Catch:{ all -> 0x023f }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x023f }
            r11 = 0
            r6[r11] = r8     // Catch:{ all -> 0x023f }
            java.lang.reflect.Constructor r0 = r0.getDeclaredConstructor(r6)     // Catch:{ all -> 0x023f }
            java.lang.Object r0 = r0.newInstance(r5)     // Catch:{ all -> 0x023f }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x040c }
            r5 = 4
            goto L_0x01ed
        L_0x023f:
            r0 = move-exception
            java.lang.Throwable r5 = r0.getCause()     // Catch:{ all -> 0x040c }
            if (r5 == 0) goto L_0x0247
            throw r5     // Catch:{ all -> 0x040c }
        L_0x0247:
            throw r0     // Catch:{ all -> 0x040c }
        L_0x0248:
            r1.setMax = r4     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            o.initWithSecurityGuard r0 = (o.initWithSecurityGuard) r0     // Catch:{ all -> 0x040c }
            java.lang.String r0 = r0.getErrorCode()     // Catch:{ all -> 0x040c }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x040c }
            r5 = 4
            goto L_0x01ed
        L_0x025c:
            r0 = 117(0x75, float:1.64E-43)
            goto L_0x0409
        L_0x0260:
            r1.setMax = r4     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            o.initWithSecurityGuard r0 = (o.initWithSecurityGuard) r0     // Catch:{ all -> 0x040c }
            boolean r0 = r0.isSuccess()     // Catch:{ all -> 0x040c }
            r1.setMax = r0     // Catch:{ all -> 0x040c }
            goto L_0x0156
        L_0x0274:
            r1.setMax = r14     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x040c }
            r1.getMax(r12)     // Catch:{ all -> 0x040c }
            int r5 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r5 == 0) goto L_0x0289
            r5 = 1
            goto L_0x028a
        L_0x0289:
            r5 = 0
        L_0x028a:
            r0.setMin((boolean) r5)     // Catch:{ all -> 0x040c }
            goto L_0x013e
        L_0x028f:
            r1.getMax(r8)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 != 0) goto L_0x0408
            r0 = 107(0x6b, float:1.5E-43)
            goto L_0x0409
        L_0x029a:
            r0 = 54
            goto L_0x0409
        L_0x029e:
            r0 = 57
            goto L_0x0409
        L_0x02a2:
            r1.setMax = r14     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x040c }
            id.dana.domain.model.rpc.response.LoginResponse r5 = (id.dana.domain.model.rpc.response.LoginResponse) r5     // Catch:{ all -> 0x040c }
            r0.setMin((id.dana.domain.model.rpc.response.LoginResponse) r5)     // Catch:{ all -> 0x040c }
            goto L_0x013e
        L_0x02ba:
            r1.setMax = r13     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x040c }
            id.dana.domain.model.rpc.response.LoginResponse r5 = (id.dana.domain.model.rpc.response.LoginResponse) r5     // Catch:{ all -> 0x040c }
            r1.getMax(r12)     // Catch:{ all -> 0x040c }
            int r6 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r6 == 0) goto L_0x02d6
            r6 = 1
            goto L_0x02d7
        L_0x02d6:
            r6 = 0
        L_0x02d7:
            r0.getMin((id.dana.domain.model.rpc.response.LoginResponse) r5, (boolean) r6)     // Catch:{ all -> 0x040c }
            goto L_0x013e
        L_0x02dc:
            r0 = 71
            goto L_0x0409
        L_0x02e0:
            r1.getMax(r6)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 != 0) goto L_0x0408
            r0 = 129(0x81, float:1.81E-43)
            goto L_0x0409
        L_0x02eb:
            r0 = 172(0xac, float:2.41E-43)
            goto L_0x0409
        L_0x02ef:
            r0 = 164(0xa4, float:2.3E-43)
            goto L_0x0409
        L_0x02f3:
            r1.getMax(r6)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 != 0) goto L_0x0408
            r0 = 150(0x96, float:2.1E-43)
            goto L_0x0409
        L_0x02fe:
            r0 = 159(0x9f, float:2.23E-43)
            goto L_0x0409
        L_0x0302:
            r0 = 108(0x6c, float:1.51E-43)
            goto L_0x0409
        L_0x0306:
            r1.getMax(r5)     // Catch:{ all -> 0x040c }
            int r0 = r1.setMin     // Catch:{ all -> 0x040c }
            if (r0 == 0) goto L_0x0314
            if (r0 == r4) goto L_0x0310
            goto L_0x0314
        L_0x0310:
            r0 = 152(0x98, float:2.13E-43)
            goto L_0x0409
        L_0x0314:
            r0 = 160(0xa0, float:2.24E-43)
            goto L_0x0409
        L_0x0318:
            r1.setMax = r4     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            int r0 = super.hashCode()     // Catch:{ all -> 0x040c }
            r1.setMax = r0     // Catch:{ all -> 0x040c }
            goto L_0x0156
        L_0x032a:
            return
        L_0x032b:
            r1.setMax = r13     // Catch:{ all -> 0x040c }
            r1.getMax(r14)     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x040c }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x040c }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ all -> 0x040c }
            r1.getMax(r13)     // Catch:{ all -> 0x040c }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x040c }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x040c }
            o.updateActionSheetContent.exception(r0, r5, r6)     // Catch:{ all -> 0x040c }
            goto L_0x013e
        L_0x034a:
            r0 = 30
            goto L_0x0409
        L_0x034e:
            r1.setMax = r14     // Catch:{ all -> 0x03c2 }
            r1.getMax(r14)     // Catch:{ all -> 0x03c2 }
            r1.getMax(r13)     // Catch:{ all -> 0x03c2 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x03c2 }
            r1.getMax(r13)     // Catch:{ all -> 0x03c2 }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x03c2 }
            java.lang.Object[] r6 = new java.lang.Object[r4]     // Catch:{ all -> 0x03b7 }
            r8 = 0
            r6[r8] = r5     // Catch:{ all -> 0x03b7 }
            byte[] r5 = getMin     // Catch:{ all -> 0x03b7 }
            byte r5 = r5[r7]     // Catch:{ all -> 0x03b7 }
            byte r5 = (byte) r5     // Catch:{ all -> 0x03b7 }
            byte[] r8 = getMin     // Catch:{ all -> 0x03b7 }
            r11 = 5903(0x170f, float:8.272E-42)
            byte r8 = r8[r11]     // Catch:{ all -> 0x03b7 }
            int r8 = -r8
            short r8 = (short) r8     // Catch:{ all -> 0x03b7 }
            r11 = 5049(0x13b9, float:7.075E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x03b7 }
            java.lang.String r5 = setMax(r5, r8, r11)     // Catch:{ all -> 0x03b7 }
            java.lang.Class r5 = java.lang.Class.forName(r5)     // Catch:{ all -> 0x03b7 }
            byte[] r8 = getMin     // Catch:{ all -> 0x03b7 }
            r11 = 6214(0x1846, float:8.708E-42)
            byte r8 = r8[r11]     // Catch:{ all -> 0x03b7 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x03b7 }
            byte[] r11 = getMin     // Catch:{ all -> 0x03b7 }
            r13 = 76
            byte r11 = r11[r13]     // Catch:{ all -> 0x03b7 }
            short r11 = (short) r11     // Catch:{ all -> 0x03b7 }
            int r13 = length     // Catch:{ all -> 0x03b7 }
            r13 = r13 | 14083(0x3703, float:1.9734E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x03b7 }
            java.lang.String r8 = setMax(r8, r11, r13)     // Catch:{ all -> 0x03b7 }
            java.lang.Class[] r11 = new java.lang.Class[r4]     // Catch:{ all -> 0x03b7 }
            byte[] r13 = getMin     // Catch:{ all -> 0x03b7 }
            byte r13 = r13[r7]     // Catch:{ all -> 0x03b7 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x03b7 }
            byte[] r20 = getMin     // Catch:{ all -> 0x03b7 }
            byte r10 = r20[r4]     // Catch:{ all -> 0x03b7 }
            short r10 = (short) r10     // Catch:{ all -> 0x03b7 }
            java.lang.String r10 = setMax(r13, r10, r9)     // Catch:{ all -> 0x03b7 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x03b7 }
            r18 = 0
            r11[r18] = r10     // Catch:{ all -> 0x03b5 }
            java.lang.reflect.Method r5 = r5.getMethod(r8, r11)     // Catch:{ all -> 0x03b5 }
            java.lang.Object r0 = r5.invoke(r0, r6)     // Catch:{ all -> 0x03b5 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0401 }
            r5 = 4
            goto L_0x03cd
        L_0x03b5:
            r0 = move-exception
            goto L_0x03ba
        L_0x03b7:
            r0 = move-exception
            r18 = 0
        L_0x03ba:
            java.lang.Throwable r5 = r0.getCause()     // Catch:{ all -> 0x0401 }
            if (r5 == 0) goto L_0x03c1
            throw r5     // Catch:{ all -> 0x0401 }
        L_0x03c1:
            throw r0     // Catch:{ all -> 0x0401 }
        L_0x03c2:
            r0 = move-exception
            r18 = 0
            goto L_0x0402
        L_0x03c6:
            r18 = 0
            java.lang.String r0 = ", errorMessage = "
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0401 }
            r5 = 4
        L_0x03cd:
            r1.getMax(r5)     // Catch:{ all -> 0x03d2 }
            r5 = 4
            goto L_0x0408
        L_0x03d2:
            r0 = move-exception
            goto L_0x0410
        L_0x03d4:
            r18 = 0
            r1.setMax = r4     // Catch:{ all -> 0x0401 }
            r1.getMax(r14)     // Catch:{ all -> 0x0401 }
            r1.getMax(r13)     // Catch:{ all -> 0x0401 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0401 }
            o.initWithSecurityGuard r0 = (o.initWithSecurityGuard) r0     // Catch:{ all -> 0x0401 }
            java.lang.String r0 = r0.getErrorMessage()     // Catch:{ all -> 0x0401 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0401 }
            r5 = 4
            goto L_0x03cd
        L_0x03ea:
            r18 = 0
            r1.setMax = r4     // Catch:{ all -> 0x0401 }
            r1.getMax(r14)     // Catch:{ all -> 0x0401 }
            r1.getMax(r13)     // Catch:{ all -> 0x0401 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0401 }
            java.lang.String r0 = r0.toString()     // Catch:{ all -> 0x0401 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0401 }
            r5 = 4
            r1.getMax(r5)     // Catch:{ all -> 0x03d2 }
            goto L_0x0408
        L_0x0401:
            r0 = move-exception
        L_0x0402:
            r5 = 4
            goto L_0x0410
        L_0x0404:
            r18 = 0
            r0 = 7
            goto L_0x0409
        L_0x0408:
            r0 = r15
        L_0x0409:
            r6 = 0
            goto L_0x0128
        L_0x040c:
            r0 = move-exception
            r5 = 4
        L_0x040e:
            r18 = 0
        L_0x0410:
            byte[] r6 = getMin
            byte r8 = r6[r7]
            byte r8 = (byte) r8
            r10 = 13
            byte r6 = r6[r10]
            short r6 = (short) r6
            int r11 = length
            r11 = r11 | 7588(0x1da4, float:1.0633E-41)
            short r11 = (short) r11
            java.lang.String r6 = setMax(r8, r6, r11)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x043f
            if (r15 < r12) goto L_0x043f
            r6 = 30
            if (r15 > r6) goto L_0x043f
            r6 = 116(0x74, float:1.63E-43)
            r4 = 98
            r5 = 157(0x9d, float:2.2E-43)
            r6 = 30
        L_0x043b:
            r21 = 116(0x74, float:1.63E-43)
            goto L_0x059d
        L_0x043f:
            byte[] r6 = getMin
            byte r8 = r6[r7]
            byte r8 = (byte) r8
            r11 = 4868(0x1304, float:6.822E-42)
            byte r6 = r6[r11]
            short r6 = (short) r6
            r13 = 10554(0x293a, float:1.479E-41)
            short r13 = (short) r13
            java.lang.String r6 = setMax(r8, r6, r13)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x046a
            r6 = 24
            if (r15 < r6) goto L_0x046a
            r6 = 30
            if (r15 > r6) goto L_0x046c
        L_0x0462:
            r4 = 98
        L_0x0464:
            r5 = 157(0x9d, float:2.2E-43)
            r21 = 61
            goto L_0x059d
        L_0x046a:
            r6 = 30
        L_0x046c:
            byte[] r8 = getMin
            byte r4 = r8[r7]
            byte r4 = (byte) r4
            r19 = 1156(0x484, float:1.62E-42)
            byte r8 = r8[r19]
            int r8 = -r8
            short r8 = (short) r8
            r5 = 5857(0x16e1, float:8.207E-42)
            short r5 = (short) r5
            java.lang.String r4 = setMax(r4, r8, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0491
            r4 = 62
            if (r15 < r4) goto L_0x0491
            r4 = 71
            if (r15 > r4) goto L_0x0491
            goto L_0x0462
        L_0x0491:
            byte[] r4 = getMin
            byte r8 = r4[r7]
            byte r8 = (byte) r8
            r20 = 1156(0x484, float:1.62E-42)
            byte r4 = r4[r20]
            int r4 = -r4
            short r4 = (short) r4
            java.lang.String r4 = setMax(r8, r4, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x04b9
            r4 = 66
            if (r15 < r4) goto L_0x04b9
            r4 = 71
            if (r15 > r4) goto L_0x04b9
            r4 = 116(0x74, float:1.63E-43)
            r4 = 98
            r5 = 157(0x9d, float:2.2E-43)
            goto L_0x043b
        L_0x04b9:
            byte[] r4 = getMin
            byte r5 = r4[r7]
            byte r5 = (byte) r5
            r8 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r8]
            short r4 = (short) r4
            r8 = 10605(0x296d, float:1.4861E-41)
            short r8 = (short) r8
            java.lang.String r4 = setMax(r5, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x04dd
            r4 = 71
            r5 = 88
            if (r15 < r4) goto L_0x04e1
            if (r15 > r5) goto L_0x04e1
            goto L_0x0462
        L_0x04dd:
            r4 = 71
            r5 = 88
        L_0x04e1:
            byte[] r8 = getMin
            byte r4 = r8[r7]
            byte r4 = (byte) r4
            r17 = 4869(0x1305, float:6.823E-42)
            byte r8 = r8[r17]
            short r8 = (short) r8
            r5 = 1139(0x473, float:1.596E-42)
            short r5 = (short) r5
            java.lang.String r4 = setMax(r4, r8, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0506
            r4 = 82
            if (r15 < r4) goto L_0x0506
            r4 = 83
            if (r15 > r4) goto L_0x0506
            goto L_0x0462
        L_0x0506:
            byte[] r4 = getMin
            byte r8 = r4[r7]
            byte r8 = (byte) r8
            byte r4 = r4[r11]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r8, r4, r13)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0526
            r4 = 90
            if (r15 < r4) goto L_0x0526
            r4 = 91
            if (r15 > r4) goto L_0x0526
            goto L_0x0462
        L_0x0526:
            byte[] r4 = getMin
            byte r8 = r4[r7]
            byte r8 = (byte) r8
            r13 = 4869(0x1305, float:6.823E-42)
            byte r4 = r4[r13]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r8, r4, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0548
            r4 = 91
            if (r15 < r4) goto L_0x0548
            r4 = 92
            if (r15 > r4) goto L_0x0548
            goto L_0x0462
        L_0x0548:
            byte[] r4 = getMin
            byte r5 = r4[r7]
            byte r5 = (byte) r5
            r8 = r5 & 227(0xe3, float:3.18E-43)
            short r8 = (short) r8
            byte r4 = r4[r11]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r5, r8, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x056b
            r4 = 93
            if (r15 < r4) goto L_0x056b
            r4 = 98
            if (r15 > r4) goto L_0x056b
        L_0x0569:
            goto L_0x0464
        L_0x056b:
            byte[] r4 = getMin
            byte r5 = r4[r7]
            byte r5 = (byte) r5
            byte r4 = r4[r10]
            short r4 = (short) r4
            int r8 = length
            r8 = r8 | 7588(0x1da4, float:1.0633E-41)
            short r8 = (short) r8
            java.lang.String r4 = setMax(r5, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x058f
            r4 = 96
            if (r15 < r4) goto L_0x058f
            r4 = 98
            if (r15 > r4) goto L_0x0591
            goto L_0x0569
        L_0x058f:
            r4 = 98
        L_0x0591:
            r5 = 153(0x99, float:2.14E-43)
            if (r15 < r5) goto L_0x05a9
            r5 = 157(0x9d, float:2.2E-43)
            if (r15 > r5) goto L_0x05a9
            r8 = 89
            r21 = 89
        L_0x059d:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r21
            r4 = 1
            goto L_0x0409
        L_0x05a9:
            throw r0
        L_0x05aa:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x05b2
            throw r1
        L_0x05b2:
            goto L_0x05b4
        L_0x05b3:
            throw r0
        L_0x05b4:
            goto L_0x05b3
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax(id.dana.domain.model.rpc.response.LoginResponse, boolean):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x0314, code lost:
        if (r10 <= 43) goto L_0x0260;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x0153, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x019b, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x0282, code lost:
        if (r10 <= 35) goto L_0x0284;
     */
    /* JADX WARNING: Removed duplicated region for block: B:108:0x0312  */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x0318  */
    /* JADX WARNING: Removed duplicated region for block: B:115:0x0322  */
    /* JADX WARNING: Removed duplicated region for block: B:116:0x0327  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void getMax(java.lang.String r20, id.dana.data.base.NetworkException r21) {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r0 = r20
            r3 = r21
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0, (java.lang.Object) r3)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = 282(0x11a, float:3.95E-43)
            short r3 = (short) r3
            r4 = 7394(0x1ce2, float:1.0361E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x03c0 }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x03c0 }
            byte[] r3 = getMin     // Catch:{ all -> 0x03c0 }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x03c0 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x03c0 }
            byte[] r9 = getMin     // Catch:{ all -> 0x03c0 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x03c0 }
            short r9 = (short) r9     // Catch:{ all -> 0x03c0 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x03c0 }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x03c0 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x03c0 }
            byte[] r9 = getMin     // Catch:{ all -> 0x03c0 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x03c0 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x03c0 }
            byte[] r11 = getMin     // Catch:{ all -> 0x03c0 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x03c0 }
            short r11 = (short) r11     // Catch:{ all -> 0x03c0 }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x03c0 }
            java.lang.String r9 = setMax(r9, r11, r13)     // Catch:{ all -> 0x03c0 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x03c0 }
            byte[] r13 = getMin     // Catch:{ all -> 0x03c0 }
            byte r13 = r13[r8]     // Catch:{ all -> 0x03c0 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x03c0 }
            byte[] r14 = getMin     // Catch:{ all -> 0x03c0 }
            byte r14 = r14[r5]     // Catch:{ all -> 0x03c0 }
            short r14 = (short) r14     // Catch:{ all -> 0x03c0 }
            java.lang.String r13 = setMax(r13, r14, r10)     // Catch:{ all -> 0x03c0 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x03c0 }
            r11[r7] = r13     // Catch:{ all -> 0x03c0 }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x03c0 }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x03c0 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x03c0 }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x0081:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x0125
            r9 = r0[r6]
            java.lang.Object[] r11 = new java.lang.Object[r5]     // Catch:{ all -> 0x011c }
            r11[r7] = r9     // Catch:{ all -> 0x011c }
            byte[] r9 = getMin     // Catch:{ all -> 0x011c }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011c }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011c }
            byte[] r13 = getMin     // Catch:{ all -> 0x011c }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x011c }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x011c }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x011c }
            java.lang.String r9 = setMax(r9, r13, r14)     // Catch:{ all -> 0x011c }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011c }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x011c }
            byte[] r15 = getMin     // Catch:{ all -> 0x011c }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x011c }
            short r15 = (short) r15     // Catch:{ all -> 0x011c }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x011c }
            java.lang.String r4 = setMax(r13, r15, r4)     // Catch:{ all -> 0x011c }
            java.lang.Class[] r13 = new java.lang.Class[r5]     // Catch:{ all -> 0x011c }
            byte[] r15 = getMin     // Catch:{ all -> 0x011c }
            byte r15 = r15[r8]     // Catch:{ all -> 0x011c }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011c }
            byte[] r16 = getMin     // Catch:{ all -> 0x011c }
            byte r12 = r16[r5]     // Catch:{ all -> 0x011c }
            short r12 = (short) r12     // Catch:{ all -> 0x011c }
            java.lang.String r12 = setMax(r15, r12, r10)     // Catch:{ all -> 0x011c }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x011c }
            r13[r7] = r12     // Catch:{ all -> 0x011c }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r13)     // Catch:{ all -> 0x011c }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r11)     // Catch:{ all -> 0x011c }
            byte[] r11 = getMin     // Catch:{ all -> 0x0113 }
            byte r11 = r11[r8]     // Catch:{ all -> 0x0113 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0113 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0113 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0113 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0113 }
            java.lang.String r11 = setMax(r11, r12, r14)     // Catch:{ all -> 0x0113 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0113 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0113 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x0113 }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x0113 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0113 }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x0113 }
            short r13 = (short) r13     // Catch:{ all -> 0x0113 }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0113 }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x0113 }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x0113 }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x0113 }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x0113 }
            int r4 = r4.intValue()     // Catch:{ all -> 0x0113 }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            r12 = 30
            goto L_0x0081
        L_0x0113:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011b
            throw r1
        L_0x011b:
            throw r0
        L_0x011c:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0124
            throw r1
        L_0x0124:
            throw r0
        L_0x0125:
            r4 = 10
        L_0x0127:
            int r10 = r7 + 1
            r11 = 21
            r12 = 35
            r13 = 7
            r14 = 2
            r0 = r3[r7]     // Catch:{ all -> 0x0222 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0222 }
            r7 = 47
            r15 = 9
            r9 = 4
            r6 = 3
            switch(r0) {
                case -22: goto L_0x020a;
                case -21: goto L_0x0206;
                case -20: goto L_0x0202;
                case -19: goto L_0x01fe;
                case -18: goto L_0x01f1;
                case -17: goto L_0x01ed;
                case -16: goto L_0x01db;
                case -15: goto L_0x01d7;
                case -14: goto L_0x01aa;
                case -13: goto L_0x01a5;
                case -12: goto L_0x01a0;
                case -11: goto L_0x018b;
                case -10: goto L_0x0188;
                case -9: goto L_0x0185;
                case -8: goto L_0x0179;
                case -7: goto L_0x016b;
                case -6: goto L_0x0166;
                case -5: goto L_0x0163;
                case -4: goto L_0x015b;
                case -3: goto L_0x015a;
                case -2: goto L_0x0143;
                case -1: goto L_0x0140;
                default: goto L_0x013e;
            }     // Catch:{ all -> 0x0222 }
        L_0x013e:
            goto L_0x021f
        L_0x0140:
            r7 = 44
            goto L_0x0127
        L_0x0143:
            r1.setMax = r5     // Catch:{ all -> 0x0222 }
            r1.getMax(r14)     // Catch:{ all -> 0x0222 }
            r1.getMax(r6)     // Catch:{ all -> 0x0222 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0222 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x0222 }
            r1.setMax = r0     // Catch:{ all -> 0x0222 }
        L_0x0153:
            r0 = 18
            r1.getMax(r0)     // Catch:{ all -> 0x0222 }
            goto L_0x021f
        L_0x015a:
            return
        L_0x015b:
            r1.getMax(r8)     // Catch:{ all -> 0x0222 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0222 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0222 }
            throw r0     // Catch:{ all -> 0x0222 }
        L_0x0163:
            r7 = 83
            goto L_0x0127
        L_0x0166:
            int r0 = invoke     // Catch:{ all -> 0x0222 }
            r1.setMax = r0     // Catch:{ all -> 0x0222 }
            goto L_0x0153
        L_0x016b:
            r1.setMax = r5     // Catch:{ all -> 0x0222 }
            r1.getMax(r14)     // Catch:{ all -> 0x0222 }
            r1.getMax(r13)     // Catch:{ all -> 0x0222 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0222 }
            invokeSuspend = r0     // Catch:{ all -> 0x0222 }
            goto L_0x021f
        L_0x0179:
            r1.getMax(r7)     // Catch:{ all -> 0x0222 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0222 }
            if (r0 != 0) goto L_0x021f
            r0 = 34
            r7 = 34
            goto L_0x0127
        L_0x0185:
            r7 = 81
            goto L_0x0127
        L_0x0188:
            r7 = 8
            goto L_0x0127
        L_0x018b:
            r1.setMax = r5     // Catch:{ all -> 0x0222 }
            r1.getMax(r14)     // Catch:{ all -> 0x0222 }
            r1.getMax(r6)     // Catch:{ all -> 0x0222 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0222 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0222 }
            android.content.Context r0 = r0.toIntRange     // Catch:{ all -> 0x0222 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0222 }
        L_0x019b:
            r1.getMax(r9)     // Catch:{ all -> 0x0222 }
            goto L_0x021f
        L_0x01a0:
            java.lang.String r0 = "alipayplus.mobilewallet.user.login"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0222 }
            goto L_0x019b
        L_0x01a5:
            java.lang.String r0 = "Login"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0222 }
            goto L_0x019b
        L_0x01aa:
            r0 = 5
            r1.setMax = r0     // Catch:{ all -> 0x0222 }
            r1.getMax(r14)     // Catch:{ all -> 0x0222 }
            r1.getMax(r6)     // Catch:{ all -> 0x0222 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0222 }
            android.content.Context r0 = (android.content.Context) r0     // Catch:{ all -> 0x0222 }
            r1.getMax(r6)     // Catch:{ all -> 0x0222 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0222 }
            java.lang.String r7 = (java.lang.String) r7     // Catch:{ all -> 0x0222 }
            r1.getMax(r6)     // Catch:{ all -> 0x0222 }
            java.lang.Object r9 = r1.isInside     // Catch:{ all -> 0x0222 }
            java.lang.String r9 = (java.lang.String) r9     // Catch:{ all -> 0x0222 }
            r1.getMax(r6)     // Catch:{ all -> 0x0222 }
            java.lang.Object r15 = r1.isInside     // Catch:{ all -> 0x0222 }
            java.lang.String r15 = (java.lang.String) r15     // Catch:{ all -> 0x0222 }
            r1.getMax(r6)     // Catch:{ all -> 0x0222 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x0222 }
            id.dana.data.base.NetworkException r6 = (id.dana.data.base.NetworkException) r6     // Catch:{ all -> 0x0222 }
            o.BlurProcess.length(r0, r7, r9, r15, r6)     // Catch:{ all -> 0x0222 }
            goto L_0x021f
        L_0x01d7:
            r7 = 48
            goto L_0x0127
        L_0x01db:
            r1.getMax(r15)     // Catch:{ all -> 0x0222 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0222 }
            if (r0 == r11) goto L_0x01ea
            r6 = 69
            r0 = 64
            r7 = 64
            goto L_0x0127
        L_0x01ea:
            r7 = 1
            goto L_0x0127
        L_0x01ed:
            r7 = 10
            goto L_0x0127
        L_0x01f1:
            r1.getMax(r7)     // Catch:{ all -> 0x0222 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0222 }
            if (r0 != 0) goto L_0x021f
            r0 = 62
            r7 = 62
            goto L_0x0127
        L_0x01fe:
            r7 = 68
            goto L_0x0127
        L_0x0202:
            r7 = 66
            goto L_0x0127
        L_0x0206:
            r7 = 43
            goto L_0x0127
        L_0x020a:
            r1.getMax(r15)     // Catch:{ all -> 0x0222 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0222 }
            r6 = 24
            if (r0 == r6) goto L_0x0219
            r6 = 90
            r7 = 35
            goto L_0x0127
        L_0x0219:
            r0 = 70
            r7 = 70
            goto L_0x0127
        L_0x021f:
            r7 = r10
            goto L_0x0127
        L_0x0222:
            r0 = move-exception
            r6 = 49
            r7 = 6
            r9 = 63
            if (r10 < r14) goto L_0x023a
            if (r10 > r7) goto L_0x023a
            r7 = 84
            r4 = 43
            r5 = 30
            r7 = 81
            r9 = 84
        L_0x0236:
            r14 = 15
            goto L_0x03b4
        L_0x023a:
            byte[] r14 = getMin
            byte r15 = r14[r8]
            byte r15 = (byte) r15
            r17 = 1156(0x484, float:1.62E-42)
            byte r14 = r14[r17]
            int r14 = -r14
            short r14 = (short) r14
            r5 = 5857(0x16e1, float:8.207E-42)
            short r5 = (short) r5
            java.lang.String r5 = setMax(r15, r14, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0263
            if (r10 < r4) goto L_0x0263
            r5 = 11
            if (r10 > r5) goto L_0x0263
            r4 = 43
            r5 = 30
        L_0x0260:
            r7 = 81
            goto L_0x0236
        L_0x0263:
            byte[] r5 = getMin
            byte r14 = r5[r8]
            byte r14 = (byte) r14
            r15 = 4116(0x1014, float:5.768E-42)
            byte r5 = r5[r15]
            short r5 = (short) r5
            r4 = 4837(0x12e5, float:6.778E-42)
            short r4 = (short) r4
            java.lang.String r5 = setMax(r14, r5, r4)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x028a
            r5 = 30
            if (r10 < r5) goto L_0x028c
            if (r10 > r12) goto L_0x028c
        L_0x0284:
            r4 = 43
            r7 = 81
            r9 = 7
            goto L_0x0236
        L_0x028a:
            r5 = 30
        L_0x028c:
            byte[] r12 = getMin
            byte r14 = r12[r8]
            byte r14 = (byte) r14
            byte r11 = r12[r11]
            short r11 = (short) r11
            r12 = 10638(0x298e, float:1.4907E-41)
            short r12 = (short) r12
            java.lang.String r11 = setMax(r14, r11, r12)
            java.lang.Class r11 = java.lang.Class.forName(r11)
            boolean r11 = r11.isInstance(r0)
            if (r11 == 0) goto L_0x02ae
            r11 = 36
            if (r10 < r11) goto L_0x02ae
            r11 = 43
            if (r10 > r11) goto L_0x02ae
            goto L_0x0284
        L_0x02ae:
            byte[] r11 = getMin
            byte r12 = r11[r8]
            byte r12 = (byte) r12
            r14 = r12 & 227(0xe3, float:3.18E-43)
            short r14 = (short) r14
            r18 = 4868(0x1304, float:6.822E-42)
            byte r11 = r11[r18]
            short r11 = (short) r11
            java.lang.String r11 = setMax(r12, r14, r11)
            java.lang.Class r11 = java.lang.Class.forName(r11)
            boolean r11 = r11.isInstance(r0)
            if (r11 == 0) goto L_0x02d4
            r11 = 37
            if (r10 < r11) goto L_0x02d4
            r11 = 38
            if (r10 > r11) goto L_0x02d4
        L_0x02d1:
            r4 = 43
            goto L_0x0260
        L_0x02d4:
            byte[] r11 = getMin
            byte r12 = r11[r8]
            byte r12 = (byte) r12
            byte r11 = r11[r15]
            short r11 = (short) r11
            java.lang.String r4 = setMax(r12, r11, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x02f3
            r4 = 39
            if (r10 < r4) goto L_0x02f3
            r4 = 40
            if (r10 > r4) goto L_0x02f3
            goto L_0x02d1
        L_0x02f3:
            byte[] r4 = getMin
            byte r11 = r4[r8]
            byte r11 = (byte) r11
            r12 = 4869(0x1305, float:6.823E-42)
            byte r4 = r4[r12]
            short r4 = (short) r4
            r12 = 1139(0x473, float:1.596E-42)
            short r12 = (short) r12
            java.lang.String r4 = setMax(r11, r4, r12)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0318
            r4 = 41
            if (r10 < r4) goto L_0x0318
            r4 = 43
            if (r10 > r4) goto L_0x031a
        L_0x0316:
            goto L_0x0260
        L_0x0318:
            r4 = 43
        L_0x031a:
            r11 = 77
            if (r10 < r11) goto L_0x0327
            r11 = 81
            if (r10 > r11) goto L_0x0327
            r7 = 81
            r9 = 6
            goto L_0x0236
        L_0x0327:
            byte[] r7 = getMin
            byte r11 = r7[r8]
            byte r11 = (byte) r11
            byte r7 = r7[r6]
            short r7 = (short) r7
            r12 = 9600(0x2580, float:1.3452E-41)
            short r12 = (short) r12
            java.lang.String r7 = setMax(r11, r7, r12)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x0349
            r7 = 71
            if (r10 < r7) goto L_0x0349
            r7 = 72
            if (r10 > r7) goto L_0x0349
            goto L_0x0316
        L_0x0349:
            byte[] r7 = getMin
            byte r11 = r7[r8]
            byte r11 = (byte) r11
            byte r12 = r7[r18]
            short r12 = (short) r12
            r14 = 15
            byte r7 = r7[r14]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r11, r12, r7)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x036e
            r7 = 72
            if (r10 < r7) goto L_0x036e
            r7 = 81
            if (r10 > r7) goto L_0x036e
        L_0x036c:
            r9 = 7
            goto L_0x03b4
        L_0x036e:
            byte[] r7 = getMin
            byte r11 = r7[r8]
            byte r11 = (byte) r11
            r12 = 7392(0x1ce0, float:1.0358E-41)
            byte r7 = r7[r12]
            short r7 = (short) r7
            r12 = 10605(0x296d, float:1.4861E-41)
            short r12 = (short) r12
            java.lang.String r7 = setMax(r11, r7, r12)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x0392
            r7 = 74
            if (r10 < r7) goto L_0x0392
            r7 = 81
            if (r10 > r7) goto L_0x0392
            goto L_0x03b4
        L_0x0392:
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            r11 = r9 & 227(0xe3, float:3.18E-43)
            short r11 = (short) r11
            byte r7 = r7[r18]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r9, r11, r7)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x03bf
            r7 = 76
            if (r10 < r7) goto L_0x03bf
            r7 = 81
            if (r10 > r7) goto L_0x03bf
            goto L_0x036c
        L_0x03b4:
            r1.IsOverlapping = r0
            r1.getMax(r6)
            r7 = r9
            r4 = 10
            r5 = 1
            goto L_0x0127
        L_0x03bf:
            throw r0
        L_0x03c0:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x03c8
            throw r1
        L_0x03c8:
            goto L_0x03ca
        L_0x03c9:
            throw r0
        L_0x03ca:
            goto L_0x03c9
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax(java.lang.String, id.dana.data.base.NetworkException):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ void getMax(o.onValidateSchema r17, boolean r18) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r2 = r18
            r1.<init>((java.lang.Object) r0, (int) r2)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r2 = 178(0xb2, float:2.5E-43)
            short r2 = (short) r2
            r3 = 8738(0x2222, float:1.2245E-41)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r3 = (short) r2
            r4 = r3 | 4577(0x11e1, float:6.414E-42)
            short r4 = (short) r4
            java.lang.String r2 = setMax(r2, r3, r4)
            r3 = 1
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ all -> 0x024b }
            r5 = 0
            r4[r5] = r2     // Catch:{ all -> 0x024b }
            byte[] r2 = getMin     // Catch:{ all -> 0x024b }
            r6 = 8
            byte r2 = r2[r6]     // Catch:{ all -> 0x024b }
            byte r2 = (byte) r2     // Catch:{ all -> 0x024b }
            byte[] r7 = getMin     // Catch:{ all -> 0x024b }
            byte r7 = r7[r3]     // Catch:{ all -> 0x024b }
            short r7 = (short) r7     // Catch:{ all -> 0x024b }
            r8 = 9395(0x24b3, float:1.3165E-41)
            short r8 = (short) r8     // Catch:{ all -> 0x024b }
            java.lang.String r2 = setMax(r2, r7, r8)     // Catch:{ all -> 0x024b }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x024b }
            byte[] r7 = getMin     // Catch:{ all -> 0x024b }
            r9 = 2662(0xa66, float:3.73E-42)
            byte r7 = r7[r9]     // Catch:{ all -> 0x024b }
            byte r7 = (byte) r7     // Catch:{ all -> 0x024b }
            byte[] r9 = getMin     // Catch:{ all -> 0x024b }
            r10 = 30
            byte r9 = r9[r10]     // Catch:{ all -> 0x024b }
            short r9 = (short) r9     // Catch:{ all -> 0x024b }
            r10 = 1177(0x499, float:1.65E-42)
            short r10 = (short) r10     // Catch:{ all -> 0x024b }
            java.lang.String r7 = setMax(r7, r9, r10)     // Catch:{ all -> 0x024b }
            java.lang.Class[] r9 = new java.lang.Class[r3]     // Catch:{ all -> 0x024b }
            byte[] r10 = getMin     // Catch:{ all -> 0x024b }
            byte r10 = r10[r6]     // Catch:{ all -> 0x024b }
            byte r10 = (byte) r10     // Catch:{ all -> 0x024b }
            byte[] r11 = getMin     // Catch:{ all -> 0x024b }
            byte r11 = r11[r3]     // Catch:{ all -> 0x024b }
            short r11 = (short) r11     // Catch:{ all -> 0x024b }
            java.lang.String r10 = setMax(r10, r11, r8)     // Catch:{ all -> 0x024b }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x024b }
            r9[r5] = r10     // Catch:{ all -> 0x024b }
            java.lang.reflect.Method r2 = r2.getMethod(r7, r9)     // Catch:{ all -> 0x024b }
            java.lang.Object r0 = r2.invoke(r0, r4)     // Catch:{ all -> 0x024b }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x024b }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r4 = 0
        L_0x007f:
            int r7 = r0.length
            r9 = 32
            if (r4 >= r7) goto L_0x011d
            r7 = r0[r4]
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ all -> 0x0114 }
            r10[r5] = r7     // Catch:{ all -> 0x0114 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0114 }
            byte r7 = r7[r6]     // Catch:{ all -> 0x0114 }
            byte r7 = (byte) r7     // Catch:{ all -> 0x0114 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0114 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x0114 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0114 }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0114 }
            java.lang.String r7 = setMax(r7, r11, r13)     // Catch:{ all -> 0x0114 }
            java.lang.Class r7 = java.lang.Class.forName(r7)     // Catch:{ all -> 0x0114 }
            r11 = 74
            byte r11 = (byte) r11     // Catch:{ all -> 0x0114 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0114 }
            byte r9 = r14[r9]     // Catch:{ all -> 0x0114 }
            short r9 = (short) r9     // Catch:{ all -> 0x0114 }
            r14 = 10257(0x2811, float:1.4373E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0114 }
            java.lang.String r9 = setMax(r11, r9, r14)     // Catch:{ all -> 0x0114 }
            java.lang.Class[] r11 = new java.lang.Class[r3]     // Catch:{ all -> 0x0114 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0114 }
            byte r14 = r14[r6]     // Catch:{ all -> 0x0114 }
            byte r14 = (byte) r14     // Catch:{ all -> 0x0114 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0114 }
            byte r15 = r15[r3]     // Catch:{ all -> 0x0114 }
            short r15 = (short) r15     // Catch:{ all -> 0x0114 }
            java.lang.String r14 = setMax(r14, r15, r8)     // Catch:{ all -> 0x0114 }
            java.lang.Class r14 = java.lang.Class.forName(r14)     // Catch:{ all -> 0x0114 }
            r11[r5] = r14     // Catch:{ all -> 0x0114 }
            java.lang.reflect.Method r7 = r7.getMethod(r9, r11)     // Catch:{ all -> 0x0114 }
            r9 = 0
            java.lang.Object r7 = r7.invoke(r9, r10)     // Catch:{ all -> 0x0114 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010b }
            byte r10 = r10[r6]     // Catch:{ all -> 0x010b }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r12]     // Catch:{ all -> 0x010b }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010b }
            java.lang.String r10 = setMax(r10, r11, r13)     // Catch:{ all -> 0x010b }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r6]     // Catch:{ all -> 0x010b }
            int r11 = r11 - r3
            byte r11 = (byte) r11     // Catch:{ all -> 0x010b }
            byte[] r12 = getMin     // Catch:{ all -> 0x010b }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010b }
            short r12 = (short) r12     // Catch:{ all -> 0x010b }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010b }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010b }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r9)     // Catch:{ all -> 0x010b }
            java.lang.Object r7 = r10.invoke(r7, r9)     // Catch:{ all -> 0x010b }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ all -> 0x010b }
            int r7 = r7.intValue()     // Catch:{ all -> 0x010b }
            r2[r4] = r7
            int r4 = r4 + 1
            goto L_0x007f
        L_0x010b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0113
            throw r1
        L_0x0113:
            throw r0
        L_0x0114:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011c
            throw r1
        L_0x011c:
            throw r0
        L_0x011d:
            r4 = 50
            r7 = 6
            r8 = 35
            r10 = 2
            r0 = 0
        L_0x0124:
            int r11 = r0 + 1
            r12 = 49
            r13 = 3
            r14 = 7
            r0 = r2[r0]     // Catch:{ all -> 0x0199 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0199 }
            r15 = 34
            switch(r0) {
                case -14: goto L_0x0194;
                case -13: goto L_0x0192;
                case -12: goto L_0x018f;
                case -11: goto L_0x0185;
                case -10: goto L_0x0184;
                case -9: goto L_0x0181;
                case -8: goto L_0x017e;
                case -7: goto L_0x0174;
                case -6: goto L_0x0167;
                case -5: goto L_0x015d;
                case -4: goto L_0x015b;
                case -3: goto L_0x0142;
                case -2: goto L_0x013a;
                case -1: goto L_0x0137;
                default: goto L_0x0135;
            }     // Catch:{ all -> 0x0199 }
        L_0x0135:
            goto L_0x0197
        L_0x0137:
            r0 = 50
            goto L_0x0124
        L_0x013a:
            r1.getMax(r6)     // Catch:{ all -> 0x0199 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0199 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0199 }
            throw r0     // Catch:{ all -> 0x0199 }
        L_0x0142:
            r1.setMax = r10     // Catch:{ all -> 0x0199 }
            r1.getMax(r10)     // Catch:{ all -> 0x0199 }
            r1.getMax(r13)     // Catch:{ all -> 0x0199 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0199 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0199 }
            r1.getMax(r14)     // Catch:{ all -> 0x0199 }
            int r15 = r1.setMin     // Catch:{ all -> 0x0199 }
            if (r15 == 0) goto L_0x0157
            r15 = 1
            goto L_0x0158
        L_0x0157:
            r15 = 0
        L_0x0158:
            r0.setMax = r15     // Catch:{ all -> 0x0199 }
            goto L_0x0197
        L_0x015b:
            r0 = 6
            goto L_0x0124
        L_0x015d:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0199 }
            r1.setMax = r0     // Catch:{ all -> 0x0199 }
            r0 = 18
            r1.getMax(r0)     // Catch:{ all -> 0x0199 }
            goto L_0x0197
        L_0x0167:
            r1.setMax = r3     // Catch:{ all -> 0x0199 }
            r1.getMax(r10)     // Catch:{ all -> 0x0199 }
            r1.getMax(r14)     // Catch:{ all -> 0x0199 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0199 }
            invoke = r0     // Catch:{ all -> 0x0199 }
            goto L_0x0197
        L_0x0174:
            r1.getMax(r15)     // Catch:{ all -> 0x0199 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0199 }
            if (r0 != 0) goto L_0x0197
            r0 = 31
            goto L_0x0124
        L_0x017e:
            r0 = 32
            goto L_0x0124
        L_0x0181:
            r0 = 33
            goto L_0x0124
        L_0x0184:
            return
        L_0x0185:
            r1.getMax(r15)     // Catch:{ all -> 0x0199 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0199 }
            if (r0 != 0) goto L_0x0197
            r0 = 49
            goto L_0x0124
        L_0x018f:
            r0 = 53
            goto L_0x0124
        L_0x0192:
            r0 = 2
            goto L_0x0124
        L_0x0194:
            r0 = 35
            goto L_0x0124
        L_0x0197:
            r0 = r11
            goto L_0x0124
        L_0x0199:
            r0 = move-exception
            byte[] r15 = getMin
            byte r3 = r15[r6]
            byte r3 = (byte) r3
            r16 = 21
            byte r15 = r15[r16]
            short r15 = (short) r15
            r5 = 10638(0x298e, float:1.4907E-41)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r15, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x01bd
            if (r11 < r13) goto L_0x01bd
            r3 = 4
            if (r11 > r3) goto L_0x01bd
            r3 = 5
            goto L_0x0240
        L_0x01bd:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r13 = 1156(0x484, float:1.62E-42)
            byte r3 = r3[r13]
            int r3 = -r3
            short r3 = (short) r3
            r13 = 5857(0x16e1, float:8.207E-42)
            short r13 = (short) r13
            java.lang.String r3 = setMax(r5, r3, r13)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x01df
            if (r11 < r7) goto L_0x01df
            if (r11 > r14) goto L_0x01df
        L_0x01dd:
            r3 = 1
            goto L_0x0240
        L_0x01df:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r13 = 4868(0x1304, float:6.822E-42)
            byte r3 = r3[r13]
            short r3 = (short) r3
            r14 = 10554(0x293a, float:1.479E-41)
            short r14 = (short) r14
            java.lang.String r3 = setMax(r5, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0201
            r3 = 26
            if (r11 < r3) goto L_0x0201
            if (r11 > r9) goto L_0x0201
            goto L_0x01dd
        L_0x0201:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r15 = 7392(0x1ce0, float:1.0358E-41)
            byte r3 = r3[r15]
            short r3 = (short) r3
            r15 = 10605(0x296d, float:1.4861E-41)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r5, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0223
            if (r11 < r8) goto L_0x0223
            r3 = 36
            if (r11 > r3) goto L_0x0223
            goto L_0x01dd
        L_0x0223:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            byte r3 = r3[r13]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r5, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x024a
            r3 = 44
            if (r11 < r3) goto L_0x024a
            if (r11 > r4) goto L_0x024a
            goto L_0x01dd
        L_0x0240:
            r1.IsOverlapping = r0
            r1.getMax(r12)
            r0 = r3
            r3 = 1
            r5 = 0
            goto L_0x0124
        L_0x024a:
            throw r0
        L_0x024b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0253
            throw r1
        L_0x0253:
            goto L_0x0255
        L_0x0254:
            throw r0
        L_0x0255:
            goto L_0x0254
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax(o.onValidateSchema, boolean):void");
    }

    /* JADX WARNING: type inference failed for: r0v17, types: [int, boolean] */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:134:0x0338, code lost:
        r0 = com.google.android.exoplayer2.extractor.ts.TsExtractor.TS_STREAM_TYPE_SPLICE_INFO;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:232:0x04f4, code lost:
        if (r9 <= 207) goto L_0x0454;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x014a, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:67:0x01cd, code lost:
        r0 = 82;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x01d1, code lost:
        r0 = 281;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x0207, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Removed duplicated region for block: B:214:0x0485  */
    /* JADX WARNING: Removed duplicated region for block: B:215:0x048a  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final boolean getMax(o.getPagePerfKey r20) {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r0 = r20
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = r0 | 1152(0x480, float:1.614E-42)
            short r4 = (short) r4
            r5 = 6225(0x1851, float:8.723E-42)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r5 = (short) r4
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r4 = setMax(r4, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x05b6 }
            r7 = 0
            r6[r7] = r4     // Catch:{ all -> 0x05b6 }
            byte[] r4 = getMin     // Catch:{ all -> 0x05b6 }
            r8 = 8
            byte r4 = r4[r8]     // Catch:{ all -> 0x05b6 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x05b6 }
            byte[] r9 = getMin     // Catch:{ all -> 0x05b6 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x05b6 }
            short r9 = (short) r9     // Catch:{ all -> 0x05b6 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x05b6 }
            java.lang.String r4 = setMax(r4, r9, r10)     // Catch:{ all -> 0x05b6 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x05b6 }
            byte[] r9 = getMin     // Catch:{ all -> 0x05b6 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x05b6 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x05b6 }
            byte[] r11 = getMin     // Catch:{ all -> 0x05b6 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x05b6 }
            short r11 = (short) r11     // Catch:{ all -> 0x05b6 }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x05b6 }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x05b6 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x05b6 }
            byte[] r12 = getMin     // Catch:{ all -> 0x05b6 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x05b6 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x05b6 }
            byte[] r13 = getMin     // Catch:{ all -> 0x05b6 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x05b6 }
            short r13 = (short) r13     // Catch:{ all -> 0x05b6 }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x05b6 }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x05b6 }
            r11[r7] = r12     // Catch:{ all -> 0x05b6 }
            java.lang.reflect.Method r4 = r4.getMethod(r9, r11)     // Catch:{ all -> 0x05b6 }
            java.lang.Object r0 = r4.invoke(r0, r6)     // Catch:{ all -> 0x05b6 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x05b6 }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r6 = 0
        L_0x007f:
            int r9 = r0.length
            r11 = 0
            if (r6 >= r9) goto L_0x0127
            r9 = r0[r6]
            java.lang.Object[] r12 = new java.lang.Object[r5]     // Catch:{ all -> 0x011e }
            r12[r7] = r9     // Catch:{ all -> 0x011e }
            byte[] r9 = getMin     // Catch:{ all -> 0x011e }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011e }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011e }
            byte[] r13 = getMin     // Catch:{ all -> 0x011e }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x011e }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x011e }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x011e }
            java.lang.String r9 = setMax(r9, r13, r14)     // Catch:{ all -> 0x011e }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011e }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x011e }
            byte[] r15 = getMin     // Catch:{ all -> 0x011e }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x011e }
            short r15 = (short) r15     // Catch:{ all -> 0x011e }
            r3 = 10257(0x2811, float:1.4373E-41)
            short r3 = (short) r3     // Catch:{ all -> 0x011e }
            java.lang.String r3 = setMax(r13, r15, r3)     // Catch:{ all -> 0x011e }
            java.lang.Class[] r13 = new java.lang.Class[r5]     // Catch:{ all -> 0x011e }
            byte[] r15 = getMin     // Catch:{ all -> 0x011e }
            byte r15 = r15[r8]     // Catch:{ all -> 0x011e }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011e }
            byte[] r16 = getMin     // Catch:{ all -> 0x011e }
            byte r8 = r16[r5]     // Catch:{ all -> 0x011e }
            short r8 = (short) r8     // Catch:{ all -> 0x011e }
            java.lang.String r8 = setMax(r15, r8, r10)     // Catch:{ all -> 0x011e }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x011e }
            r13[r7] = r8     // Catch:{ all -> 0x011e }
            java.lang.reflect.Method r3 = r9.getMethod(r3, r13)     // Catch:{ all -> 0x011e }
            java.lang.Object r3 = r3.invoke(r11, r12)     // Catch:{ all -> 0x011e }
            byte[] r8 = getMin     // Catch:{ all -> 0x0115 }
            r9 = 8
            byte r8 = r8[r9]     // Catch:{ all -> 0x0115 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0115 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0115 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r9 = r9[r12]     // Catch:{ all -> 0x0115 }
            int r9 = -r9
            short r9 = (short) r9     // Catch:{ all -> 0x0115 }
            java.lang.String r8 = setMax(r8, r9, r14)     // Catch:{ all -> 0x0115 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0115 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0115 }
            r12 = 8
            byte r9 = r9[r12]     // Catch:{ all -> 0x0115 }
            int r9 = r9 - r5
            byte r9 = (byte) r9     // Catch:{ all -> 0x0115 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0115 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0115 }
            short r12 = (short) r12     // Catch:{ all -> 0x0115 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0115 }
            java.lang.String r9 = setMax(r9, r12, r13)     // Catch:{ all -> 0x0115 }
            java.lang.reflect.Method r8 = r8.getMethod(r9, r11)     // Catch:{ all -> 0x0115 }
            java.lang.Object r3 = r8.invoke(r3, r11)     // Catch:{ all -> 0x0115 }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x0115 }
            int r3 = r3.intValue()     // Catch:{ all -> 0x0115 }
            r4[r6] = r3
            int r6 = r6 + 1
            r3 = 46
            r8 = 8
            goto L_0x007f
        L_0x0115:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011d
            throw r1
        L_0x011d:
            throw r0
        L_0x011e:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0126
            throw r1
        L_0x0126:
            throw r0
        L_0x0127:
            r8 = 2
            r0 = 0
        L_0x0129:
            int r9 = r0 + 1
            r0 = r4[r0]     // Catch:{ all -> 0x041a }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x041a }
            r14 = 4
            r15 = 18
            r10 = 3
            r12 = 268(0x10c, float:3.76E-43)
            r3 = 9
            r13 = 34
            switch(r0) {
                case -84: goto L_0x0413;
                case -83: goto L_0x0406;
                case -82: goto L_0x0402;
                case -81: goto L_0x03fe;
                case -80: goto L_0x03f1;
                case -79: goto L_0x03ed;
                case -78: goto L_0x03e2;
                case -77: goto L_0x03de;
                case -76: goto L_0x03da;
                case -75: goto L_0x03cf;
                case -74: goto L_0x03cb;
                case -73: goto L_0x03c7;
                case -72: goto L_0x03c3;
                case -71: goto L_0x03bf;
                case -70: goto L_0x03bb;
                case -69: goto L_0x03ae;
                case -68: goto L_0x039f;
                case -67: goto L_0x039b;
                case -66: goto L_0x0397;
                case -65: goto L_0x038c;
                case -64: goto L_0x0388;
                case -63: goto L_0x037b;
                case -62: goto L_0x036c;
                case -61: goto L_0x0366;
                case -60: goto L_0x0362;
                case -59: goto L_0x035e;
                case -58: goto L_0x035b;
                case -57: goto L_0x0350;
                case -56: goto L_0x034d;
                case -55: goto L_0x0340;
                case -54: goto L_0x032e;
                case -53: goto L_0x032a;
                case -52: goto L_0x0318;
                case -51: goto L_0x0310;
                case -50: goto L_0x0306;
                case -49: goto L_0x0302;
                case -48: goto L_0x02fe;
                case -47: goto L_0x02f3;
                case -46: goto L_0x02ef;
                case -45: goto L_0x02eb;
                case -44: goto L_0x02e7;
                case -43: goto L_0x02e3;
                case -42: goto L_0x02df;
                case -41: goto L_0x02d4;
                case -40: goto L_0x02d0;
                case -39: goto L_0x02cc;
                case -38: goto L_0x02c8;
                case -37: goto L_0x02bd;
                case -36: goto L_0x0247;
                case -35: goto L_0x023a;
                case -34: goto L_0x0236;
                case -33: goto L_0x0232;
                case -32: goto L_0x022e;
                case -31: goto L_0x022a;
                case -30: goto L_0x021f;
                case -29: goto L_0x021b;
                case -28: goto L_0x0217;
                case -27: goto L_0x020c;
                case -26: goto L_0x01f7;
                case -25: goto L_0x01ef;
                case -24: goto L_0x01d9;
                case -23: goto L_0x01d5;
                case -22: goto L_0x01c2;
                case -21: goto L_0x01be;
                case -20: goto L_0x01af;
                case -19: goto L_0x019d;
                case -18: goto L_0x019a;
                case -17: goto L_0x0197;
                case -16: goto L_0x018d;
                case -15: goto L_0x018a;
                case -14: goto L_0x0187;
                case -13: goto L_0x0184;
                case -12: goto L_0x0181;
                case -11: goto L_0x017e;
                case -10: goto L_0x0174;
                case -9: goto L_0x0171;
                case -8: goto L_0x016e;
                case -7: goto L_0x016b;
                case -6: goto L_0x0168;
                case -5: goto L_0x015e;
                case -4: goto L_0x014f;
                case -3: goto L_0x0146;
                case -2: goto L_0x0143;
                case -1: goto L_0x0140;
                default: goto L_0x013e;
            }     // Catch:{ all -> 0x041a }
        L_0x013e:
            goto L_0x0417
        L_0x0140:
            r0 = 217(0xd9, float:3.04E-43)
            goto L_0x0129
        L_0x0143:
            r0 = 128(0x80, float:1.794E-43)
            goto L_0x0129
        L_0x0146:
            int r0 = invokeSuspend     // Catch:{ all -> 0x041a }
            r1.setMax = r0     // Catch:{ all -> 0x041a }
        L_0x014a:
            r1.getMax(r15)     // Catch:{ all -> 0x041a }
            goto L_0x0417
        L_0x014f:
            r1.setMax = r5     // Catch:{ all -> 0x041a }
            r1.getMax(r8)     // Catch:{ all -> 0x041a }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            invoke = r0     // Catch:{ all -> 0x041a }
            goto L_0x0417
        L_0x015e:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 16
            goto L_0x0129
        L_0x0168:
            r0 = 93
            goto L_0x0129
        L_0x016b:
            r0 = 215(0xd7, float:3.01E-43)
            goto L_0x0129
        L_0x016e:
            r0 = 58
            goto L_0x0129
        L_0x0171:
            r0 = 49
            goto L_0x0129
        L_0x0174:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 34
            goto L_0x0129
        L_0x017e:
            r0 = 149(0x95, float:2.09E-43)
            goto L_0x0129
        L_0x0181:
            r0 = 96
            goto L_0x0129
        L_0x0184:
            r0 = 133(0x85, float:1.86E-43)
            goto L_0x0129
        L_0x0187:
            r0 = 54
            goto L_0x0129
        L_0x018a:
            r0 = 59
            goto L_0x0129
        L_0x018d:
            r1.getMax(r12)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 46
            goto L_0x0129
        L_0x0197:
            r0 = 17
            goto L_0x0129
        L_0x019a:
            r0 = 224(0xe0, float:3.14E-43)
            goto L_0x0129
        L_0x019d:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 == 0) goto L_0x01ab
            if (r0 == r5) goto L_0x01a7
            goto L_0x01ab
        L_0x01a7:
            r0 = 85
            goto L_0x0129
        L_0x01ab:
            r0 = 40
            goto L_0x0129
        L_0x01af:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 == 0) goto L_0x01ba
            r0 = 136(0x88, float:1.9E-43)
            goto L_0x0129
        L_0x01ba:
            r0 = 230(0xe6, float:3.22E-43)
            goto L_0x0129
        L_0x01be:
            r0 = 77
            goto L_0x0129
        L_0x01c2:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            r3 = 25
            if (r0 == r3) goto L_0x01d1
            r3 = 55
        L_0x01cd:
            r0 = 82
            goto L_0x0129
        L_0x01d1:
            r0 = 281(0x119, float:3.94E-43)
            goto L_0x0129
        L_0x01d5:
            r0 = 47
            goto L_0x0129
        L_0x01d9:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            r3 = 8
            if (r0 == r3) goto L_0x01eb
            r3 = 60
            if (r0 == r3) goto L_0x01e7
            goto L_0x01eb
        L_0x01e7:
            r0 = 123(0x7b, float:1.72E-43)
            goto L_0x0129
        L_0x01eb:
            r0 = 121(0x79, float:1.7E-43)
            goto L_0x0129
        L_0x01ef:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 == 0) goto L_0x01cd
            goto L_0x01d1
        L_0x01f7:
            r1.setMax = r5     // Catch:{ all -> 0x041a }
            r1.getMax(r8)     // Catch:{ all -> 0x041a }
            r1.getMax(r10)     // Catch:{ all -> 0x041a }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x041a }
            o.getPagePerfKey r0 = (o.getPagePerfKey) r0     // Catch:{ all -> 0x041a }
            o.activityGetScreenOrientation r0 = r0.setMax     // Catch:{ all -> 0x041a }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x041a }
        L_0x0207:
            r1.getMax(r14)     // Catch:{ all -> 0x041a }
            goto L_0x0417
        L_0x020c:
            r1.getMax(r12)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 64
            goto L_0x0129
        L_0x0217:
            r0 = 222(0xde, float:3.11E-43)
            goto L_0x0129
        L_0x021b:
            r0 = 155(0x9b, float:2.17E-43)
            goto L_0x0129
        L_0x021f:
            r1.getMax(r12)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 67
            goto L_0x0129
        L_0x022a:
            r0 = 35
            goto L_0x0129
        L_0x022e:
            r0 = 131(0x83, float:1.84E-43)
            goto L_0x0129
        L_0x0232:
            r0 = 300(0x12c, float:4.2E-43)
            goto L_0x0129
        L_0x0236:
            r0 = 65
            goto L_0x0129
        L_0x023a:
            r1.setMax = r5     // Catch:{ all -> 0x041a }
            r1.getMax(r8)     // Catch:{ all -> 0x041a }
            r1.getMax(r10)     // Catch:{ all -> 0x041a }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x041a }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x041a }
            goto L_0x0207
        L_0x0247:
            r1.setMax = r5     // Catch:{ all -> 0x041a }
            r1.getMax(r8)     // Catch:{ all -> 0x041a }
            r1.getMax(r10)     // Catch:{ all -> 0x041a }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x041a }
            java.lang.Object[] r3 = new java.lang.Object[r5]     // Catch:{ all -> 0x02b4 }
            r3[r7] = r0     // Catch:{ all -> 0x02b4 }
            byte[] r0 = getMin     // Catch:{ all -> 0x02b4 }
            r10 = 6214(0x1846, float:8.708E-42)
            byte r0 = r0[r10]     // Catch:{ all -> 0x02b4 }
            byte r0 = (byte) r0     // Catch:{ all -> 0x02b4 }
            byte[] r10 = getMin     // Catch:{ all -> 0x02b4 }
            r12 = 5
            byte r10 = r10[r12]     // Catch:{ all -> 0x02b4 }
            short r10 = (short) r10     // Catch:{ all -> 0x02b4 }
            int r12 = length     // Catch:{ all -> 0x02b4 }
            r12 = r12 | 10496(0x2900, float:1.4708E-41)
            short r12 = (short) r12     // Catch:{ all -> 0x02b4 }
            java.lang.String r0 = setMax(r0, r10, r12)     // Catch:{ all -> 0x02b4 }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x02b4 }
            byte[] r10 = getMin     // Catch:{ all -> 0x02b4 }
            r12 = 8
            byte r10 = r10[r12]     // Catch:{ all -> 0x02b4 }
            int r10 = r10 - r5
            byte r10 = (byte) r10     // Catch:{ all -> 0x02b4 }
            byte[] r12 = getMin     // Catch:{ all -> 0x02b4 }
            r13 = 32
            byte r12 = r12[r13]     // Catch:{ all -> 0x02b4 }
            short r12 = (short) r12     // Catch:{ all -> 0x02b4 }
            r13 = 10539(0x292b, float:1.4768E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x02b4 }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x02b4 }
            java.lang.Class[] r12 = new java.lang.Class[r5]     // Catch:{ all -> 0x02b4 }
            byte[] r13 = getMin     // Catch:{ all -> 0x02b4 }
            r14 = 8
            byte r13 = r13[r14]     // Catch:{ all -> 0x02b4 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x02b4 }
            byte[] r14 = getMin     // Catch:{ all -> 0x02b4 }
            r17 = 5
            byte r14 = r14[r17]     // Catch:{ all -> 0x02b4 }
            short r14 = (short) r14     // Catch:{ all -> 0x02b4 }
            r6 = 4098(0x1002, float:5.743E-42)
            short r6 = (short) r6     // Catch:{ all -> 0x02b4 }
            java.lang.String r6 = setMax(r13, r14, r6)     // Catch:{ all -> 0x02b4 }
            java.lang.Class r6 = java.lang.Class.forName(r6)     // Catch:{ all -> 0x02b4 }
            r12[r7] = r6     // Catch:{ all -> 0x02b4 }
            java.lang.reflect.Method r0 = r0.getMethod(r10, r12)     // Catch:{ all -> 0x02b4 }
            java.lang.Object r0 = r0.invoke(r11, r3)     // Catch:{ all -> 0x02b4 }
            java.lang.Boolean r0 = (java.lang.Boolean) r0     // Catch:{ all -> 0x02b4 }
            boolean r0 = r0.booleanValue()     // Catch:{ all -> 0x02b4 }
            r1.setMax = r0     // Catch:{ all -> 0x041a }
            goto L_0x014a
        L_0x02b4:
            r0 = move-exception
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x041a }
            if (r3 == 0) goto L_0x02bc
            throw r3     // Catch:{ all -> 0x041a }
        L_0x02bc:
            throw r0     // Catch:{ all -> 0x041a }
        L_0x02bd:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 81
            goto L_0x0129
        L_0x02c8:
            r0 = 150(0x96, float:2.1E-43)
            goto L_0x0129
        L_0x02cc:
            r0 = 94
            goto L_0x0129
        L_0x02d0:
            r0 = 232(0xe8, float:3.25E-43)
            goto L_0x0129
        L_0x02d4:
            r1.getMax(r12)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 88
            goto L_0x0129
        L_0x02df:
            r0 = 37
            goto L_0x0129
        L_0x02e3:
            r0 = 152(0x98, float:2.13E-43)
            goto L_0x0129
        L_0x02e7:
            r0 = 178(0xb2, float:2.5E-43)
            goto L_0x0129
        L_0x02eb:
            r0 = 204(0xcc, float:2.86E-43)
            goto L_0x0129
        L_0x02ef:
            r0 = 130(0x82, float:1.82E-43)
            goto L_0x0129
        L_0x02f3:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 119(0x77, float:1.67E-43)
            goto L_0x0129
        L_0x02fe:
            r0 = 205(0xcd, float:2.87E-43)
            goto L_0x0129
        L_0x0302:
            r0 = 89
            goto L_0x0129
        L_0x0306:
            r3 = 8
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x041a }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x041a }
            throw r0     // Catch:{ all -> 0x041a }
        L_0x0310:
            r0 = 286(0x11e, float:4.01E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            return r0
        L_0x0318:
            r1.setMax = r5     // Catch:{ all -> 0x041a }
            r1.getMax(r8)     // Catch:{ all -> 0x041a }
            r1.getMax(r10)     // Catch:{ all -> 0x041a }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x041a }
            o.activityGetScreenOrientation r0 = (o.activityGetScreenOrientation) r0     // Catch:{ all -> 0x041a }
            java.lang.String r0 = r0.getMax     // Catch:{ all -> 0x041a }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x041a }
            goto L_0x0207
        L_0x032a:
            r0 = 303(0x12f, float:4.25E-43)
            goto L_0x0129
        L_0x032e:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 == 0) goto L_0x033c
            if (r0 == r5) goto L_0x0338
            goto L_0x033c
        L_0x0338:
            r0 = 134(0x86, float:1.88E-43)
            goto L_0x0129
        L_0x033c:
            r0 = 99
            goto L_0x0129
        L_0x0340:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 == 0) goto L_0x0349
            if (r0 == r5) goto L_0x0338
        L_0x0349:
            r0 = 258(0x102, float:3.62E-43)
            goto L_0x0129
        L_0x034d:
            r0 = 2
            goto L_0x0129
        L_0x0350:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 148(0x94, float:2.07E-43)
            goto L_0x0129
        L_0x035b:
            r0 = 1
            goto L_0x0129
        L_0x035e:
            r0 = 48
            goto L_0x0129
        L_0x0362:
            r0 = 20
            goto L_0x0129
        L_0x0366:
            int r0 = invoke     // Catch:{ all -> 0x041a }
            r1.setMax = r0     // Catch:{ all -> 0x041a }
            goto L_0x014a
        L_0x036c:
            r1.setMax = r5     // Catch:{ all -> 0x041a }
            r1.getMax(r8)     // Catch:{ all -> 0x041a }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            invokeSuspend = r0     // Catch:{ all -> 0x041a }
            goto L_0x0417
        L_0x037b:
            r3 = 47
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 177(0xb1, float:2.48E-43)
            goto L_0x0129
        L_0x0388:
            r0 = 19
            goto L_0x0129
        L_0x038c:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 203(0xcb, float:2.84E-43)
            goto L_0x0129
        L_0x0397:
            r0 = 227(0xe3, float:3.18E-43)
            goto L_0x0129
        L_0x039b:
            r0 = 327(0x147, float:4.58E-43)
            goto L_0x0129
        L_0x039f:
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 == 0) goto L_0x03aa
            r0 = 69
            goto L_0x0129
        L_0x03aa:
            r0 = 73
            goto L_0x0129
        L_0x03ae:
            r3 = 47
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 214(0xd6, float:3.0E-43)
            goto L_0x0129
        L_0x03bb:
            r0 = 55
            goto L_0x0129
        L_0x03bf:
            r0 = 126(0x7e, float:1.77E-43)
            goto L_0x0129
        L_0x03c3:
            r0 = 206(0xce, float:2.89E-43)
            goto L_0x0129
        L_0x03c7:
            r0 = 57
            goto L_0x0129
        L_0x03cb:
            r0 = 159(0x9f, float:2.23E-43)
            goto L_0x0129
        L_0x03cf:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 257(0x101, float:3.6E-43)
            goto L_0x0129
        L_0x03da:
            r0 = 91
            goto L_0x0129
        L_0x03de:
            r0 = 325(0x145, float:4.55E-43)
            goto L_0x0129
        L_0x03e2:
            r1.getMax(r13)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 280(0x118, float:3.92E-43)
            goto L_0x0129
        L_0x03ed:
            r0 = 39
            goto L_0x0129
        L_0x03f1:
            r3 = 47
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 299(0x12b, float:4.19E-43)
            goto L_0x0129
        L_0x03fe:
            r0 = 329(0x149, float:4.61E-43)
            goto L_0x0129
        L_0x0402:
            r0 = 157(0x9d, float:2.2E-43)
            goto L_0x0129
        L_0x0406:
            r3 = 47
            r1.getMax(r3)     // Catch:{ all -> 0x041a }
            int r0 = r1.setMin     // Catch:{ all -> 0x041a }
            if (r0 != 0) goto L_0x0417
            r0 = 324(0x144, float:4.54E-43)
            goto L_0x0129
        L_0x0413:
            r0 = 68
            goto L_0x0129
        L_0x0417:
            r0 = r9
            goto L_0x0129
        L_0x041a:
            r0 = move-exception
            r3 = 41
            r6 = 120(0x78, float:1.68E-43)
            r10 = 154(0x9a, float:2.16E-43)
            if (r9 < r3) goto L_0x042d
            r3 = 47
            if (r9 > r3) goto L_0x042f
            r6 = 226(0xe2, float:3.17E-43)
        L_0x0429:
            r10 = 8
            goto L_0x05ab
        L_0x042d:
            r3 = 47
        L_0x042f:
            byte[] r12 = getMin
            r13 = 8
            byte r14 = r12[r13]
            byte r13 = (byte) r14
            r14 = 21
            byte r12 = r12[r14]
            short r12 = (short) r12
            r15 = 10638(0x298e, float:1.4907E-41)
            short r15 = (short) r15
            java.lang.String r12 = setMax(r13, r12, r15)
            java.lang.Class r12 = java.lang.Class.forName(r12)
            boolean r12 = r12.isInstance(r0)
            if (r12 == 0) goto L_0x0457
            r12 = 77
            if (r9 < r12) goto L_0x0457
            r12 = 82
            if (r9 > r12) goto L_0x0457
        L_0x0454:
            r6 = 154(0x9a, float:2.16E-43)
            goto L_0x0429
        L_0x0457:
            byte[] r12 = getMin
            r13 = 8
            byte r3 = r12[r13]
            byte r3 = (byte) r3
            r13 = r3 & 227(0xe3, float:3.18E-43)
            short r13 = (short) r13
            r18 = 4868(0x1304, float:6.822E-42)
            byte r12 = r12[r18]
            short r12 = (short) r12
            java.lang.String r3 = setMax(r3, r13, r12)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x047d
            r3 = 78
            if (r9 < r3) goto L_0x047d
            r3 = 82
            if (r9 > r3) goto L_0x047d
        L_0x047c:
            goto L_0x0429
        L_0x047d:
            r3 = 124(0x7c, float:1.74E-43)
            if (r9 < r3) goto L_0x048a
            r3 = 126(0x7e, float:1.77E-43)
            if (r9 > r3) goto L_0x048a
            r3 = 229(0xe5, float:3.21E-43)
            r6 = 229(0xe5, float:3.21E-43)
            goto L_0x0429
        L_0x048a:
            byte[] r3 = getMin
            r12 = 8
            byte r13 = r3[r12]
            byte r12 = (byte) r13
            r13 = 4869(0x1305, float:6.823E-42)
            byte r3 = r3[r13]
            short r3 = (short) r3
            r13 = 1139(0x473, float:1.596E-42)
            short r13 = (short) r13
            java.lang.String r3 = setMax(r12, r3, r13)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x04b0
            r3 = 178(0xb2, float:2.5E-43)
            if (r9 < r3) goto L_0x04b0
            r3 = 179(0xb3, float:2.51E-43)
            if (r9 > r3) goto L_0x04b0
            goto L_0x047c
        L_0x04b0:
            byte[] r3 = getMin
            r12 = 8
            byte r13 = r3[r12]
            byte r12 = (byte) r13
            byte r3 = r3[r14]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r12, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x04d1
            r3 = 198(0xc6, float:2.77E-43)
            if (r9 < r3) goto L_0x04d1
            r3 = 204(0xcc, float:2.86E-43)
            if (r9 > r3) goto L_0x04d1
            goto L_0x0454
        L_0x04d1:
            byte[] r3 = getMin
            r12 = 8
            byte r13 = r3[r12]
            byte r12 = (byte) r13
            r13 = 4116(0x1014, float:5.768E-42)
            byte r3 = r3[r13]
            short r3 = (short) r3
            r13 = 4837(0x12e5, float:6.778E-42)
            short r13 = (short) r13
            java.lang.String r3 = setMax(r12, r3, r13)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x04f8
            r3 = 206(0xce, float:2.89E-43)
            if (r9 < r3) goto L_0x04fa
            r12 = 207(0xcf, float:2.9E-43)
            if (r9 > r12) goto L_0x04fa
            goto L_0x0454
        L_0x04f8:
            r3 = 206(0xce, float:2.89E-43)
        L_0x04fa:
            byte[] r12 = getMin
            r13 = 8
            byte r3 = r12[r13]
            byte r3 = (byte) r3
            byte r12 = r12[r14]
            short r12 = (short) r12
            java.lang.String r3 = setMax(r3, r12, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x051c
            r3 = 210(0xd2, float:2.94E-43)
            if (r9 < r3) goto L_0x051c
            r3 = 211(0xd3, float:2.96E-43)
            if (r9 > r3) goto L_0x051c
            goto L_0x0454
        L_0x051c:
            byte[] r3 = getMin
            r12 = 8
            byte r13 = r3[r12]
            byte r12 = (byte) r13
            byte r3 = r3[r14]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r12, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x053e
            r3 = 232(0xe8, float:3.25E-43)
            if (r9 < r3) goto L_0x053e
            r3 = 233(0xe9, float:3.27E-43)
            if (r9 > r3) goto L_0x053e
            goto L_0x0454
        L_0x053e:
            byte[] r3 = getMin
            r10 = 8
            byte r12 = r3[r10]
            byte r10 = (byte) r12
            r12 = r10 & 227(0xe3, float:3.18E-43)
            short r12 = (short) r12
            byte r3 = r3[r18]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r10, r12, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0563
            r3 = 253(0xfd, float:3.55E-43)
            if (r9 < r3) goto L_0x0563
            r3 = 258(0x102, float:3.62E-43)
            if (r9 > r3) goto L_0x0563
            goto L_0x047c
        L_0x0563:
            byte[] r3 = getMin
            r10 = 8
            byte r12 = r3[r10]
            byte r10 = (byte) r12
            byte r3 = r3[r18]
            short r3 = (short) r3
            r12 = 10554(0x293a, float:1.479E-41)
            short r12 = (short) r12
            java.lang.String r3 = setMax(r10, r3, r12)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0588
            r3 = 258(0x102, float:3.62E-43)
            if (r9 < r3) goto L_0x0588
            r3 = 281(0x119, float:3.94E-43)
            if (r9 > r3) goto L_0x0588
            goto L_0x047c
        L_0x0588:
            byte[] r3 = getMin
            r10 = 8
            byte r12 = r3[r10]
            byte r12 = (byte) r12
            r13 = r12 & 227(0xe3, float:3.18E-43)
            short r13 = (short) r13
            byte r3 = r3[r18]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r12, r13, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x05b5
            r3 = 275(0x113, float:3.85E-43)
            if (r9 < r3) goto L_0x05b5
            r3 = 276(0x114, float:3.87E-43)
            if (r9 > r3) goto L_0x05b5
        L_0x05ab:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r6
            goto L_0x0129
        L_0x05b5:
            throw r0
        L_0x05b6:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x05be
            throw r1
        L_0x05be:
            goto L_0x05c0
        L_0x05bf:
            throw r0
        L_0x05c0:
            goto L_0x05bf
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax(o.getPagePerfKey):boolean");
    }

    /* JADX WARNING: type inference failed for: r15v9, types: [int, boolean] */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ boolean getMax(o.onValidateSchema r15) {
        /*
            o.TypeConverter r0 = new o.TypeConverter
            r0.<init>(r15)
            byte[] r15 = getMin
            r1 = 46
            byte r15 = r15[r1]
            byte r15 = (byte) r15
            r1 = r15 | 144(0x90, float:2.02E-43)
            short r1 = (short) r1
            r2 = 5712(0x1650, float:8.004E-42)
            short r2 = (short) r2
            java.lang.String r15 = setMax(r15, r1, r2)
            byte[] r1 = getMin
            r2 = 15
            byte r1 = r1[r2]
            byte r1 = (byte) r1
            short r2 = (short) r1
            r3 = r2 | 4577(0x11e1, float:6.414E-42)
            short r3 = (short) r3
            java.lang.String r1 = setMax(r1, r2, r3)
            r2 = 1
            java.lang.Object[] r3 = new java.lang.Object[r2]     // Catch:{ all -> 0x023e }
            r4 = 0
            r3[r4] = r1     // Catch:{ all -> 0x023e }
            byte[] r1 = getMin     // Catch:{ all -> 0x023e }
            r5 = 8
            byte r1 = r1[r5]     // Catch:{ all -> 0x023e }
            byte r1 = (byte) r1     // Catch:{ all -> 0x023e }
            byte[] r6 = getMin     // Catch:{ all -> 0x023e }
            byte r6 = r6[r2]     // Catch:{ all -> 0x023e }
            short r6 = (short) r6     // Catch:{ all -> 0x023e }
            r7 = 9395(0x24b3, float:1.3165E-41)
            short r7 = (short) r7     // Catch:{ all -> 0x023e }
            java.lang.String r1 = setMax(r1, r6, r7)     // Catch:{ all -> 0x023e }
            java.lang.Class r1 = java.lang.Class.forName(r1)     // Catch:{ all -> 0x023e }
            byte[] r6 = getMin     // Catch:{ all -> 0x023e }
            r8 = 2662(0xa66, float:3.73E-42)
            byte r6 = r6[r8]     // Catch:{ all -> 0x023e }
            byte r6 = (byte) r6     // Catch:{ all -> 0x023e }
            byte[] r8 = getMin     // Catch:{ all -> 0x023e }
            r9 = 30
            byte r8 = r8[r9]     // Catch:{ all -> 0x023e }
            short r8 = (short) r8     // Catch:{ all -> 0x023e }
            r9 = 1177(0x499, float:1.65E-42)
            short r9 = (short) r9     // Catch:{ all -> 0x023e }
            java.lang.String r6 = setMax(r6, r8, r9)     // Catch:{ all -> 0x023e }
            java.lang.Class[] r8 = new java.lang.Class[r2]     // Catch:{ all -> 0x023e }
            byte[] r9 = getMin     // Catch:{ all -> 0x023e }
            byte r9 = r9[r5]     // Catch:{ all -> 0x023e }
            byte r9 = (byte) r9     // Catch:{ all -> 0x023e }
            byte[] r10 = getMin     // Catch:{ all -> 0x023e }
            byte r10 = r10[r2]     // Catch:{ all -> 0x023e }
            short r10 = (short) r10     // Catch:{ all -> 0x023e }
            java.lang.String r9 = setMax(r9, r10, r7)     // Catch:{ all -> 0x023e }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x023e }
            r8[r4] = r9     // Catch:{ all -> 0x023e }
            java.lang.reflect.Method r1 = r1.getMethod(r6, r8)     // Catch:{ all -> 0x023e }
            java.lang.Object r15 = r1.invoke(r15, r3)     // Catch:{ all -> 0x023e }
            java.lang.Object[] r15 = (java.lang.Object[]) r15     // Catch:{ all -> 0x023e }
            int r1 = r15.length
            int[] r1 = new int[r1]
            r3 = 0
        L_0x007b:
            int r6 = r15.length
            r8 = 32
            if (r3 >= r6) goto L_0x0119
            r6 = r15[r3]
            java.lang.Object[] r9 = new java.lang.Object[r2]     // Catch:{ all -> 0x0110 }
            r9[r4] = r6     // Catch:{ all -> 0x0110 }
            byte[] r6 = getMin     // Catch:{ all -> 0x0110 }
            byte r6 = r6[r5]     // Catch:{ all -> 0x0110 }
            byte r6 = (byte) r6     // Catch:{ all -> 0x0110 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0110 }
            r11 = 4119(0x1017, float:5.772E-42)
            byte r10 = r10[r11]     // Catch:{ all -> 0x0110 }
            int r10 = -r10
            short r10 = (short) r10     // Catch:{ all -> 0x0110 }
            r12 = 1123(0x463, float:1.574E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x0110 }
            java.lang.String r6 = setMax(r6, r10, r12)     // Catch:{ all -> 0x0110 }
            java.lang.Class r6 = java.lang.Class.forName(r6)     // Catch:{ all -> 0x0110 }
            r10 = 74
            byte r10 = (byte) r10     // Catch:{ all -> 0x0110 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0110 }
            byte r8 = r13[r8]     // Catch:{ all -> 0x0110 }
            short r8 = (short) r8     // Catch:{ all -> 0x0110 }
            r13 = 10257(0x2811, float:1.4373E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0110 }
            java.lang.String r8 = setMax(r10, r8, r13)     // Catch:{ all -> 0x0110 }
            java.lang.Class[] r10 = new java.lang.Class[r2]     // Catch:{ all -> 0x0110 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0110 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x0110 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0110 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0110 }
            byte r14 = r14[r2]     // Catch:{ all -> 0x0110 }
            short r14 = (short) r14     // Catch:{ all -> 0x0110 }
            java.lang.String r13 = setMax(r13, r14, r7)     // Catch:{ all -> 0x0110 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0110 }
            r10[r4] = r13     // Catch:{ all -> 0x0110 }
            java.lang.reflect.Method r6 = r6.getMethod(r8, r10)     // Catch:{ all -> 0x0110 }
            r8 = 0
            java.lang.Object r6 = r6.invoke(r8, r9)     // Catch:{ all -> 0x0110 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0107 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x0107 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0107 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0107 }
            byte r10 = r10[r11]     // Catch:{ all -> 0x0107 }
            int r10 = -r10
            short r10 = (short) r10     // Catch:{ all -> 0x0107 }
            java.lang.String r9 = setMax(r9, r10, r12)     // Catch:{ all -> 0x0107 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0107 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0107 }
            byte r10 = r10[r5]     // Catch:{ all -> 0x0107 }
            int r10 = r10 - r2
            byte r10 = (byte) r10     // Catch:{ all -> 0x0107 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0107 }
            r12 = 73
            byte r11 = r11[r12]     // Catch:{ all -> 0x0107 }
            short r11 = (short) r11     // Catch:{ all -> 0x0107 }
            r12 = r11 | 10256(0x2810, float:1.4372E-41)
            short r12 = (short) r12     // Catch:{ all -> 0x0107 }
            java.lang.String r10 = setMax(r10, r11, r12)     // Catch:{ all -> 0x0107 }
            java.lang.reflect.Method r9 = r9.getMethod(r10, r8)     // Catch:{ all -> 0x0107 }
            java.lang.Object r6 = r9.invoke(r6, r8)     // Catch:{ all -> 0x0107 }
            java.lang.Integer r6 = (java.lang.Integer) r6     // Catch:{ all -> 0x0107 }
            int r6 = r6.intValue()     // Catch:{ all -> 0x0107 }
            r1[r3] = r6
            int r3 = r3 + 1
            goto L_0x007b
        L_0x0107:
            r15 = move-exception
            java.lang.Throwable r0 = r15.getCause()
            if (r0 == 0) goto L_0x010f
            throw r0
        L_0x010f:
            throw r15
        L_0x0110:
            r15 = move-exception
            java.lang.Throwable r0 = r15.getCause()
            if (r0 == 0) goto L_0x0118
            throw r0
        L_0x0118:
            throw r15
        L_0x0119:
            r15 = 25
            r3 = 44
            r6 = 3
        L_0x011e:
            int r7 = r4 + 1
            r9 = 34
            r4 = r1[r4]     // Catch:{ all -> 0x0197 }
            int r4 = r0.getMax(r4)     // Catch:{ all -> 0x0197 }
            r10 = 18
            r11 = 2
            switch(r4) {
                case -13: goto L_0x0192;
                case -12: goto L_0x0181;
                case -11: goto L_0x0179;
                case -10: goto L_0x0177;
                case -9: goto L_0x016f;
                case -8: goto L_0x015b;
                case -7: goto L_0x0159;
                case -6: goto L_0x0156;
                case -5: goto L_0x014c;
                case -4: goto L_0x013e;
                case -3: goto L_0x0136;
                case -2: goto L_0x0133;
                case -1: goto L_0x0130;
                default: goto L_0x012e;
            }     // Catch:{ all -> 0x0197 }
        L_0x012e:
            goto L_0x0195
        L_0x0130:
            r4 = 27
            goto L_0x011e
        L_0x0133:
            r4 = 25
            goto L_0x011e
        L_0x0136:
            int r4 = invokeSuspend     // Catch:{ all -> 0x0197 }
            r0.setMax = r4     // Catch:{ all -> 0x0197 }
        L_0x013a:
            r0.getMax(r10)     // Catch:{ all -> 0x0197 }
            goto L_0x0195
        L_0x013e:
            r0.setMax = r2     // Catch:{ all -> 0x0197 }
            r0.getMax(r11)     // Catch:{ all -> 0x0197 }
            r4 = 7
            r0.getMax(r4)     // Catch:{ all -> 0x0197 }
            int r4 = r0.setMin     // Catch:{ all -> 0x0197 }
            invoke = r4     // Catch:{ all -> 0x0197 }
            goto L_0x0195
        L_0x014c:
            r0.getMax(r9)     // Catch:{ all -> 0x0197 }
            int r4 = r0.setMin     // Catch:{ all -> 0x0197 }
            if (r4 != 0) goto L_0x0195
            r4 = 24
            goto L_0x011e
        L_0x0156:
            r4 = 44
            goto L_0x011e
        L_0x0159:
            r4 = 1
            goto L_0x011e
        L_0x015b:
            r4 = 9
            r0.getMax(r4)     // Catch:{ all -> 0x0197 }
            int r4 = r0.setMin     // Catch:{ all -> 0x0197 }
            r7 = 39
            if (r4 == 0) goto L_0x016c
            if (r4 == r2) goto L_0x0169
            goto L_0x016c
        L_0x0169:
            r4 = 35
            goto L_0x011e
        L_0x016c:
            r4 = 39
            goto L_0x011e
        L_0x016f:
            r0.getMax(r5)     // Catch:{ all -> 0x0197 }
            java.lang.Object r4 = r0.isInside     // Catch:{ all -> 0x0197 }
            java.lang.Throwable r4 = (java.lang.Throwable) r4     // Catch:{ all -> 0x0197 }
            throw r4     // Catch:{ all -> 0x0197 }
        L_0x0177:
            r4 = 3
            goto L_0x011e
        L_0x0179:
            r4 = 286(0x11e, float:4.01E-43)
            r0.getMax(r4)     // Catch:{ all -> 0x0197 }
            int r15 = r0.setMin     // Catch:{ all -> 0x0197 }
            return r15
        L_0x0181:
            r0.setMax = r2     // Catch:{ all -> 0x0197 }
            r0.getMax(r11)     // Catch:{ all -> 0x0197 }
            r0.getMax(r6)     // Catch:{ all -> 0x0197 }
            java.lang.Object r4 = r0.isInside     // Catch:{ all -> 0x0197 }
            o.onValidateSchema r4 = (o.onValidateSchema) r4     // Catch:{ all -> 0x0197 }
            boolean r4 = r4.setMax     // Catch:{ all -> 0x0197 }
            r0.setMax = r4     // Catch:{ all -> 0x0197 }
            goto L_0x013a
        L_0x0192:
            r4 = 32
            goto L_0x011e
        L_0x0195:
            r4 = r7
            goto L_0x011e
        L_0x0197:
            r4 = move-exception
            byte[] r10 = getMin
            byte r11 = r10[r5]
            byte r11 = (byte) r11
            r12 = 7392(0x1ce0, float:1.0358E-41)
            byte r10 = r10[r12]
            short r10 = (short) r10
            r12 = 10605(0x296d, float:1.4861E-41)
            short r12 = (short) r12
            java.lang.String r10 = setMax(r11, r10, r12)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r4)
            r11 = 38
            if (r10 == 0) goto L_0x01bb
            if (r7 < r6) goto L_0x01bb
            if (r7 > r15) goto L_0x01bb
            goto L_0x0233
        L_0x01bb:
            byte[] r10 = getMin
            byte r12 = r10[r5]
            byte r12 = (byte) r12
            r13 = 13
            byte r10 = r10[r13]
            short r10 = (short) r10
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r10 = setMax(r12, r10, r14)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r4)
            if (r10 == 0) goto L_0x01e1
            r10 = 19
            if (r7 < r10) goto L_0x01e1
            r10 = 20
            if (r7 > r10) goto L_0x01e1
            goto L_0x0233
        L_0x01e1:
            byte[] r10 = getMin
            byte r12 = r10[r5]
            byte r12 = (byte) r12
            byte r10 = r10[r13]
            short r10 = (short) r10
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r10 = setMax(r12, r10, r14)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r4)
            if (r10 == 0) goto L_0x0207
            r10 = 36
            if (r7 < r10) goto L_0x0207
            r10 = 37
            if (r7 > r10) goto L_0x0207
            r11 = 34
            goto L_0x0233
        L_0x0207:
            r9 = 41
            if (r7 < r9) goto L_0x0212
            if (r7 > r3) goto L_0x0212
            r7 = 26
            r11 = 26
            goto L_0x0233
        L_0x0212:
            byte[] r10 = getMin
            byte r12 = r10[r5]
            byte r12 = (byte) r12
            byte r10 = r10[r13]
            short r10 = (short) r10
            int r13 = length
            r13 = r13 | 7588(0x1da4, float:1.0633E-41)
            short r13 = (short) r13
            java.lang.String r10 = setMax(r12, r10, r13)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r4)
            if (r10 == 0) goto L_0x023d
            r10 = 40
            if (r7 < r10) goto L_0x023d
            if (r7 > r9) goto L_0x023d
        L_0x0233:
            r0.IsOverlapping = r4
            r4 = 49
            r0.getMax(r4)
            r4 = r11
            goto L_0x011e
        L_0x023d:
            throw r4
        L_0x023e:
            r15 = move-exception
            java.lang.Throwable r0 = r15.getCause()
            if (r0 == 0) goto L_0x0246
            throw r0
        L_0x0246:
            goto L_0x0248
        L_0x0247:
            throw r15
        L_0x0248:
            goto L_0x0247
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax(o.onValidateSchema):boolean");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ o.isMainThread.getMin getMin(o.onValidateSchema r17) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r1.<init>(r0)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r2 = 210(0xd2, float:2.94E-43)
            short r2 = (short) r2
            r3 = 568(0x238, float:7.96E-43)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r4 = (short) r2
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r2 = setMax(r2, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x025e }
            r6 = 0
            r5[r6] = r2     // Catch:{ all -> 0x025e }
            byte[] r2 = getMin     // Catch:{ all -> 0x025e }
            r7 = 8
            byte r2 = r2[r7]     // Catch:{ all -> 0x025e }
            byte r2 = (byte) r2     // Catch:{ all -> 0x025e }
            byte[] r8 = getMin     // Catch:{ all -> 0x025e }
            byte r8 = r8[r4]     // Catch:{ all -> 0x025e }
            short r8 = (short) r8     // Catch:{ all -> 0x025e }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x025e }
            java.lang.String r2 = setMax(r2, r8, r9)     // Catch:{ all -> 0x025e }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x025e }
            byte[] r8 = getMin     // Catch:{ all -> 0x025e }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x025e }
            byte r8 = (byte) r8     // Catch:{ all -> 0x025e }
            byte[] r10 = getMin     // Catch:{ all -> 0x025e }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x025e }
            short r10 = (short) r10     // Catch:{ all -> 0x025e }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x025e }
            java.lang.String r8 = setMax(r8, r10, r12)     // Catch:{ all -> 0x025e }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x025e }
            byte[] r12 = getMin     // Catch:{ all -> 0x025e }
            byte r12 = r12[r7]     // Catch:{ all -> 0x025e }
            byte r12 = (byte) r12     // Catch:{ all -> 0x025e }
            byte[] r13 = getMin     // Catch:{ all -> 0x025e }
            byte r13 = r13[r4]     // Catch:{ all -> 0x025e }
            short r13 = (short) r13     // Catch:{ all -> 0x025e }
            java.lang.String r12 = setMax(r12, r13, r9)     // Catch:{ all -> 0x025e }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x025e }
            r10[r6] = r12     // Catch:{ all -> 0x025e }
            java.lang.reflect.Method r2 = r2.getMethod(r8, r10)     // Catch:{ all -> 0x025e }
            java.lang.Object r0 = r2.invoke(r0, r5)     // Catch:{ all -> 0x025e }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x025e }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r5 = 0
        L_0x007d:
            int r8 = r0.length
            r10 = 32
            if (r5 >= r8) goto L_0x011f
            r8 = r0[r5]
            java.lang.Object[] r12 = new java.lang.Object[r4]     // Catch:{ all -> 0x0116 }
            r12[r6] = r8     // Catch:{ all -> 0x0116 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0116 }
            byte r8 = r8[r7]     // Catch:{ all -> 0x0116 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0116 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r8 = setMax(r8, r13, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0116 }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r10 = r16[r10]     // Catch:{ all -> 0x0116 }
            short r10 = (short) r10     // Catch:{ all -> 0x0116 }
            r11 = 10257(0x2811, float:1.4373E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x0116 }
            java.lang.String r10 = setMax(r13, r10, r11)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r11 = new java.lang.Class[r4]     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            byte r13 = r13[r7]     // Catch:{ all -> 0x0116 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r3 = r16[r4]     // Catch:{ all -> 0x0116 }
            short r3 = (short) r3     // Catch:{ all -> 0x0116 }
            java.lang.String r3 = setMax(r13, r3, r9)     // Catch:{ all -> 0x0116 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0116 }
            r11[r6] = r3     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r3 = r8.getMethod(r10, r11)     // Catch:{ all -> 0x0116 }
            r8 = 0
            java.lang.Object r3 = r3.invoke(r8, r12)     // Catch:{ all -> 0x0116 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010d }
            byte r10 = r10[r7]     // Catch:{ all -> 0x010d }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r14]     // Catch:{ all -> 0x010d }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010d }
            java.lang.String r10 = setMax(r10, r11, r15)     // Catch:{ all -> 0x010d }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r7]     // Catch:{ all -> 0x010d }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r8)     // Catch:{ all -> 0x010d }
            java.lang.Object r3 = r10.invoke(r3, r8)     // Catch:{ all -> 0x010d }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x010d }
            int r3 = r3.intValue()     // Catch:{ all -> 0x010d }
            r2[r5] = r3
            int r5 = r5 + 1
            r3 = 15
            r11 = 30
            goto L_0x007d
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r3 = 34
        L_0x0121:
            int r5 = r6 + 1
            r8 = 2
            r0 = r2[r6]     // Catch:{ all -> 0x019b }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x019b }
            switch(r0) {
                case -14: goto L_0x0197;
                case -13: goto L_0x0194;
                case -12: goto L_0x0188;
                case -11: goto L_0x0180;
                case -10: goto L_0x017d;
                case -9: goto L_0x017a;
                case -8: goto L_0x0164;
                case -7: goto L_0x015c;
                case -6: goto L_0x0159;
                case -5: goto L_0x0156;
                case -4: goto L_0x014a;
                case -3: goto L_0x013c;
                case -2: goto L_0x0132;
                case -1: goto L_0x012f;
                default: goto L_0x012d;
            }     // Catch:{ all -> 0x019b }
        L_0x012d:
            goto L_0x0199
        L_0x012f:
            r6 = 60
            goto L_0x0121
        L_0x0132:
            int r0 = invokeSuspend     // Catch:{ all -> 0x019b }
            r1.setMax = r0     // Catch:{ all -> 0x019b }
            r0 = 18
            r1.getMax(r0)     // Catch:{ all -> 0x019b }
            goto L_0x0199
        L_0x013c:
            r1.setMax = r4     // Catch:{ all -> 0x019b }
            r1.getMax(r8)     // Catch:{ all -> 0x019b }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x019b }
            int r0 = r1.setMin     // Catch:{ all -> 0x019b }
            invoke = r0     // Catch:{ all -> 0x019b }
            goto L_0x0199
        L_0x014a:
            r1.getMax(r3)     // Catch:{ all -> 0x019b }
            int r0 = r1.setMin     // Catch:{ all -> 0x019b }
            if (r0 != 0) goto L_0x0199
            r0 = 25
            r6 = 25
            goto L_0x0121
        L_0x0156:
            r6 = 63
            goto L_0x0121
        L_0x0159:
            r6 = 27
            goto L_0x0121
        L_0x015c:
            r1.getMax(r7)     // Catch:{ all -> 0x019b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x019b }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x019b }
            throw r0     // Catch:{ all -> 0x019b }
        L_0x0164:
            r1.setMax = r4     // Catch:{ all -> 0x019b }
            r1.getMax(r8)     // Catch:{ all -> 0x019b }
            r0 = 3
            r1.getMax(r0)     // Catch:{ all -> 0x019b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x019b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x019b }
            o.isMainThread$getMin r0 = r0.getMax     // Catch:{ all -> 0x019b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x019b }
            r0 = 4
            r1.getMax(r0)     // Catch:{ all -> 0x019b }
            goto L_0x0199
        L_0x017a:
            r6 = 34
            goto L_0x0121
        L_0x017d:
            r6 = 32
            goto L_0x0121
        L_0x0180:
            r1.getMax(r7)     // Catch:{ all -> 0x019b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x019b }
            o.isMainThread$getMin r0 = (o.isMainThread.getMin) r0     // Catch:{ all -> 0x019b }
            return r0
        L_0x0188:
            r1.getMax(r3)     // Catch:{ all -> 0x019b }
            int r0 = r1.setMin     // Catch:{ all -> 0x019b }
            if (r0 != 0) goto L_0x0199
            r0 = 59
            r6 = 59
            goto L_0x0121
        L_0x0194:
            r6 = 30
            goto L_0x0121
        L_0x0197:
            r6 = 1
            goto L_0x0121
        L_0x0199:
            r6 = r5
            goto L_0x0121
        L_0x019b:
            r0 = move-exception
            byte[] r6 = getMin
            byte r9 = r6[r7]
            byte r9 = (byte) r9
            r11 = 13
            byte r6 = r6[r11]
            short r6 = (short) r6
            int r11 = length
            r11 = r11 | 7588(0x1da4, float:1.0633E-41)
            short r11 = (short) r11
            java.lang.String r6 = setMax(r9, r6, r11)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r9 = 49
            r11 = 26
            if (r6 == 0) goto L_0x01c7
            if (r5 < r4) goto L_0x01c7
            if (r5 > r8) goto L_0x01c7
            r6 = 30
            r13 = 15
            goto L_0x0255
        L_0x01c7:
            byte[] r6 = getMin
            byte r8 = r6[r7]
            byte r8 = (byte) r8
            r12 = 4868(0x1304, float:6.822E-42)
            byte r12 = r6[r12]
            short r12 = (short) r12
            r13 = 15
            byte r6 = r6[r13]
            short r6 = (short) r6
            java.lang.String r6 = setMax(r8, r12, r6)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x01ed
            r6 = 21
            if (r5 < r6) goto L_0x01ed
            if (r5 > r11) goto L_0x01ed
            r6 = 30
            goto L_0x0255
        L_0x01ed:
            byte[] r6 = getMin
            byte r8 = r6[r7]
            byte r8 = (byte) r8
            byte r6 = r6[r9]
            short r6 = (short) r6
            r12 = 9600(0x2580, float:1.3452E-41)
            short r12 = (short) r12
            java.lang.String r6 = setMax(r8, r6, r12)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0213
            r6 = 28
            if (r5 < r6) goto L_0x0213
            r6 = 30
            if (r5 > r6) goto L_0x0215
            r5 = 31
            r11 = 31
            goto L_0x0255
        L_0x0213:
            r6 = 30
        L_0x0215:
            byte[] r8 = getMin
            byte r14 = r8[r7]
            byte r14 = (byte) r14
            byte r8 = r8[r9]
            short r8 = (short) r8
            java.lang.String r8 = setMax(r14, r8, r12)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x0232
            if (r5 < r3) goto L_0x0232
            r8 = 35
            if (r5 > r8) goto L_0x0232
            goto L_0x0255
        L_0x0232:
            byte[] r8 = getMin
            byte r12 = r8[r7]
            byte r12 = (byte) r12
            r14 = 4869(0x1305, float:6.823E-42)
            byte r8 = r8[r14]
            short r8 = (short) r8
            r14 = 1139(0x473, float:1.596E-42)
            short r14 = (short) r14
            java.lang.String r8 = setMax(r12, r8, r14)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x025d
            r8 = 55
            if (r5 < r8) goto L_0x025d
            r8 = 56
            if (r5 > r8) goto L_0x025d
        L_0x0255:
            r1.IsOverlapping = r0
            r1.getMax(r9)
            r6 = r11
            goto L_0x0121
        L_0x025d:
            throw r0
        L_0x025e:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0266
            throw r1
        L_0x0266:
            goto L_0x0268
        L_0x0267:
            throw r0
        L_0x0268:
            goto L_0x0267
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMin(o.onValidateSchema):o.isMainThread$getMin");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0151, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x01bb, code lost:
        r0 = 76;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x0289, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x02b7, code lost:
        r0 = 111;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void getMin(id.dana.domain.model.rpc.response.LoginResponse r19, boolean r20) {
        /*
            r18 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r18
            r0 = r19
            r3 = r20
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0, (int) r3)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = 1296(0x510, float:1.816E-42)
            short r4 = (short) r4
            int r5 = length
            r5 = r5 | 12422(0x3086, float:1.7407E-41)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r5 = (short) r4
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r4 = setMax(r4, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x0760 }
            r7 = 0
            r6[r7] = r4     // Catch:{ all -> 0x0760 }
            byte[] r4 = getMin     // Catch:{ all -> 0x0760 }
            r8 = 8
            byte r4 = r4[r8]     // Catch:{ all -> 0x0760 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x0760 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0760 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x0760 }
            short r9 = (short) r9     // Catch:{ all -> 0x0760 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x0760 }
            java.lang.String r4 = setMax(r4, r9, r10)     // Catch:{ all -> 0x0760 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x0760 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0760 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x0760 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0760 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0760 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x0760 }
            short r11 = (short) r11     // Catch:{ all -> 0x0760 }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x0760 }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x0760 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x0760 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0760 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x0760 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x0760 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0760 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x0760 }
            short r13 = (short) r13     // Catch:{ all -> 0x0760 }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x0760 }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x0760 }
            r11[r7] = r12     // Catch:{ all -> 0x0760 }
            java.lang.reflect.Method r4 = r4.getMethod(r9, r11)     // Catch:{ all -> 0x0760 }
            java.lang.Object r0 = r4.invoke(r0, r6)     // Catch:{ all -> 0x0760 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0760 }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r6 = 0
        L_0x0083:
            int r9 = r0.length
            r11 = 74
            r12 = 0
            if (r6 >= r9) goto L_0x012b
            r9 = r0[r6]
            java.lang.Object[] r13 = new java.lang.Object[r5]     // Catch:{ all -> 0x0122 }
            r13[r7] = r9     // Catch:{ all -> 0x0122 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0122 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0122 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0122 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0122 }
            r15 = 4119(0x1017, float:5.772E-42)
            byte r14 = r14[r15]     // Catch:{ all -> 0x0122 }
            int r14 = -r14
            short r14 = (short) r14     // Catch:{ all -> 0x0122 }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x0122 }
            java.lang.String r9 = setMax(r9, r14, r15)     // Catch:{ all -> 0x0122 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0122 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0122 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0122 }
            r16 = 32
            byte r14 = r14[r16]     // Catch:{ all -> 0x0122 }
            short r14 = (short) r14     // Catch:{ all -> 0x0122 }
            r3 = 10257(0x2811, float:1.4373E-41)
            short r3 = (short) r3     // Catch:{ all -> 0x0122 }
            java.lang.String r3 = setMax(r11, r14, r3)     // Catch:{ all -> 0x0122 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x0122 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0122 }
            byte r14 = r14[r8]     // Catch:{ all -> 0x0122 }
            byte r14 = (byte) r14     // Catch:{ all -> 0x0122 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0122 }
            byte r8 = r16[r5]     // Catch:{ all -> 0x0122 }
            short r8 = (short) r8     // Catch:{ all -> 0x0122 }
            java.lang.String r8 = setMax(r14, r8, r10)     // Catch:{ all -> 0x0122 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0122 }
            r11[r7] = r8     // Catch:{ all -> 0x0122 }
            java.lang.reflect.Method r3 = r9.getMethod(r3, r11)     // Catch:{ all -> 0x0122 }
            java.lang.Object r3 = r3.invoke(r12, r13)     // Catch:{ all -> 0x0122 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0119 }
            r9 = 8
            byte r8 = r8[r9]     // Catch:{ all -> 0x0119 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0119 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0119 }
            r11 = 4119(0x1017, float:5.772E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x0119 }
            int r9 = -r9
            short r9 = (short) r9     // Catch:{ all -> 0x0119 }
            java.lang.String r8 = setMax(r8, r9, r15)     // Catch:{ all -> 0x0119 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0119 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0119 }
            r11 = 8
            byte r9 = r9[r11]     // Catch:{ all -> 0x0119 }
            int r9 = r9 - r5
            byte r9 = (byte) r9     // Catch:{ all -> 0x0119 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0119 }
            r13 = 73
            byte r11 = r11[r13]     // Catch:{ all -> 0x0119 }
            short r11 = (short) r11     // Catch:{ all -> 0x0119 }
            r13 = r11 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0119 }
            java.lang.String r9 = setMax(r9, r11, r13)     // Catch:{ all -> 0x0119 }
            java.lang.reflect.Method r8 = r8.getMethod(r9, r12)     // Catch:{ all -> 0x0119 }
            java.lang.Object r3 = r8.invoke(r3, r12)     // Catch:{ all -> 0x0119 }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x0119 }
            int r3 = r3.intValue()     // Catch:{ all -> 0x0119 }
            r4[r6] = r3
            int r6 = r6 + 1
            r3 = 46
            r8 = 8
            goto L_0x0083
        L_0x0119:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0121
            throw r1
        L_0x0121:
            throw r0
        L_0x0122:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x012a
            throw r1
        L_0x012a:
            throw r0
        L_0x012b:
            r0 = 0
        L_0x012c:
            int r6 = r0 + 1
            r10 = 4868(0x1304, float:6.822E-42)
            r13 = 3
            r0 = r4[r0]     // Catch:{ all -> 0x05b1 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            r15 = 7
            r11 = 18
            r14 = 34
            r9 = 4
            r8 = 9
            r3 = 2
            switch(r0) {
                case -100: goto L_0x05a9;
                case -99: goto L_0x05a6;
                case -98: goto L_0x059a;
                case -97: goto L_0x058d;
                case -96: goto L_0x057c;
                case -95: goto L_0x0579;
                case -94: goto L_0x0576;
                case -93: goto L_0x056c;
                case -92: goto L_0x055b;
                case -91: goto L_0x0558;
                case -90: goto L_0x0555;
                case -89: goto L_0x0552;
                case -88: goto L_0x054e;
                case -87: goto L_0x0541;
                case -86: goto L_0x053d;
                case -85: goto L_0x0539;
                case -84: goto L_0x052c;
                case -83: goto L_0x0528;
                case -82: goto L_0x0509;
                case -81: goto L_0x0505;
                case -80: goto L_0x04ed;
                case -79: goto L_0x04db;
                case -78: goto L_0x04d7;
                case -77: goto L_0x04d3;
                case -76: goto L_0x04c6;
                case -75: goto L_0x04c2;
                case -74: goto L_0x04be;
                case -73: goto L_0x04ba;
                case -72: goto L_0x04ad;
                case -71: goto L_0x04a9;
                case -70: goto L_0x049e;
                case -69: goto L_0x049a;
                case -68: goto L_0x0496;
                case -67: goto L_0x0492;
                case -66: goto L_0x0485;
                case -65: goto L_0x0472;
                case -64: goto L_0x046e;
                case -63: goto L_0x046a;
                case -62: goto L_0x045d;
                case -61: goto L_0x044f;
                case -60: goto L_0x0449;
                case -59: goto L_0x0437;
                case -58: goto L_0x0424;
                case -57: goto L_0x0420;
                case -56: goto L_0x041c;
                case -55: goto L_0x0418;
                case -54: goto L_0x0414;
                case -53: goto L_0x0407;
                case -52: goto L_0x03f0;
                case -51: goto L_0x03ea;
                case -50: goto L_0x03d4;
                case -49: goto L_0x03d0;
                case -48: goto L_0x03cd;
                case -47: goto L_0x03c9;
                case -46: goto L_0x03be;
                case -45: goto L_0x03ba;
                case -44: goto L_0x03b6;
                case -43: goto L_0x03a9;
                case -42: goto L_0x0395;
                case -41: goto L_0x0381;
                case -40: goto L_0x0374;
                case -39: goto L_0x0370;
                case -38: goto L_0x0310;
                case -37: goto L_0x030c;
                case -36: goto L_0x02fb;
                case -35: goto L_0x02e8;
                case -34: goto L_0x02e4;
                case -33: goto L_0x02d6;
                case -32: goto L_0x02d2;
                case -31: goto L_0x02ce;
                case -30: goto L_0x02bb;
                case -29: goto L_0x02ac;
                case -28: goto L_0x02a8;
                case -27: goto L_0x02a4;
                case -26: goto L_0x0297;
                case -25: goto L_0x0238;
                case -24: goto L_0x0229;
                case -23: goto L_0x0225;
                case -22: goto L_0x0221;
                case -21: goto L_0x0214;
                case -20: goto L_0x01c3;
                case -19: goto L_0x01b4;
                case -18: goto L_0x01aa;
                case -17: goto L_0x01a6;
                case -16: goto L_0x01a2;
                case -15: goto L_0x019e;
                case -14: goto L_0x0193;
                case -13: goto L_0x018f;
                case -12: goto L_0x018e;
                case -11: goto L_0x018a;
                case -10: goto L_0x0186;
                case -9: goto L_0x0182;
                case -8: goto L_0x0177;
                case -7: goto L_0x0173;
                case -6: goto L_0x016f;
                case -5: goto L_0x0164;
                case -4: goto L_0x0156;
                case -3: goto L_0x014d;
                case -2: goto L_0x0149;
                case -1: goto L_0x0145;
                default: goto L_0x0143;
            }     // Catch:{ all -> 0x05b1 }
        L_0x0143:
            goto L_0x05ac
        L_0x0145:
            r0 = 311(0x137, float:4.36E-43)
            goto L_0x05ad
        L_0x0149:
            r0 = 155(0x9b, float:2.17E-43)
            goto L_0x05ad
        L_0x014d:
            int r0 = invokeSuspend     // Catch:{ all -> 0x05b1 }
            r1.setMax = r0     // Catch:{ all -> 0x05b1 }
        L_0x0151:
            r1.getMax(r11)     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x0156:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r15)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            invoke = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x0164:
            r1.getMax(r14)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 24
            goto L_0x05ad
        L_0x016f:
            r0 = 103(0x67, float:1.44E-43)
            goto L_0x05ad
        L_0x0173:
            r0 = 282(0x11a, float:3.95E-43)
            goto L_0x05ad
        L_0x0177:
            r1.getMax(r14)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 43
            goto L_0x05ad
        L_0x0182:
            r0 = 138(0x8a, float:1.93E-43)
            goto L_0x05ad
        L_0x0186:
            r0 = 82
            goto L_0x05ad
        L_0x018a:
            r0 = 142(0x8e, float:1.99E-43)
            goto L_0x05ad
        L_0x018e:
            return
        L_0x018f:
            r0 = 102(0x66, float:1.43E-43)
            goto L_0x05ad
        L_0x0193:
            r1.getMax(r14)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 66
            goto L_0x05ad
        L_0x019e:
            r0 = 276(0x114, float:3.87E-43)
            goto L_0x05ad
        L_0x01a2:
            r0 = 116(0x74, float:1.63E-43)
            goto L_0x05ad
        L_0x01a6:
            r0 = 75
            goto L_0x05ad
        L_0x01aa:
            r3 = 8
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x05b1 }
            throw r0     // Catch:{ all -> 0x05b1 }
        L_0x01b4:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 == 0) goto L_0x01bf
        L_0x01bb:
            r0 = 76
            goto L_0x05ad
        L_0x01bf:
            r0 = 189(0xbd, float:2.65E-43)
            goto L_0x05ad
        L_0x01c3:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            byte[] r3 = getMin     // Catch:{ all -> 0x020b }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x020b }
            byte r3 = (byte) r3     // Catch:{ all -> 0x020b }
            byte[] r8 = getMin     // Catch:{ all -> 0x020b }
            r9 = 10
            byte r8 = r8[r9]     // Catch:{ all -> 0x020b }
            short r8 = (short) r8     // Catch:{ all -> 0x020b }
            r9 = 4855(0x12f7, float:6.803E-42)
            short r9 = (short) r9     // Catch:{ all -> 0x020b }
            java.lang.String r3 = setMax(r3, r8, r9)     // Catch:{ all -> 0x020b }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x020b }
            byte[] r8 = getMin     // Catch:{ all -> 0x020b }
            r9 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r9]     // Catch:{ all -> 0x020b }
            byte r8 = (byte) r8     // Catch:{ all -> 0x020b }
            byte[] r9 = getMin     // Catch:{ all -> 0x020b }
            r14 = 77
            byte r9 = r9[r14]     // Catch:{ all -> 0x020b }
            short r9 = (short) r9     // Catch:{ all -> 0x020b }
            short r14 = (short) r10     // Catch:{ all -> 0x020b }
            java.lang.String r8 = setMax(r8, r9, r14)     // Catch:{ all -> 0x020b }
            java.lang.reflect.Method r3 = r3.getMethod(r8, r12)     // Catch:{ all -> 0x020b }
            java.lang.Object r0 = r3.invoke(r0, r12)     // Catch:{ all -> 0x020b }
            java.lang.Integer r0 = (java.lang.Integer) r0     // Catch:{ all -> 0x020b }
            int r0 = r0.intValue()     // Catch:{ all -> 0x020b }
            r1.setMax = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0151
        L_0x020b:
            r0 = move-exception
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x05b1 }
            if (r3 == 0) goto L_0x0213
            throw r3     // Catch:{ all -> 0x05b1 }
        L_0x0213:
            throw r0     // Catch:{ all -> 0x05b1 }
        L_0x0214:
            r0 = 205(0xcd, float:2.87E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 81
            goto L_0x05ad
        L_0x0221:
            r0 = 69
            goto L_0x05ad
        L_0x0225:
            r0 = 48
            goto L_0x05ad
        L_0x0229:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            kotlin.jvm.internal.Intrinsics.checkNotNull(r0)     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x0238:
            r1.setMax = r3     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            r1.getMax(r15)     // Catch:{ all -> 0x05b1 }
            int r3 = r1.setMin     // Catch:{ all -> 0x05b1 }
            java.lang.Object[] r8 = new java.lang.Object[r5]     // Catch:{ all -> 0x028e }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ all -> 0x028e }
            r8[r7] = r3     // Catch:{ all -> 0x028e }
            byte[] r3 = getMin     // Catch:{ all -> 0x028e }
            r11 = 8
            byte r3 = r3[r11]     // Catch:{ all -> 0x028e }
            byte r3 = (byte) r3     // Catch:{ all -> 0x028e }
            byte[] r11 = getMin     // Catch:{ all -> 0x028e }
            r14 = 10
            byte r11 = r11[r14]     // Catch:{ all -> 0x028e }
            short r11 = (short) r11     // Catch:{ all -> 0x028e }
            r14 = 4855(0x12f7, float:6.803E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x028e }
            java.lang.String r3 = setMax(r3, r11, r14)     // Catch:{ all -> 0x028e }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x028e }
            r11 = 59
            byte r11 = (byte) r11     // Catch:{ all -> 0x028e }
            byte[] r14 = getMin     // Catch:{ all -> 0x028e }
            r15 = 17
            byte r14 = r14[r15]     // Catch:{ all -> 0x028e }
            short r14 = (short) r14     // Catch:{ all -> 0x028e }
            r15 = 8916(0x22d4, float:1.2494E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x028e }
            java.lang.String r11 = setMax(r11, r14, r15)     // Catch:{ all -> 0x028e }
            java.lang.Class[] r14 = new java.lang.Class[r5]     // Catch:{ all -> 0x028e }
            java.lang.Class r15 = java.lang.Integer.TYPE     // Catch:{ all -> 0x028e }
            r14[r7] = r15     // Catch:{ all -> 0x028e }
            java.lang.reflect.Method r3 = r3.getMethod(r11, r14)     // Catch:{ all -> 0x028e }
            java.lang.Object r0 = r3.invoke(r0, r8)     // Catch:{ all -> 0x028e }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x05b1 }
        L_0x0289:
            r1.getMax(r9)     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x028e:
            r0 = move-exception
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x05b1 }
            if (r3 == 0) goto L_0x0296
            throw r3     // Catch:{ all -> 0x05b1 }
        L_0x0296:
            throw r0     // Catch:{ all -> 0x05b1 }
        L_0x0297:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0289
        L_0x02a4:
            r0 = 250(0xfa, float:3.5E-43)
            goto L_0x05ad
        L_0x02a8:
            r0 = 115(0x73, float:1.61E-43)
            goto L_0x05ad
        L_0x02ac:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 61
            if (r0 == r3) goto L_0x049a
            r3 = 68
        L_0x02b7:
            r0 = 111(0x6f, float:1.56E-43)
            goto L_0x05ad
        L_0x02bb:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 39
            if (r0 == r3) goto L_0x02ca
            r3 = 56
            r0 = 351(0x15f, float:4.92E-43)
            goto L_0x05ad
        L_0x02ca:
            r0 = 243(0xf3, float:3.4E-43)
            goto L_0x05ad
        L_0x02ce:
            r0 = 321(0x141, float:4.5E-43)
            goto L_0x05ad
        L_0x02d2:
            r0 = 92
            goto L_0x05ad
        L_0x02d6:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 == r3) goto L_0x02e1
            r3 = 72
            goto L_0x049a
        L_0x02e1:
            r0 = 3
            goto L_0x05ad
        L_0x02e4:
            r0 = 188(0xbc, float:2.63E-43)
            goto L_0x05ad
        L_0x02e8:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x05b1 }
            kotlin.Unit r0 = r0.isInside()     // Catch:{ all -> 0x05b1 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0289
        L_0x02fb:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x05b1 }
            r0.length()     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x030c:
            r0 = 324(0x144, float:4.54E-43)
            goto L_0x05ad
        L_0x0310:
            r1.setMax = r3     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            r1.getMax(r15)     // Catch:{ all -> 0x05b1 }
            int r3 = r1.setMin     // Catch:{ all -> 0x05b1 }
            java.lang.Object[] r8 = new java.lang.Object[r5]     // Catch:{ all -> 0x0367 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ all -> 0x0367 }
            r8[r7] = r3     // Catch:{ all -> 0x0367 }
            byte[] r3 = getMin     // Catch:{ all -> 0x0367 }
            r11 = 8
            byte r3 = r3[r11]     // Catch:{ all -> 0x0367 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x0367 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0367 }
            r14 = 10
            byte r11 = r11[r14]     // Catch:{ all -> 0x0367 }
            short r11 = (short) r11     // Catch:{ all -> 0x0367 }
            r14 = 4855(0x12f7, float:6.803E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0367 }
            java.lang.String r3 = setMax(r3, r11, r14)     // Catch:{ all -> 0x0367 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0367 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0367 }
            r14 = 10595(0x2963, float:1.4847E-41)
            byte r11 = r11[r14]     // Catch:{ all -> 0x0367 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0367 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0367 }
            r15 = 76
            byte r14 = r14[r15]     // Catch:{ all -> 0x0367 }
            short r14 = (short) r14     // Catch:{ all -> 0x0367 }
            r15 = r14 | 7698(0x1e12, float:1.0787E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0367 }
            java.lang.String r11 = setMax(r11, r14, r15)     // Catch:{ all -> 0x0367 }
            java.lang.Class[] r14 = new java.lang.Class[r5]     // Catch:{ all -> 0x0367 }
            java.lang.Class r15 = java.lang.Integer.TYPE     // Catch:{ all -> 0x0367 }
            r14[r7] = r15     // Catch:{ all -> 0x0367 }
            java.lang.reflect.Method r3 = r3.getMethod(r11, r14)     // Catch:{ all -> 0x0367 }
            java.lang.Object r0 = r3.invoke(r0, r8)     // Catch:{ all -> 0x0367 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0289
        L_0x0367:
            r0 = move-exception
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x05b1 }
            if (r3 == 0) goto L_0x036f
            throw r3     // Catch:{ all -> 0x05b1 }
        L_0x036f:
            throw r0     // Catch:{ all -> 0x05b1 }
        L_0x0370:
            r0 = 221(0xdd, float:3.1E-43)
            goto L_0x05ad
        L_0x0374:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 == 0) goto L_0x037d
            if (r0 == r5) goto L_0x01bb
        L_0x037d:
            r0 = 296(0x128, float:4.15E-43)
            goto L_0x05ad
        L_0x0381:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            id.dana.domain.model.rpc.response.LoginResponse r0 = (id.dana.domain.model.rpc.response.LoginResponse) r0     // Catch:{ all -> 0x05b1 }
            java.util.List r0 = r0.getVerificationMethods()     // Catch:{ all -> 0x05b1 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0289
        L_0x0395:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            java.util.List r0 = (java.util.List) r0     // Catch:{ all -> 0x05b1 }
            boolean r0 = o.b.AnonymousClass12.isNeedChallenge(r0)     // Catch:{ all -> 0x05b1 }
            r1.setMax = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0151
        L_0x03a9:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 122(0x7a, float:1.71E-43)
            goto L_0x05ad
        L_0x03b6:
            r0 = 322(0x142, float:4.51E-43)
            goto L_0x05ad
        L_0x03ba:
            r0 = 95
            goto L_0x05ad
        L_0x03be:
            r1.getMax(r14)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 136(0x88, float:1.9E-43)
            goto L_0x05ad
        L_0x03c9:
            r0 = 93
            goto L_0x05ad
        L_0x03cd:
            r0 = 1
            goto L_0x05ad
        L_0x03d0:
            r0 = 291(0x123, float:4.08E-43)
            goto L_0x05ad
        L_0x03d4:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 51
            if (r0 == r3) goto L_0x03e6
            r3 = 63
            if (r0 == r3) goto L_0x03e2
            goto L_0x03e6
        L_0x03e2:
            r0 = 285(0x11d, float:4.0E-43)
            goto L_0x05ad
        L_0x03e6:
            r0 = 46
            goto L_0x05ad
        L_0x03ea:
            java.lang.String r0 = "CARRIER_IDENTIFICATION"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0289
        L_0x03f0:
            r1.setMax = r3     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x05b1 }
            boolean r0 = kotlin.jvm.internal.Intrinsics.areEqual((java.lang.Object) r0, (java.lang.Object) r3)     // Catch:{ all -> 0x05b1 }
            r1.setMax = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0151
        L_0x0407:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 150(0x96, float:2.1E-43)
            goto L_0x05ad
        L_0x0414:
            r0 = 309(0x135, float:4.33E-43)
            goto L_0x05ad
        L_0x0418:
            r0 = 151(0x97, float:2.12E-43)
            goto L_0x05ad
        L_0x041c:
            r0 = 350(0x15e, float:4.9E-43)
            goto L_0x05ad
        L_0x0420:
            r0 = 349(0x15d, float:4.89E-43)
            goto L_0x05ad
        L_0x0424:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 32
            if (r0 == r3) goto L_0x0433
            r3 = 69
            r0 = 186(0xba, float:2.6E-43)
            goto L_0x05ad
        L_0x0433:
            r0 = 316(0x13c, float:4.43E-43)
            goto L_0x05ad
        L_0x0437:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x05b1 }
            r1.setMax = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0151
        L_0x0449:
            int r0 = invoke     // Catch:{ all -> 0x05b1 }
            r1.setMax = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0151
        L_0x044f:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r15)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            invokeSuspend = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x045d:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 184(0xb8, float:2.58E-43)
            goto L_0x05ad
        L_0x046a:
            r0 = 153(0x99, float:2.14E-43)
            goto L_0x05ad
        L_0x046e:
            r0 = 363(0x16b, float:5.09E-43)
            goto L_0x05ad
        L_0x0472:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 29
            if (r0 == r3) goto L_0x0481
            r3 = 54
            r0 = 300(0x12c, float:4.2E-43)
            goto L_0x05ad
        L_0x0481:
            r0 = 143(0x8f, float:2.0E-43)
            goto L_0x05ad
        L_0x0485:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 216(0xd8, float:3.03E-43)
            goto L_0x05ad
        L_0x0492:
            r0 = 137(0x89, float:1.92E-43)
            goto L_0x05ad
        L_0x0496:
            r0 = 218(0xda, float:3.05E-43)
            goto L_0x05ad
        L_0x049a:
            r0 = 277(0x115, float:3.88E-43)
            goto L_0x05ad
        L_0x049e:
            r1.getMax(r14)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 242(0xf2, float:3.39E-43)
            goto L_0x05ad
        L_0x04a9:
            r0 = 217(0xd9, float:3.04E-43)
            goto L_0x05ad
        L_0x04ad:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 247(0xf7, float:3.46E-43)
            goto L_0x05ad
        L_0x04ba:
            r0 = 156(0x9c, float:2.19E-43)
            goto L_0x05ad
        L_0x04be:
            r0 = 89
            goto L_0x05ad
        L_0x04c2:
            r0 = 91
            goto L_0x05ad
        L_0x04c6:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 275(0x113, float:3.85E-43)
            goto L_0x05ad
        L_0x04d3:
            r0 = 99
            goto L_0x05ad
        L_0x04d7:
            r0 = 139(0x8b, float:1.95E-43)
            goto L_0x05ad
        L_0x04db:
            r1.setMax = r5     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x05b1 }
            o.isMainThread$getMin r0 = r0.getMax     // Catch:{ all -> 0x05b1 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x05b1 }
            goto L_0x0289
        L_0x04ed:
            r1.setMax = r3     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            o.isMainThread$getMin r0 = (o.isMainThread.getMin) r0     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x05b1 }
            java.util.List r3 = (java.util.List) r3     // Catch:{ all -> 0x05b1 }
            r0.setMax(r3)     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x0505:
            r0 = 163(0xa3, float:2.28E-43)
            goto L_0x05ad
        L_0x0509:
            r1.setMax = r13     // Catch:{ all -> 0x05b1 }
            r1.getMax(r3)     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x05b1 }
            o.isMainThread$getMin r0 = (o.isMainThread.getMin) r0     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x05b1 }
            id.dana.domain.model.rpc.response.LoginResponse r3 = (id.dana.domain.model.rpc.response.LoginResponse) r3     // Catch:{ all -> 0x05b1 }
            r1.getMax(r13)     // Catch:{ all -> 0x05b1 }
            java.lang.Object r8 = r1.isInside     // Catch:{ all -> 0x05b1 }
            java.util.List r8 = (java.util.List) r8     // Catch:{ all -> 0x05b1 }
            r0.length(r3, r8)     // Catch:{ all -> 0x05b1 }
            goto L_0x05ac
        L_0x0528:
            r0 = 123(0x7b, float:1.72E-43)
            goto L_0x05ad
        L_0x052c:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 299(0x12b, float:4.19E-43)
            goto L_0x05ad
        L_0x0539:
            r0 = 289(0x121, float:4.05E-43)
            goto L_0x05ad
        L_0x053d:
            r0 = 71
            goto L_0x05ad
        L_0x0541:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 308(0x134, float:4.32E-43)
            goto L_0x05ad
        L_0x054e:
            r0 = 248(0xf8, float:3.48E-43)
            goto L_0x05ad
        L_0x0552:
            r0 = 359(0x167, float:5.03E-43)
            goto L_0x05ad
        L_0x0555:
            r0 = 50
            goto L_0x05ad
        L_0x0558:
            r0 = 141(0x8d, float:1.98E-43)
            goto L_0x05ad
        L_0x055b:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 16
            if (r0 == r3) goto L_0x0569
            r3 = 78
            r0 = 106(0x6a, float:1.49E-43)
            goto L_0x05ad
        L_0x0569:
            r0 = 25
            goto L_0x05ad
        L_0x056c:
            r1.getMax(r14)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 348(0x15c, float:4.88E-43)
            goto L_0x05ad
        L_0x0576:
            r0 = 314(0x13a, float:4.4E-43)
            goto L_0x05ad
        L_0x0579:
            r0 = 361(0x169, float:5.06E-43)
            goto L_0x05ad
        L_0x057c:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 67
            if (r0 == r3) goto L_0x058a
            r3 = 89
            r0 = 158(0x9e, float:2.21E-43)
            goto L_0x05ad
        L_0x058a:
            r0 = 67
            goto L_0x05ad
        L_0x058d:
            r1.getMax(r8)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            r3 = 76
            if (r0 == r3) goto L_0x02b7
            r3 = 97
            goto L_0x049a
        L_0x059a:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x05b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x05b1 }
            if (r0 != 0) goto L_0x05ac
            r0 = 358(0x166, float:5.02E-43)
            goto L_0x05ad
        L_0x05a6:
            r0 = 44
            goto L_0x05ad
        L_0x05a9:
            r0 = 97
            goto L_0x05ad
        L_0x05ac:
            r0 = r6
        L_0x05ad:
            r11 = 74
            goto L_0x012c
        L_0x05b1:
            r0 = move-exception
            byte[] r3 = getMin
            r8 = 8
            byte r9 = r3[r8]
            byte r8 = (byte) r9
            r9 = 21
            byte r3 = r3[r9]
            short r3 = (short) r3
            r11 = 10638(0x298e, float:1.4907E-41)
            short r11 = (short) r11
            java.lang.String r3 = setMax(r8, r3, r11)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            r8 = 185(0xb9, float:2.59E-43)
            if (r3 == 0) goto L_0x05dd
            if (r6 < r13) goto L_0x05dd
            r3 = 25
            if (r6 > r3) goto L_0x05dd
        L_0x05d7:
            r3 = 185(0xb9, float:2.59E-43)
        L_0x05d9:
            r8 = 8
            goto L_0x0755
        L_0x05dd:
            byte[] r3 = getMin
            r13 = 8
            byte r14 = r3[r13]
            byte r13 = (byte) r14
            byte r3 = r3[r10]
            short r3 = (short) r3
            r14 = 10554(0x293a, float:1.479E-41)
            short r14 = (short) r14
            java.lang.String r3 = setMax(r13, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0603
            r3 = 19
            if (r6 < r3) goto L_0x0603
            r3 = 20
            if (r6 > r3) goto L_0x0603
        L_0x0600:
            r3 = 74
            goto L_0x05d9
        L_0x0603:
            byte[] r3 = getMin
            r13 = 8
            byte r15 = r3[r13]
            byte r13 = (byte) r15
            byte r15 = r3[r10]
            short r15 = (short) r15
            r17 = 15
            byte r3 = r3[r17]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r13, r15, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0629
            r3 = 25
            if (r6 < r3) goto L_0x0629
            r3 = 26
            if (r6 > r3) goto L_0x0629
            goto L_0x0600
        L_0x0629:
            byte[] r3 = getMin
            r13 = 8
            byte r15 = r3[r13]
            byte r13 = (byte) r15
            byte r3 = r3[r9]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r13, r3, r11)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x064a
            r3 = 38
            if (r6 < r3) goto L_0x064a
            r3 = 39
            if (r6 > r3) goto L_0x064a
            goto L_0x05d7
        L_0x064a:
            byte[] r3 = getMin
            r13 = 8
            byte r15 = r3[r13]
            byte r13 = (byte) r15
            r15 = 1156(0x484, float:1.62E-42)
            byte r3 = r3[r15]
            int r3 = -r3
            short r3 = (short) r3
            r15 = 5857(0x16e1, float:8.207E-42)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r13, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0672
            r3 = 50
            if (r6 < r3) goto L_0x0672
            r3 = 67
            if (r6 > r3) goto L_0x0672
            goto L_0x05d7
        L_0x0672:
            byte[] r3 = getMin
            r13 = 8
            byte r15 = r3[r13]
            byte r13 = (byte) r15
            byte r3 = r3[r10]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r13, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0694
            r3 = 77
            if (r6 < r3) goto L_0x0694
            r3 = 78
            if (r6 > r3) goto L_0x0694
            goto L_0x05d7
        L_0x0694:
            byte[] r3 = getMin
            r13 = 8
            byte r15 = r3[r13]
            byte r13 = (byte) r15
            r15 = 13
            byte r3 = r3[r15]
            short r3 = (short) r3
            int r15 = length
            r15 = r15 | 7588(0x1da4, float:1.0633E-41)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r13, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x06bd
            r3 = 123(0x7b, float:1.72E-43)
            if (r6 < r3) goto L_0x06bd
            r3 = 137(0x89, float:1.92E-43)
            if (r6 > r3) goto L_0x06bd
            goto L_0x05d7
        L_0x06bd:
            byte[] r3 = getMin
            r13 = 8
            byte r15 = r3[r13]
            byte r13 = (byte) r15
            r15 = 4116(0x1014, float:5.768E-42)
            byte r3 = r3[r15]
            short r3 = (short) r3
            r15 = 4837(0x12e5, float:6.778E-42)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r13, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x06e4
            r3 = 131(0x83, float:1.84E-43)
            if (r6 < r3) goto L_0x06e4
            r3 = 132(0x84, float:1.85E-43)
            if (r6 > r3) goto L_0x06e4
            goto L_0x05d7
        L_0x06e4:
            r3 = 159(0x9f, float:2.23E-43)
            if (r6 < r3) goto L_0x06f0
            r3 = 163(0xa3, float:2.28E-43)
            if (r6 > r3) goto L_0x06f0
            r3 = 105(0x69, float:1.47E-43)
            goto L_0x05d9
        L_0x06f0:
            byte[] r3 = getMin
            r13 = 8
            byte r15 = r3[r13]
            byte r13 = (byte) r15
            byte r3 = r3[r10]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r13, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0712
            r3 = 221(0xdd, float:3.1E-43)
            if (r6 < r3) goto L_0x0712
            r3 = 243(0xf3, float:3.4E-43)
            if (r6 > r3) goto L_0x0712
            goto L_0x05d7
        L_0x0712:
            byte[] r3 = getMin
            r8 = 8
            byte r10 = r3[r8]
            byte r10 = (byte) r10
            byte r3 = r3[r9]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r10, r3, r11)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0735
            r3 = 238(0xee, float:3.34E-43)
            if (r6 < r3) goto L_0x0735
            r3 = 239(0xef, float:3.35E-43)
            if (r6 > r3) goto L_0x0735
            r3 = 74
            goto L_0x0755
        L_0x0735:
            r3 = 286(0x11e, float:4.01E-43)
            if (r6 < r3) goto L_0x0740
            r3 = 289(0x121, float:4.05E-43)
            if (r6 > r3) goto L_0x0740
            r3 = 73
            goto L_0x0755
        L_0x0740:
            r3 = 317(0x13d, float:4.44E-43)
            if (r6 < r3) goto L_0x074b
            r3 = 321(0x141, float:4.5E-43)
            if (r6 > r3) goto L_0x074b
            r3 = 284(0x11c, float:3.98E-43)
            goto L_0x0755
        L_0x074b:
            r3 = 353(0x161, float:4.95E-43)
            if (r6 < r3) goto L_0x075f
            r3 = 359(0x167, float:5.03E-43)
            if (r6 > r3) goto L_0x075f
            r3 = 101(0x65, float:1.42E-43)
        L_0x0755:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r3
            goto L_0x05ad
        L_0x075f:
            throw r0
        L_0x0760:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0768
            throw r1
        L_0x0768:
            goto L_0x076a
        L_0x0769:
            throw r0
        L_0x076a:
            goto L_0x0769
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMin(id.dana.domain.model.rpc.response.LoginResponse, boolean):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ void getMin(o.onValidateSchema r17, id.dana.domain.model.rpc.response.LoginResponse r18, boolean r19) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r2 = r18
            r3 = r19
            r1.<init>((java.lang.Object) r0, (java.lang.Object) r2, (int) r3)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r3 = 308(0x134, float:4.32E-43)
            short r3 = (short) r3
            r4 = 11578(0x2d3a, float:1.6224E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x029a }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x029a }
            byte[] r3 = getMin     // Catch:{ all -> 0x029a }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x029a }
            byte r3 = (byte) r3     // Catch:{ all -> 0x029a }
            byte[] r9 = getMin     // Catch:{ all -> 0x029a }
            byte r9 = r9[r5]     // Catch:{ all -> 0x029a }
            short r9 = (short) r9     // Catch:{ all -> 0x029a }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x029a }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x029a }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x029a }
            byte[] r9 = getMin     // Catch:{ all -> 0x029a }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x029a }
            byte r9 = (byte) r9     // Catch:{ all -> 0x029a }
            byte[] r11 = getMin     // Catch:{ all -> 0x029a }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x029a }
            short r11 = (short) r11     // Catch:{ all -> 0x029a }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x029a }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x029a }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x029a }
            byte[] r12 = getMin     // Catch:{ all -> 0x029a }
            byte r12 = r12[r8]     // Catch:{ all -> 0x029a }
            byte r12 = (byte) r12     // Catch:{ all -> 0x029a }
            byte[] r13 = getMin     // Catch:{ all -> 0x029a }
            byte r13 = r13[r5]     // Catch:{ all -> 0x029a }
            short r13 = (short) r13     // Catch:{ all -> 0x029a }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x029a }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x029a }
            r11[r7] = r12     // Catch:{ all -> 0x029a }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x029a }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x029a }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x029a }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x0081:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x0123
            r9 = r0[r6]
            java.lang.Object[] r11 = new java.lang.Object[r5]     // Catch:{ all -> 0x011a }
            r11[r7] = r9     // Catch:{ all -> 0x011a }
            byte[] r9 = getMin     // Catch:{ all -> 0x011a }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011a }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011a }
            byte[] r12 = getMin     // Catch:{ all -> 0x011a }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x011a }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x011a }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x011a }
            java.lang.String r9 = setMax(r9, r12, r14)     // Catch:{ all -> 0x011a }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011a }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x011a }
            byte[] r15 = getMin     // Catch:{ all -> 0x011a }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x011a }
            short r15 = (short) r15     // Catch:{ all -> 0x011a }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x011a }
            java.lang.String r4 = setMax(r12, r15, r4)     // Catch:{ all -> 0x011a }
            java.lang.Class[] r12 = new java.lang.Class[r5]     // Catch:{ all -> 0x011a }
            byte[] r15 = getMin     // Catch:{ all -> 0x011a }
            byte r15 = r15[r8]     // Catch:{ all -> 0x011a }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011a }
            byte[] r16 = getMin     // Catch:{ all -> 0x011a }
            byte r2 = r16[r5]     // Catch:{ all -> 0x011a }
            short r2 = (short) r2     // Catch:{ all -> 0x011a }
            java.lang.String r2 = setMax(r15, r2, r10)     // Catch:{ all -> 0x011a }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x011a }
            r12[r7] = r2     // Catch:{ all -> 0x011a }
            java.lang.reflect.Method r2 = r9.getMethod(r4, r12)     // Catch:{ all -> 0x011a }
            r4 = 0
            java.lang.Object r2 = r2.invoke(r4, r11)     // Catch:{ all -> 0x011a }
            byte[] r9 = getMin     // Catch:{ all -> 0x0111 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0111 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0111 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0111 }
            byte r11 = r11[r13]     // Catch:{ all -> 0x0111 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0111 }
            java.lang.String r9 = setMax(r9, r11, r14)     // Catch:{ all -> 0x0111 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0111 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0111 }
            byte r11 = r11[r8]     // Catch:{ all -> 0x0111 }
            int r11 = r11 - r5
            byte r11 = (byte) r11     // Catch:{ all -> 0x0111 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0111 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0111 }
            short r12 = (short) r12     // Catch:{ all -> 0x0111 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0111 }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x0111 }
            java.lang.reflect.Method r9 = r9.getMethod(r11, r4)     // Catch:{ all -> 0x0111 }
            java.lang.Object r2 = r9.invoke(r2, r4)     // Catch:{ all -> 0x0111 }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ all -> 0x0111 }
            int r2 = r2.intValue()     // Catch:{ all -> 0x0111 }
            r3[r6] = r2
            int r6 = r6 + 1
            r2 = 46
            r4 = 15
            goto L_0x0081
        L_0x0111:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0119
            throw r1
        L_0x0119:
            throw r0
        L_0x011a:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0122
            throw r1
        L_0x0122:
            throw r0
        L_0x0123:
            r2 = 58
            r4 = 23
            r6 = 89
            r9 = 3
            r0 = 0
        L_0x012b:
            int r10 = r0 + 1
            r11 = 52
            r12 = 47
            r0 = r3[r0]     // Catch:{ all -> 0x01e7 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01e7 }
            r13 = 18
            r14 = 9
            r15 = 2
            r7 = 7
            switch(r0) {
                case -20: goto L_0x01d4;
                case -19: goto L_0x01c8;
                case -18: goto L_0x01c5;
                case -17: goto L_0x01c2;
                case -16: goto L_0x01b6;
                case -15: goto L_0x01a9;
                case -14: goto L_0x01a4;
                case -13: goto L_0x01a1;
                case -12: goto L_0x019f;
                case -11: goto L_0x0195;
                case -10: goto L_0x0188;
                case -9: goto L_0x0180;
                case -8: goto L_0x017c;
                case -7: goto L_0x015a;
                case -6: goto L_0x0156;
                case -5: goto L_0x014e;
                case -4: goto L_0x014d;
                case -3: goto L_0x0149;
                case -2: goto L_0x0145;
                case -1: goto L_0x0142;
                default: goto L_0x0140;
            }     // Catch:{ all -> 0x01e7 }
        L_0x0140:
            goto L_0x01e3
        L_0x0142:
            r0 = 3
            goto L_0x01e4
        L_0x0145:
            r0 = 93
            goto L_0x01e4
        L_0x0149:
            r0 = 23
            goto L_0x01e4
        L_0x014d:
            return
        L_0x014e:
            r1.getMax(r8)     // Catch:{ all -> 0x01e7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01e7 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01e7 }
            throw r0     // Catch:{ all -> 0x01e7 }
        L_0x0156:
            r0 = 89
            goto L_0x01e4
        L_0x015a:
            r1.setMax = r9     // Catch:{ all -> 0x01e7 }
            r1.getMax(r15)     // Catch:{ all -> 0x01e7 }
            r1.getMax(r9)     // Catch:{ all -> 0x01e7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01e7 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01e7 }
            r1.getMax(r9)     // Catch:{ all -> 0x01e7 }
            java.lang.Object r13 = r1.isInside     // Catch:{ all -> 0x01e7 }
            id.dana.domain.model.rpc.response.LoginResponse r13 = (id.dana.domain.model.rpc.response.LoginResponse) r13     // Catch:{ all -> 0x01e7 }
            r1.getMax(r7)     // Catch:{ all -> 0x01e7 }
            int r7 = r1.setMin     // Catch:{ all -> 0x01e7 }
            if (r7 == 0) goto L_0x0176
            r7 = 1
            goto L_0x0177
        L_0x0176:
            r7 = 0
        L_0x0177:
            r0.getMax((id.dana.domain.model.rpc.response.LoginResponse) r13, (boolean) r7)     // Catch:{ all -> 0x01e7 }
            goto L_0x01e3
        L_0x017c:
            r0 = 58
            goto L_0x01e4
        L_0x0180:
            int r0 = invoke     // Catch:{ all -> 0x01e7 }
            r1.setMax = r0     // Catch:{ all -> 0x01e7 }
        L_0x0184:
            r1.getMax(r13)     // Catch:{ all -> 0x01e7 }
            goto L_0x01e3
        L_0x0188:
            r1.setMax = r5     // Catch:{ all -> 0x01e7 }
            r1.getMax(r15)     // Catch:{ all -> 0x01e7 }
            r1.getMax(r7)     // Catch:{ all -> 0x01e7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e7 }
            invokeSuspend = r0     // Catch:{ all -> 0x01e7 }
            goto L_0x01e3
        L_0x0195:
            r1.getMax(r12)     // Catch:{ all -> 0x01e7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e7 }
            if (r0 != 0) goto L_0x01e3
            r0 = 51
            goto L_0x01e4
        L_0x019f:
            r0 = 1
            goto L_0x01e4
        L_0x01a1:
            r0 = 56
            goto L_0x01e4
        L_0x01a4:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01e7 }
            r1.setMax = r0     // Catch:{ all -> 0x01e7 }
            goto L_0x0184
        L_0x01a9:
            r1.setMax = r5     // Catch:{ all -> 0x01e7 }
            r1.getMax(r15)     // Catch:{ all -> 0x01e7 }
            r1.getMax(r7)     // Catch:{ all -> 0x01e7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e7 }
            invoke = r0     // Catch:{ all -> 0x01e7 }
            goto L_0x01e3
        L_0x01b6:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01e7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e7 }
            if (r0 != 0) goto L_0x01e3
            r0 = 88
            goto L_0x01e4
        L_0x01c2:
            r0 = 14
            goto L_0x01e4
        L_0x01c5:
            r0 = 12
            goto L_0x01e4
        L_0x01c8:
            r1.getMax(r14)     // Catch:{ all -> 0x01e7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e7 }
            if (r0 == 0) goto L_0x01d2
            r0 = 91
            goto L_0x01e4
        L_0x01d2:
            r0 = 7
            goto L_0x01e4
        L_0x01d4:
            r1.getMax(r14)     // Catch:{ all -> 0x01e7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e7 }
            r7 = 16
            if (r0 == 0) goto L_0x01e0
            r0 = 16
            goto L_0x01e4
        L_0x01e0:
            r0 = 52
            goto L_0x01e4
        L_0x01e3:
            r0 = r10
        L_0x01e4:
            r7 = 0
            goto L_0x012b
        L_0x01e7:
            r0 = move-exception
            r7 = 49
            r13 = 11
            r14 = 94
            if (r10 < r8) goto L_0x01fc
            if (r10 > r13) goto L_0x01fc
            r10 = 55
            r5 = 46
            r14 = 55
        L_0x01f8:
            r15 = 15
            goto L_0x0290
        L_0x01fc:
            r15 = 19
            if (r10 < r15) goto L_0x0207
            if (r10 > r4) goto L_0x0207
            r5 = 46
            r14 = 11
            goto L_0x01f8
        L_0x0207:
            byte[] r13 = getMin
            byte r15 = r13[r8]
            byte r15 = (byte) r15
            byte r13 = r13[r7]
            short r13 = (short) r13
            r5 = 9600(0x2580, float:1.3452E-41)
            short r5 = (short) r5
            java.lang.String r5 = setMax(r15, r13, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0227
            if (r10 < r4) goto L_0x0227
            if (r10 > r11) goto L_0x0227
            r5 = 46
            goto L_0x01f8
        L_0x0227:
            byte[] r5 = getMin
            byte r11 = r5[r8]
            byte r11 = (byte) r11
            r13 = r11 & 227(0xe3, float:3.18E-43)
            short r13 = (short) r13
            r15 = 4868(0x1304, float:6.822E-42)
            byte r5 = r5[r15]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r11, r13, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x024d
            r5 = 46
            if (r10 < r5) goto L_0x024f
            if (r10 > r12) goto L_0x024f
            r10 = 90
            r14 = 90
            goto L_0x01f8
        L_0x024d:
            r5 = 46
        L_0x024f:
            byte[] r11 = getMin
            byte r12 = r11[r8]
            byte r12 = (byte) r12
            byte r13 = r11[r15]
            short r13 = (short) r13
            r15 = 15
            byte r11 = r11[r15]
            short r11 = (short) r11
            java.lang.String r11 = setMax(r12, r13, r11)
            java.lang.Class r11 = java.lang.Class.forName(r11)
            boolean r11 = r11.isInstance(r0)
            if (r11 == 0) goto L_0x026f
            if (r10 < r2) goto L_0x026f
            if (r10 > r6) goto L_0x026f
            goto L_0x0290
        L_0x026f:
            byte[] r11 = getMin
            byte r12 = r11[r8]
            byte r12 = (byte) r12
            r13 = 21
            byte r11 = r11[r13]
            short r11 = (short) r11
            r13 = 10638(0x298e, float:1.4907E-41)
            short r13 = (short) r13
            java.lang.String r11 = setMax(r12, r11, r13)
            java.lang.Class r11 = java.lang.Class.forName(r11)
            boolean r11 = r11.isInstance(r0)
            if (r11 == 0) goto L_0x0299
            r11 = 83
            if (r10 < r11) goto L_0x0299
            if (r10 > r6) goto L_0x0299
        L_0x0290:
            r1.IsOverlapping = r0
            r1.getMax(r7)
            r0 = r14
            r5 = 1
            goto L_0x01e4
        L_0x0299:
            throw r0
        L_0x029a:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x02a2
            throw r1
        L_0x02a2:
            goto L_0x02a4
        L_0x02a3:
            throw r0
        L_0x02a4:
            goto L_0x02a3
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMin(o.onValidateSchema, id.dana.domain.model.rpc.response.LoginResponse, boolean):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ void getMin(o.onValidateSchema r17, java.lang.Throwable r18) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r2 = r18
            r1.<init>((java.lang.Object) r0, (java.lang.Object) r2)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r3 = r0 | 178(0xb2, float:2.5E-43)
            short r3 = (short) r3
            r4 = 3345(0xd11, float:4.687E-42)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r4 = (short) r3
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x0246 }
            r6 = 0
            r5[r6] = r3     // Catch:{ all -> 0x0246 }
            byte[] r3 = getMin     // Catch:{ all -> 0x0246 }
            r7 = 8
            byte r3 = r3[r7]     // Catch:{ all -> 0x0246 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x0246 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0246 }
            byte r8 = r8[r4]     // Catch:{ all -> 0x0246 }
            short r8 = (short) r8     // Catch:{ all -> 0x0246 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x0246 }
            java.lang.String r3 = setMax(r3, r8, r9)     // Catch:{ all -> 0x0246 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0246 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0246 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x0246 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0246 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0246 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x0246 }
            short r10 = (short) r10     // Catch:{ all -> 0x0246 }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x0246 }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x0246 }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x0246 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0246 }
            byte r11 = r11[r7]     // Catch:{ all -> 0x0246 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0246 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0246 }
            byte r12 = r12[r4]     // Catch:{ all -> 0x0246 }
            short r12 = (short) r12     // Catch:{ all -> 0x0246 }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x0246 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0246 }
            r10[r6] = r11     // Catch:{ all -> 0x0246 }
            java.lang.reflect.Method r3 = r3.getMethod(r8, r10)     // Catch:{ all -> 0x0246 }
            java.lang.Object r0 = r3.invoke(r0, r5)     // Catch:{ all -> 0x0246 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0246 }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r5 = 0
        L_0x007f:
            int r8 = r0.length
            if (r5 >= r8) goto L_0x011f
            r8 = r0[r5]
            java.lang.Object[] r10 = new java.lang.Object[r4]     // Catch:{ all -> 0x0116 }
            r10[r6] = r8     // Catch:{ all -> 0x0116 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0116 }
            byte r8 = r8[r7]     // Catch:{ all -> 0x0116 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0116 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0116 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x0116 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0116 }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            java.lang.String r8 = setMax(r8, r11, r13)     // Catch:{ all -> 0x0116 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0116 }
            r11 = 74
            byte r11 = (byte) r11     // Catch:{ all -> 0x0116 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0116 }
            r15 = 32
            byte r14 = r14[r15]     // Catch:{ all -> 0x0116 }
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r11 = setMax(r11, r14, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r14 = new java.lang.Class[r4]     // Catch:{ all -> 0x0116 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0116 }
            byte r15 = r15[r7]     // Catch:{ all -> 0x0116 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r2 = r16[r4]     // Catch:{ all -> 0x0116 }
            short r2 = (short) r2     // Catch:{ all -> 0x0116 }
            java.lang.String r2 = setMax(r15, r2, r9)     // Catch:{ all -> 0x0116 }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x0116 }
            r14[r6] = r2     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r2 = r8.getMethod(r11, r14)     // Catch:{ all -> 0x0116 }
            r8 = 0
            java.lang.Object r2 = r2.invoke(r8, r10)     // Catch:{ all -> 0x0116 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010d }
            byte r10 = r10[r7]     // Catch:{ all -> 0x010d }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r12]     // Catch:{ all -> 0x010d }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010d }
            java.lang.String r10 = setMax(r10, r11, r13)     // Catch:{ all -> 0x010d }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r7]     // Catch:{ all -> 0x010d }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r8)     // Catch:{ all -> 0x010d }
            java.lang.Object r2 = r10.invoke(r2, r8)     // Catch:{ all -> 0x010d }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ all -> 0x010d }
            int r2 = r2.intValue()     // Catch:{ all -> 0x010d }
            r3[r5] = r2
            int r5 = r5 + 1
            r2 = 46
            goto L_0x007f
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r2 = 51
            r5 = 9
            r8 = 28
            r9 = 7
            r10 = 2
        L_0x0127:
            int r11 = r6 + 1
            r0 = r3[r6]     // Catch:{ all -> 0x01af }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01af }
            r6 = 18
            switch(r0) {
                case -16: goto L_0x01a8;
                case -15: goto L_0x0190;
                case -14: goto L_0x018e;
                case -13: goto L_0x0180;
                case -12: goto L_0x0173;
                case -11: goto L_0x016e;
                case -10: goto L_0x016c;
                case -9: goto L_0x015e;
                case -8: goto L_0x0151;
                case -7: goto L_0x0149;
                case -6: goto L_0x0141;
                case -5: goto L_0x013f;
                case -4: goto L_0x013c;
                case -3: goto L_0x013b;
                case -2: goto L_0x0138;
                case -1: goto L_0x0136;
                default: goto L_0x0134;
            }     // Catch:{ all -> 0x01af }
        L_0x0134:
            goto L_0x01ac
        L_0x0136:
            r6 = 4
            goto L_0x0127
        L_0x0138:
            r6 = 51
            goto L_0x0127
        L_0x013b:
            return
        L_0x013c:
            r6 = 28
            goto L_0x0127
        L_0x013f:
            r6 = 2
            goto L_0x0127
        L_0x0141:
            r1.getMax(r7)     // Catch:{ all -> 0x01af }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01af }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01af }
            throw r0     // Catch:{ all -> 0x01af }
        L_0x0149:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01af }
            r1.setMax = r0     // Catch:{ all -> 0x01af }
        L_0x014d:
            r1.getMax(r6)     // Catch:{ all -> 0x01af }
            goto L_0x01ac
        L_0x0151:
            r1.setMax = r4     // Catch:{ all -> 0x01af }
            r1.getMax(r10)     // Catch:{ all -> 0x01af }
            r1.getMax(r9)     // Catch:{ all -> 0x01af }
            int r0 = r1.setMin     // Catch:{ all -> 0x01af }
            invoke = r0     // Catch:{ all -> 0x01af }
            goto L_0x01ac
        L_0x015e:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01af }
            int r0 = r1.setMin     // Catch:{ all -> 0x01af }
            if (r0 != 0) goto L_0x01ac
            r0 = 27
            r6 = 27
            goto L_0x0127
        L_0x016c:
            r6 = 7
            goto L_0x0127
        L_0x016e:
            int r0 = invoke     // Catch:{ all -> 0x01af }
            r1.setMax = r0     // Catch:{ all -> 0x01af }
            goto L_0x014d
        L_0x0173:
            r1.setMax = r4     // Catch:{ all -> 0x01af }
            r1.getMax(r10)     // Catch:{ all -> 0x01af }
            r1.getMax(r9)     // Catch:{ all -> 0x01af }
            int r0 = r1.setMin     // Catch:{ all -> 0x01af }
            invokeSuspend = r0     // Catch:{ all -> 0x01af }
            goto L_0x01ac
        L_0x0180:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x01af }
            int r0 = r1.setMin     // Catch:{ all -> 0x01af }
            if (r0 != 0) goto L_0x01ac
            r0 = 50
            r6 = 50
            goto L_0x0127
        L_0x018e:
            r6 = 1
            goto L_0x0127
        L_0x0190:
            r1.setMax = r10     // Catch:{ all -> 0x01af }
            r1.getMax(r10)     // Catch:{ all -> 0x01af }
            r0 = 3
            r1.getMax(r0)     // Catch:{ all -> 0x01af }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x01af }
            o.onValidateSchema r6 = (o.onValidateSchema) r6     // Catch:{ all -> 0x01af }
            r1.getMax(r0)     // Catch:{ all -> 0x01af }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01af }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01af }
            r6.setMax((java.lang.Throwable) r0)     // Catch:{ all -> 0x01af }
            goto L_0x01ac
        L_0x01a8:
            r6 = 9
            goto L_0x0127
        L_0x01ac:
            r6 = r11
            goto L_0x0127
        L_0x01af:
            r0 = move-exception
            byte[] r6 = getMin
            byte r12 = r6[r7]
            byte r12 = (byte) r12
            r13 = 1156(0x484, float:1.62E-42)
            byte r6 = r6[r13]
            int r6 = -r6
            short r6 = (short) r6
            r13 = 5857(0x16e1, float:8.207E-42)
            short r13 = (short) r13
            java.lang.String r6 = setMax(r12, r6, r13)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r12 = 49
            if (r6 == 0) goto L_0x01d5
            if (r11 < r5) goto L_0x01d5
            if (r11 > r8) goto L_0x01d5
        L_0x01d2:
            r6 = 46
            goto L_0x023c
        L_0x01d5:
            byte[] r6 = getMin
            byte r13 = r6[r7]
            byte r13 = (byte) r13
            byte r6 = r6[r12]
            short r6 = (short) r6
            r14 = 9600(0x2580, float:1.3452E-41)
            short r14 = (short) r14
            java.lang.String r6 = setMax(r13, r6, r14)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x01f7
            r6 = 23
            if (r11 < r6) goto L_0x01f7
            r6 = 24
            if (r11 > r6) goto L_0x01f7
            goto L_0x01d2
        L_0x01f7:
            byte[] r6 = getMin
            byte r13 = r6[r7]
            byte r13 = (byte) r13
            r14 = 13
            byte r6 = r6[r14]
            short r6 = (short) r6
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r6 = setMax(r13, r6, r14)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x021b
            if (r11 < r8) goto L_0x021b
            r6 = 29
            if (r11 > r6) goto L_0x021b
            goto L_0x01d2
        L_0x021b:
            byte[] r6 = getMin
            byte r13 = r6[r7]
            byte r13 = (byte) r13
            r14 = 7392(0x1ce0, float:1.0358E-41)
            byte r6 = r6[r14]
            short r6 = (short) r6
            r14 = 10605(0x296d, float:1.4861E-41)
            short r14 = (short) r14
            java.lang.String r6 = setMax(r13, r6, r14)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0245
            r6 = 46
            if (r11 < r6) goto L_0x0245
            if (r11 > r2) goto L_0x0245
        L_0x023c:
            r1.IsOverlapping = r0
            r1.getMax(r12)
            r6 = 8
            goto L_0x0127
        L_0x0245:
            throw r0
        L_0x0246:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x024e
            throw r1
        L_0x024e:
            goto L_0x0250
        L_0x024f:
            throw r0
        L_0x0250:
            goto L_0x024f
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMin(o.onValidateSchema, java.lang.Throwable):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x0303, code lost:
        if (r10 <= 40) goto L_0x025b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x014d, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x01aa, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x02bc, code lost:
        if (r10 <= 15) goto L_0x0234;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final kotlin.Unit isInside() {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r1.<init>(r2)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = 260(0x104, float:3.64E-43)
            short r3 = (short) r3
            r4 = 4577(0x11e1, float:6.414E-42)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x033f }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x033f }
            byte[] r3 = getMin     // Catch:{ all -> 0x033f }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x033f }
            byte r3 = (byte) r3     // Catch:{ all -> 0x033f }
            byte[] r9 = getMin     // Catch:{ all -> 0x033f }
            byte r9 = r9[r5]     // Catch:{ all -> 0x033f }
            short r9 = (short) r9     // Catch:{ all -> 0x033f }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x033f }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x033f }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x033f }
            byte[] r9 = getMin     // Catch:{ all -> 0x033f }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x033f }
            byte r9 = (byte) r9     // Catch:{ all -> 0x033f }
            byte[] r11 = getMin     // Catch:{ all -> 0x033f }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x033f }
            short r11 = (short) r11     // Catch:{ all -> 0x033f }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x033f }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x033f }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x033f }
            byte[] r12 = getMin     // Catch:{ all -> 0x033f }
            byte r12 = r12[r8]     // Catch:{ all -> 0x033f }
            byte r12 = (byte) r12     // Catch:{ all -> 0x033f }
            byte[] r13 = getMin     // Catch:{ all -> 0x033f }
            byte r13 = r13[r5]     // Catch:{ all -> 0x033f }
            short r13 = (short) r13     // Catch:{ all -> 0x033f }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x033f }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x033f }
            r11[r7] = r12     // Catch:{ all -> 0x033f }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x033f }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x033f }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x033f }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x007d:
            int r9 = r0.length
            r11 = 74
            if (r6 >= r9) goto L_0x011f
            r9 = r0[r6]
            java.lang.Object[] r12 = new java.lang.Object[r5]     // Catch:{ all -> 0x0116 }
            r12[r7] = r9     // Catch:{ all -> 0x0116 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0116 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0116 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0116 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r9 = setMax(r9, r13, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0116 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            r16 = 32
            byte r13 = r13[r16]     // Catch:{ all -> 0x0116 }
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x0116 }
            java.lang.String r4 = setMax(r11, r13, r4)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            byte r13 = r13[r8]     // Catch:{ all -> 0x0116 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r17 = getMin     // Catch:{ all -> 0x0116 }
            byte r14 = r17[r5]     // Catch:{ all -> 0x0116 }
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            java.lang.String r13 = setMax(r13, r14, r10)     // Catch:{ all -> 0x0116 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0116 }
            r11[r7] = r13     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r11)     // Catch:{ all -> 0x0116 }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r12)     // Catch:{ all -> 0x0116 }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r8]     // Catch:{ all -> 0x010d }
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r15)     // Catch:{ all -> 0x010d }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            byte r12 = r12[r8]     // Catch:{ all -> 0x010d }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x010d }
            byte[] r13 = getMin     // Catch:{ all -> 0x010d }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010d }
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010d }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x010d }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x010d }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x010d }
            int r4 = r4.intValue()     // Catch:{ all -> 0x010d }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            goto L_0x007d
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r4 = 14
            r9 = 6
        L_0x0122:
            int r10 = r7 + 1
            r12 = 9
            r14 = 7
            r15 = 34
            r11 = 3
            r13 = 2
            r0 = r3[r7]     // Catch:{ all -> 0x0210 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0210 }
            r7 = 18
            r6 = 4
            switch(r0) {
                case -22: goto L_0x0209;
                case -21: goto L_0x0201;
                case -20: goto L_0x01f0;
                case -19: goto L_0x01de;
                case -18: goto L_0x01db;
                case -17: goto L_0x01d8;
                case -16: goto L_0x01cc;
                case -15: goto L_0x01ca;
                case -14: goto L_0x01c7;
                case -13: goto L_0x01bb;
                case -12: goto L_0x01ae;
                case -11: goto L_0x01a6;
                case -10: goto L_0x01a2;
                case -9: goto L_0x019a;
                case -8: goto L_0x0196;
                case -7: goto L_0x0191;
                case -6: goto L_0x0179;
                case -5: goto L_0x016a;
                case -4: goto L_0x0166;
                case -3: goto L_0x0152;
                case -2: goto L_0x013d;
                case -1: goto L_0x0139;
                default: goto L_0x0137;
            }     // Catch:{ all -> 0x0210 }
        L_0x0137:
            goto L_0x020b
        L_0x0139:
            r7 = 74
            goto L_0x020c
        L_0x013d:
            r1.setMax = r5     // Catch:{ all -> 0x0210 }
            r1.getMax(r13)     // Catch:{ all -> 0x0210 }
            r1.getMax(r11)     // Catch:{ all -> 0x0210 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0210 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0210 }
            o.GriverCreateDialogParam r0 = r0.toDoubleRange     // Catch:{ all -> 0x0210 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0210 }
        L_0x014d:
            r1.getMax(r6)     // Catch:{ all -> 0x0210 }
            goto L_0x020b
        L_0x0152:
            o.onValidateSchema$IsOverlapping r0 = new o.onValidateSchema$IsOverlapping     // Catch:{ all -> 0x0210 }
            r1.setMax = r5     // Catch:{ all -> 0x0210 }
            r1.getMax(r13)     // Catch:{ all -> 0x0210 }
            r1.getMax(r11)     // Catch:{ all -> 0x0210 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0210 }
            o.onValidateSchema r7 = (o.onValidateSchema) r7     // Catch:{ all -> 0x0210 }
            r0.<init>(r7)     // Catch:{ all -> 0x0210 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0210 }
            goto L_0x014d
        L_0x0166:
            r7 = 14
            goto L_0x020c
        L_0x016a:
            r1.setMax = r5     // Catch:{ all -> 0x0210 }
            r1.getMax(r13)     // Catch:{ all -> 0x0210 }
            r1.getMax(r11)     // Catch:{ all -> 0x0210 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0210 }
            o.setGlobalUserData r0 = (o.setGlobalUserData) r0     // Catch:{ all -> 0x0210 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0210 }
            goto L_0x014d
        L_0x0179:
            r1.setMax = r13     // Catch:{ all -> 0x0210 }
            r1.getMax(r13)     // Catch:{ all -> 0x0210 }
            r1.getMax(r11)     // Catch:{ all -> 0x0210 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0210 }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x0210 }
            r1.getMax(r11)     // Catch:{ all -> 0x0210 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x0210 }
            o.setGlobalUserData r6 = (o.setGlobalUserData) r6     // Catch:{ all -> 0x0210 }
            r0.execute(r6)     // Catch:{ all -> 0x0210 }
            goto L_0x020b
        L_0x0191:
            kotlin.Unit r0 = kotlin.Unit.INSTANCE     // Catch:{ all -> 0x0210 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0210 }
            goto L_0x014d
        L_0x0196:
            r7 = 39
            goto L_0x020c
        L_0x019a:
            r1.getMax(r8)     // Catch:{ all -> 0x0210 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0210 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0210 }
            throw r0     // Catch:{ all -> 0x0210 }
        L_0x01a2:
            r7 = 64
            goto L_0x020c
        L_0x01a6:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0210 }
            r1.setMax = r0     // Catch:{ all -> 0x0210 }
        L_0x01aa:
            r1.getMax(r7)     // Catch:{ all -> 0x0210 }
            goto L_0x020b
        L_0x01ae:
            r1.setMax = r5     // Catch:{ all -> 0x0210 }
            r1.getMax(r13)     // Catch:{ all -> 0x0210 }
            r1.getMax(r14)     // Catch:{ all -> 0x0210 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0210 }
            invoke = r0     // Catch:{ all -> 0x0210 }
            goto L_0x020b
        L_0x01bb:
            r1.getMax(r15)     // Catch:{ all -> 0x0210 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0210 }
            if (r0 != 0) goto L_0x020b
            r0 = 38
            r7 = 38
            goto L_0x020c
        L_0x01c7:
            r7 = 66
            goto L_0x020c
        L_0x01ca:
            r7 = 6
            goto L_0x020c
        L_0x01cc:
            r1.getMax(r15)     // Catch:{ all -> 0x0210 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0210 }
            if (r0 != 0) goto L_0x020b
            r0 = 61
            r7 = 61
            goto L_0x020c
        L_0x01d8:
            r7 = 12
            goto L_0x020c
        L_0x01db:
            r7 = 62
            goto L_0x020c
        L_0x01de:
            r1.getMax(r12)     // Catch:{ all -> 0x0210 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0210 }
            if (r0 == 0) goto L_0x01ed
            if (r0 == r5) goto L_0x01e8
            goto L_0x01ed
        L_0x01e8:
            r0 = 67
            r7 = 67
            goto L_0x020c
        L_0x01ed:
            r7 = 72
            goto L_0x020c
        L_0x01f0:
            r1.setMax = r5     // Catch:{ all -> 0x0210 }
            r1.getMax(r13)     // Catch:{ all -> 0x0210 }
            r1.getMax(r11)     // Catch:{ all -> 0x0210 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0210 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x0210 }
            r1.setMax = r0     // Catch:{ all -> 0x0210 }
            goto L_0x01aa
        L_0x0201:
            r1.getMax(r8)     // Catch:{ all -> 0x0210 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0210 }
            kotlin.Unit r0 = (kotlin.Unit) r0     // Catch:{ all -> 0x0210 }
            return r0
        L_0x0209:
            r7 = 1
            goto L_0x020c
        L_0x020b:
            r7 = r10
        L_0x020c:
            r11 = 74
            goto L_0x0122
        L_0x0210:
            r0 = move-exception
            byte[] r6 = getMin
            byte r7 = r6[r8]
            byte r7 = (byte) r7
            r18 = 4869(0x1305, float:6.823E-42)
            byte r6 = r6[r18]
            short r6 = (short) r6
            r5 = 1139(0x473, float:1.596E-42)
            short r5 = (short) r5
            java.lang.String r6 = setMax(r7, r6, r5)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r7 = 10
            if (r6 == 0) goto L_0x0238
            if (r10 < r13) goto L_0x0238
            if (r10 > r11) goto L_0x0238
        L_0x0232:
            r5 = 15
        L_0x0234:
            r6 = 39
            goto L_0x0334
        L_0x0238:
            byte[] r6 = getMin
            byte r11 = r6[r8]
            byte r11 = (byte) r11
            r13 = 7392(0x1ce0, float:1.0358E-41)
            byte r6 = r6[r13]
            short r6 = (short) r6
            r13 = 10605(0x296d, float:1.4861E-41)
            short r13 = (short) r13
            java.lang.String r6 = setMax(r11, r6, r13)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x025f
            if (r10 < r9) goto L_0x025f
            if (r10 > r14) goto L_0x025f
        L_0x0257:
            r5 = 15
            r6 = 39
        L_0x025b:
            r7 = 11
            goto L_0x0334
        L_0x025f:
            byte[] r6 = getMin
            byte r11 = r6[r8]
            byte r11 = (byte) r11
            byte r6 = r6[r18]
            short r6 = (short) r6
            java.lang.String r5 = setMax(r11, r6, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x027a
            if (r10 < r14) goto L_0x027a
            if (r10 > r7) goto L_0x027a
            goto L_0x0257
        L_0x027a:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            r11 = 13
            byte r5 = r5[r11]
            short r5 = (short) r5
            int r11 = length
            r11 = r11 | 7588(0x1da4, float:1.0633E-41)
            short r11 = (short) r11
            java.lang.String r5 = setMax(r6, r5, r11)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x029c
            if (r10 < r8) goto L_0x029c
            if (r10 > r12) goto L_0x029c
            goto L_0x0232
        L_0x029c:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            r11 = 1156(0x484, float:1.62E-42)
            byte r5 = r5[r11]
            int r5 = -r5
            short r5 = (short) r5
            r11 = 5857(0x16e1, float:8.207E-42)
            short r11 = (short) r11
            java.lang.String r5 = setMax(r6, r5, r11)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02c0
            if (r10 < r4) goto L_0x02c0
            r5 = 15
            if (r10 > r5) goto L_0x02c2
        L_0x02be:
            goto L_0x0234
        L_0x02c0:
            r5 = 15
        L_0x02c2:
            byte[] r6 = getMin
            byte r12 = r6[r8]
            byte r12 = (byte) r12
            r13 = 4116(0x1014, float:5.768E-42)
            byte r6 = r6[r13]
            short r6 = (short) r6
            r13 = 4837(0x12e5, float:6.778E-42)
            short r13 = (short) r13
            java.lang.String r6 = setMax(r12, r6, r13)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x02e4
            r6 = 33
            if (r10 < r6) goto L_0x02e4
            if (r10 > r15) goto L_0x02e4
            goto L_0x02be
        L_0x02e4:
            byte[] r6 = getMin
            byte r7 = r6[r8]
            byte r7 = (byte) r7
            r12 = 1156(0x484, float:1.62E-42)
            byte r6 = r6[r12]
            int r6 = -r6
            short r6 = (short) r6
            java.lang.String r6 = setMax(r7, r6, r11)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0307
            r6 = 39
            if (r10 < r6) goto L_0x0309
            r7 = 40
            if (r10 > r7) goto L_0x0309
        L_0x0305:
            goto L_0x025b
        L_0x0307:
            r6 = 39
        L_0x0309:
            byte[] r7 = getMin
            byte r11 = r7[r8]
            byte r11 = (byte) r11
            r12 = 4116(0x1014, float:5.768E-42)
            byte r7 = r7[r12]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r11, r7, r13)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x032a
            r7 = 56
            if (r10 < r7) goto L_0x032a
            r7 = 57
            if (r10 > r7) goto L_0x032a
            goto L_0x0305
        L_0x032a:
            r7 = 68
            if (r10 < r7) goto L_0x033e
            r7 = 72
            if (r10 > r7) goto L_0x033e
            r7 = 65
        L_0x0334:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r5 = 1
            goto L_0x020c
        L_0x033e:
            throw r0
        L_0x033f:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0347
            throw r1
        L_0x0347:
            goto L_0x0349
        L_0x0348:
            throw r0
        L_0x0349:
            goto L_0x0348
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.isInside():kotlin.Unit");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:74:0x023e, code lost:
        if (r8 <= 51) goto L_0x01d9;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ o.UpdateAppCallback isInside(o.onValidateSchema r17) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r1.<init>(r0)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r3 = 190(0xbe, float:2.66E-43)
            short r3 = (short) r3
            r4 = 9410(0x24c2, float:1.3186E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r4 = (short) r3
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x026a }
            r6 = 0
            r5[r6] = r3     // Catch:{ all -> 0x026a }
            byte[] r3 = getMin     // Catch:{ all -> 0x026a }
            r7 = 8
            byte r3 = r3[r7]     // Catch:{ all -> 0x026a }
            byte r3 = (byte) r3     // Catch:{ all -> 0x026a }
            byte[] r8 = getMin     // Catch:{ all -> 0x026a }
            byte r8 = r8[r4]     // Catch:{ all -> 0x026a }
            short r8 = (short) r8     // Catch:{ all -> 0x026a }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x026a }
            java.lang.String r3 = setMax(r3, r8, r9)     // Catch:{ all -> 0x026a }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x026a }
            byte[] r8 = getMin     // Catch:{ all -> 0x026a }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x026a }
            byte r8 = (byte) r8     // Catch:{ all -> 0x026a }
            byte[] r10 = getMin     // Catch:{ all -> 0x026a }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x026a }
            short r10 = (short) r10     // Catch:{ all -> 0x026a }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x026a }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x026a }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x026a }
            byte[] r11 = getMin     // Catch:{ all -> 0x026a }
            byte r11 = r11[r7]     // Catch:{ all -> 0x026a }
            byte r11 = (byte) r11     // Catch:{ all -> 0x026a }
            byte[] r12 = getMin     // Catch:{ all -> 0x026a }
            byte r12 = r12[r4]     // Catch:{ all -> 0x026a }
            short r12 = (short) r12     // Catch:{ all -> 0x026a }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x026a }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x026a }
            r10[r6] = r11     // Catch:{ all -> 0x026a }
            java.lang.reflect.Method r3 = r3.getMethod(r8, r10)     // Catch:{ all -> 0x026a }
            java.lang.Object r0 = r3.invoke(r0, r5)     // Catch:{ all -> 0x026a }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x026a }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r5 = 0
        L_0x007d:
            int r8 = r0.length
            if (r5 >= r8) goto L_0x011d
            r8 = r0[r5]
            java.lang.Object[] r10 = new java.lang.Object[r4]     // Catch:{ all -> 0x0114 }
            r10[r6] = r8     // Catch:{ all -> 0x0114 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0114 }
            byte r8 = r8[r7]     // Catch:{ all -> 0x0114 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0114 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0114 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x0114 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0114 }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0114 }
            java.lang.String r8 = setMax(r8, r11, r13)     // Catch:{ all -> 0x0114 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0114 }
            r11 = 74
            byte r11 = (byte) r11     // Catch:{ all -> 0x0114 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0114 }
            r15 = 32
            byte r14 = r14[r15]     // Catch:{ all -> 0x0114 }
            short r14 = (short) r14     // Catch:{ all -> 0x0114 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0114 }
            java.lang.String r11 = setMax(r11, r14, r15)     // Catch:{ all -> 0x0114 }
            java.lang.Class[] r14 = new java.lang.Class[r4]     // Catch:{ all -> 0x0114 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0114 }
            byte r15 = r15[r7]     // Catch:{ all -> 0x0114 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0114 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0114 }
            byte r2 = r16[r4]     // Catch:{ all -> 0x0114 }
            short r2 = (short) r2     // Catch:{ all -> 0x0114 }
            java.lang.String r2 = setMax(r15, r2, r9)     // Catch:{ all -> 0x0114 }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x0114 }
            r14[r6] = r2     // Catch:{ all -> 0x0114 }
            java.lang.reflect.Method r2 = r8.getMethod(r11, r14)     // Catch:{ all -> 0x0114 }
            r8 = 0
            java.lang.Object r2 = r2.invoke(r8, r10)     // Catch:{ all -> 0x0114 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010b }
            byte r10 = r10[r7]     // Catch:{ all -> 0x010b }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r12]     // Catch:{ all -> 0x010b }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010b }
            java.lang.String r10 = setMax(r10, r11, r13)     // Catch:{ all -> 0x010b }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r7]     // Catch:{ all -> 0x010b }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x010b }
            byte[] r12 = getMin     // Catch:{ all -> 0x010b }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010b }
            short r12 = (short) r12     // Catch:{ all -> 0x010b }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010b }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010b }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r8)     // Catch:{ all -> 0x010b }
            java.lang.Object r2 = r10.invoke(r2, r8)     // Catch:{ all -> 0x010b }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ all -> 0x010b }
            int r2 = r2.intValue()     // Catch:{ all -> 0x010b }
            r3[r5] = r2
            int r5 = r5 + 1
            r2 = 46
            goto L_0x007d
        L_0x010b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0113
            throw r1
        L_0x0113:
            throw r0
        L_0x0114:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011c
            throw r1
        L_0x011c:
            throw r0
        L_0x011d:
            r2 = 27
            r5 = 3
        L_0x0120:
            int r8 = r6 + 1
            r9 = 4
            r0 = r3[r6]     // Catch:{ all -> 0x01b1 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01b1 }
            r6 = 18
            r10 = 7
            r11 = 2
            switch(r0) {
                case -16: goto L_0x01aa;
                case -15: goto L_0x0196;
                case -14: goto L_0x0194;
                case -13: goto L_0x0191;
                case -12: goto L_0x0183;
                case -11: goto L_0x0176;
                case -10: goto L_0x0171;
                case -9: goto L_0x016f;
                case -8: goto L_0x0167;
                case -7: goto L_0x0164;
                case -6: goto L_0x0161;
                case -5: goto L_0x0153;
                case -4: goto L_0x0146;
                case -3: goto L_0x013d;
                case -2: goto L_0x0135;
                case -1: goto L_0x0132;
                default: goto L_0x0130;
            }     // Catch:{ all -> 0x01b1 }
        L_0x0130:
            goto L_0x01ae
        L_0x0132:
            r6 = 52
            goto L_0x0120
        L_0x0135:
            r1.getMax(r7)     // Catch:{ all -> 0x01b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01b1 }
            o.UpdateAppCallback r0 = (o.UpdateAppCallback) r0     // Catch:{ all -> 0x01b1 }
            return r0
        L_0x013d:
            int r0 = invoke     // Catch:{ all -> 0x01b1 }
            r1.setMax = r0     // Catch:{ all -> 0x01b1 }
        L_0x0141:
            r1.getMax(r6)     // Catch:{ all -> 0x01b1 }
            goto L_0x01ae
        L_0x0146:
            r1.setMax = r4     // Catch:{ all -> 0x01b1 }
            r1.getMax(r11)     // Catch:{ all -> 0x01b1 }
            r1.getMax(r10)     // Catch:{ all -> 0x01b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01b1 }
            invokeSuspend = r0     // Catch:{ all -> 0x01b1 }
            goto L_0x01ae
        L_0x0153:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x01b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01b1 }
            if (r0 != 0) goto L_0x01ae
            r0 = 23
            r6 = 23
            goto L_0x0120
        L_0x0161:
            r6 = 24
            goto L_0x0120
        L_0x0164:
            r6 = 55
            goto L_0x0120
        L_0x0167:
            r1.getMax(r7)     // Catch:{ all -> 0x01b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01b1 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01b1 }
            throw r0     // Catch:{ all -> 0x01b1 }
        L_0x016f:
            r6 = 1
            goto L_0x0120
        L_0x0171:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01b1 }
            r1.setMax = r0     // Catch:{ all -> 0x01b1 }
            goto L_0x0141
        L_0x0176:
            r1.setMax = r4     // Catch:{ all -> 0x01b1 }
            r1.getMax(r11)     // Catch:{ all -> 0x01b1 }
            r1.getMax(r10)     // Catch:{ all -> 0x01b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01b1 }
            invoke = r0     // Catch:{ all -> 0x01b1 }
            goto L_0x01ae
        L_0x0183:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01b1 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01b1 }
            if (r0 != 0) goto L_0x01ae
            r0 = 50
            r6 = 50
            goto L_0x0120
        L_0x0191:
            r6 = 26
            goto L_0x0120
        L_0x0194:
            r6 = 3
            goto L_0x0120
        L_0x0196:
            r1.setMax = r4     // Catch:{ all -> 0x01b1 }
            r1.getMax(r11)     // Catch:{ all -> 0x01b1 }
            r1.getMax(r5)     // Catch:{ all -> 0x01b1 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01b1 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01b1 }
            o.UpdateAppCallback r0 = r0.toString     // Catch:{ all -> 0x01b1 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01b1 }
            r1.getMax(r9)     // Catch:{ all -> 0x01b1 }
            goto L_0x01ae
        L_0x01aa:
            r6 = 27
            goto L_0x0120
        L_0x01ae:
            r6 = r8
            goto L_0x0120
        L_0x01b1:
            r0 = move-exception
            byte[] r6 = getMin
            byte r10 = r6[r7]
            byte r10 = (byte) r10
            r11 = 4868(0x1304, float:6.822E-42)
            byte r6 = r6[r11]
            short r6 = (short) r6
            r12 = 10554(0x293a, float:1.479E-41)
            short r12 = (short) r12
            java.lang.String r6 = setMax(r10, r6, r12)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r10 = 25
            r13 = 49
            r14 = 51
            if (r6 == 0) goto L_0x01dd
            if (r8 < r5) goto L_0x01dd
            if (r8 > r9) goto L_0x01dd
            r6 = 46
        L_0x01d9:
            r14 = 25
            goto L_0x0261
        L_0x01dd:
            byte[] r6 = getMin
            byte r9 = r6[r7]
            byte r9 = (byte) r9
            r15 = 21
            byte r6 = r6[r15]
            short r6 = (short) r6
            r15 = 10638(0x298e, float:1.4907E-41)
            short r15 = (short) r15
            java.lang.String r6 = setMax(r9, r6, r15)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0203
            r6 = 19
            if (r8 < r6) goto L_0x0203
            r6 = 20
            if (r8 > r6) goto L_0x0203
        L_0x0200:
            r6 = 46
            goto L_0x0261
        L_0x0203:
            byte[] r6 = getMin
            byte r9 = r6[r7]
            byte r9 = (byte) r9
            r15 = r9 & 227(0xe3, float:3.18E-43)
            short r15 = (short) r15
            byte r6 = r6[r11]
            short r6 = (short) r6
            java.lang.String r6 = setMax(r9, r15, r6)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0221
            if (r8 < r2) goto L_0x0221
            if (r8 > r14) goto L_0x0221
            goto L_0x0200
        L_0x0221:
            byte[] r6 = getMin
            byte r9 = r6[r7]
            byte r9 = (byte) r9
            byte r6 = r6[r13]
            short r6 = (short) r6
            r15 = 9600(0x2580, float:1.3452E-41)
            short r15 = (short) r15
            java.lang.String r6 = setMax(r9, r6, r15)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0241
            r6 = 46
            if (r8 < r6) goto L_0x0243
            if (r8 > r14) goto L_0x0243
            goto L_0x01d9
        L_0x0241:
            r6 = 46
        L_0x0243:
            byte[] r9 = getMin
            byte r10 = r9[r7]
            byte r10 = (byte) r10
            byte r9 = r9[r11]
            short r9 = (short) r9
            java.lang.String r9 = setMax(r10, r9, r12)
            java.lang.Class r9 = java.lang.Class.forName(r9)
            boolean r9 = r9.isInstance(r0)
            if (r9 == 0) goto L_0x0269
            r9 = 56
            if (r8 < r9) goto L_0x0269
            r9 = 58
            if (r8 > r9) goto L_0x0269
        L_0x0261:
            r1.IsOverlapping = r0
            r1.getMax(r13)
            r6 = r14
            goto L_0x0120
        L_0x0269:
            throw r0
        L_0x026a:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0272
            throw r1
        L_0x0272:
            goto L_0x0274
        L_0x0273:
            throw r0
        L_0x0274:
            goto L_0x0273
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.isInside(o.onValidateSchema):o.UpdateAppCallback");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ o.getPerformanceTracker length(o.onValidateSchema r17) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r1.<init>(r0)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r2 = 186(0xba, float:2.6E-43)
            short r2 = (short) r2
            int r3 = length
            r3 = r3 & 480(0x1e0, float:6.73E-43)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r3 = (short) r2
            r4 = r3 | 4577(0x11e1, float:6.414E-42)
            short r4 = (short) r4
            java.lang.String r2 = setMax(r2, r3, r4)
            r3 = 1
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ all -> 0x029b }
            r5 = 0
            r4[r5] = r2     // Catch:{ all -> 0x029b }
            byte[] r2 = getMin     // Catch:{ all -> 0x029b }
            r6 = 8
            byte r2 = r2[r6]     // Catch:{ all -> 0x029b }
            byte r2 = (byte) r2     // Catch:{ all -> 0x029b }
            byte[] r7 = getMin     // Catch:{ all -> 0x029b }
            byte r7 = r7[r3]     // Catch:{ all -> 0x029b }
            short r7 = (short) r7     // Catch:{ all -> 0x029b }
            r8 = 9395(0x24b3, float:1.3165E-41)
            short r8 = (short) r8     // Catch:{ all -> 0x029b }
            java.lang.String r2 = setMax(r2, r7, r8)     // Catch:{ all -> 0x029b }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x029b }
            byte[] r7 = getMin     // Catch:{ all -> 0x029b }
            r9 = 2662(0xa66, float:3.73E-42)
            byte r7 = r7[r9]     // Catch:{ all -> 0x029b }
            byte r7 = (byte) r7     // Catch:{ all -> 0x029b }
            byte[] r9 = getMin     // Catch:{ all -> 0x029b }
            r10 = 30
            byte r9 = r9[r10]     // Catch:{ all -> 0x029b }
            short r9 = (short) r9     // Catch:{ all -> 0x029b }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x029b }
            java.lang.String r7 = setMax(r7, r9, r11)     // Catch:{ all -> 0x029b }
            java.lang.Class[] r9 = new java.lang.Class[r3]     // Catch:{ all -> 0x029b }
            byte[] r11 = getMin     // Catch:{ all -> 0x029b }
            byte r11 = r11[r6]     // Catch:{ all -> 0x029b }
            byte r11 = (byte) r11     // Catch:{ all -> 0x029b }
            byte[] r12 = getMin     // Catch:{ all -> 0x029b }
            byte r12 = r12[r3]     // Catch:{ all -> 0x029b }
            short r12 = (short) r12     // Catch:{ all -> 0x029b }
            java.lang.String r11 = setMax(r11, r12, r8)     // Catch:{ all -> 0x029b }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x029b }
            r9[r5] = r11     // Catch:{ all -> 0x029b }
            java.lang.reflect.Method r2 = r2.getMethod(r7, r9)     // Catch:{ all -> 0x029b }
            java.lang.Object r0 = r2.invoke(r0, r4)     // Catch:{ all -> 0x029b }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x029b }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r4 = 0
        L_0x007f:
            int r7 = r0.length
            if (r4 >= r7) goto L_0x011f
            r7 = r0[r4]
            java.lang.Object[] r9 = new java.lang.Object[r3]     // Catch:{ all -> 0x0116 }
            r9[r5] = r7     // Catch:{ all -> 0x0116 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0116 }
            byte r7 = r7[r6]     // Catch:{ all -> 0x0116 }
            byte r7 = (byte) r7     // Catch:{ all -> 0x0116 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0116 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x0116 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0116 }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            java.lang.String r7 = setMax(r7, r11, r13)     // Catch:{ all -> 0x0116 }
            java.lang.Class r7 = java.lang.Class.forName(r7)     // Catch:{ all -> 0x0116 }
            r11 = 74
            byte r11 = (byte) r11     // Catch:{ all -> 0x0116 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0116 }
            r15 = 32
            byte r14 = r14[r15]     // Catch:{ all -> 0x0116 }
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r11 = setMax(r11, r14, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r14 = new java.lang.Class[r3]     // Catch:{ all -> 0x0116 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0116 }
            byte r15 = r15[r6]     // Catch:{ all -> 0x0116 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r10 = r16[r3]     // Catch:{ all -> 0x0116 }
            short r10 = (short) r10     // Catch:{ all -> 0x0116 }
            java.lang.String r10 = setMax(r15, r10, r8)     // Catch:{ all -> 0x0116 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0116 }
            r14[r5] = r10     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r7 = r7.getMethod(r11, r14)     // Catch:{ all -> 0x0116 }
            r10 = 0
            java.lang.Object r7 = r7.invoke(r10, r9)     // Catch:{ all -> 0x0116 }
            byte[] r9 = getMin     // Catch:{ all -> 0x010d }
            byte r9 = r9[r6]     // Catch:{ all -> 0x010d }
            byte r9 = (byte) r9     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r12]     // Catch:{ all -> 0x010d }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010d }
            java.lang.String r9 = setMax(r9, r11, r13)     // Catch:{ all -> 0x010d }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r6]     // Catch:{ all -> 0x010d }
            int r11 = r11 - r3
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r9 = r9.getMethod(r11, r10)     // Catch:{ all -> 0x010d }
            java.lang.Object r7 = r9.invoke(r7, r10)     // Catch:{ all -> 0x010d }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ all -> 0x010d }
            int r7 = r7.intValue()     // Catch:{ all -> 0x010d }
            r2[r4] = r7
            int r4 = r4 + 1
            r10 = 30
            goto L_0x007f
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r4 = 39
            r7 = 40
            r8 = 53
            r9 = 5
        L_0x0126:
            int r10 = r5 + 1
            r11 = 25
            r12 = 34
            r0 = r2[r5]     // Catch:{ all -> 0x01d5 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01d5 }
            r5 = 18
            r13 = 7
            r14 = 2
            switch(r0) {
                case -18: goto L_0x01ce;
                case -17: goto L_0x01ca;
                case -16: goto L_0x01c6;
                case -15: goto L_0x01b7;
                case -14: goto L_0x01aa;
                case -13: goto L_0x01a5;
                case -12: goto L_0x01a2;
                case -11: goto L_0x018c;
                case -10: goto L_0x0178;
                case -9: goto L_0x0170;
                case -8: goto L_0x0168;
                case -7: goto L_0x0165;
                case -6: goto L_0x0162;
                case -5: goto L_0x0156;
                case -4: goto L_0x0148;
                case -3: goto L_0x013f;
                case -2: goto L_0x013d;
                case -1: goto L_0x013b;
                default: goto L_0x0139;
            }     // Catch:{ all -> 0x01d5 }
        L_0x0139:
            goto L_0x01d2
        L_0x013b:
            r5 = 1
            goto L_0x0126
        L_0x013d:
            r5 = 5
            goto L_0x0126
        L_0x013f:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01d5 }
            r1.setMax = r0     // Catch:{ all -> 0x01d5 }
        L_0x0143:
            r1.getMax(r5)     // Catch:{ all -> 0x01d5 }
            goto L_0x01d2
        L_0x0148:
            r1.setMax = r3     // Catch:{ all -> 0x01d5 }
            r1.getMax(r14)     // Catch:{ all -> 0x01d5 }
            r1.getMax(r13)     // Catch:{ all -> 0x01d5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d5 }
            invoke = r0     // Catch:{ all -> 0x01d5 }
            goto L_0x01d2
        L_0x0156:
            r1.getMax(r12)     // Catch:{ all -> 0x01d5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d5 }
            if (r0 != 0) goto L_0x01d2
            r0 = 24
            r5 = 24
            goto L_0x0126
        L_0x0162:
            r5 = 39
            goto L_0x0126
        L_0x0165:
            r5 = 36
            goto L_0x0126
        L_0x0168:
            r1.getMax(r6)     // Catch:{ all -> 0x01d5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01d5 }
            o.getPerformanceTracker r0 = (o.getPerformanceTracker) r0     // Catch:{ all -> 0x01d5 }
            return r0
        L_0x0170:
            r1.getMax(r6)     // Catch:{ all -> 0x01d5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01d5 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01d5 }
            throw r0     // Catch:{ all -> 0x01d5 }
        L_0x0178:
            r0 = 9
            r1.getMax(r0)     // Catch:{ all -> 0x01d5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d5 }
            if (r0 == 0) goto L_0x0189
            if (r0 == r3) goto L_0x0184
            goto L_0x0189
        L_0x0184:
            r0 = 31
            r5 = 31
            goto L_0x0126
        L_0x0189:
            r5 = 25
            goto L_0x0126
        L_0x018c:
            r1.setMax = r3     // Catch:{ all -> 0x01d5 }
            r1.getMax(r14)     // Catch:{ all -> 0x01d5 }
            r0 = 3
            r1.getMax(r0)     // Catch:{ all -> 0x01d5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01d5 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01d5 }
            o.getPerformanceTracker r0 = r0.equals     // Catch:{ all -> 0x01d5 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01d5 }
            r0 = 4
            r1.getMax(r0)     // Catch:{ all -> 0x01d5 }
            goto L_0x01d2
        L_0x01a2:
            r5 = 40
            goto L_0x0126
        L_0x01a5:
            int r0 = invoke     // Catch:{ all -> 0x01d5 }
            r1.setMax = r0     // Catch:{ all -> 0x01d5 }
            goto L_0x0143
        L_0x01aa:
            r1.setMax = r3     // Catch:{ all -> 0x01d5 }
            r1.getMax(r14)     // Catch:{ all -> 0x01d5 }
            r1.getMax(r13)     // Catch:{ all -> 0x01d5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d5 }
            invokeSuspend = r0     // Catch:{ all -> 0x01d5 }
            goto L_0x01d2
        L_0x01b7:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x01d5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d5 }
            if (r0 != 0) goto L_0x01d2
            r0 = 52
            r5 = 52
            goto L_0x0126
        L_0x01c6:
            r5 = 55
            goto L_0x0126
        L_0x01ca:
            r5 = 53
            goto L_0x0126
        L_0x01ce:
            r5 = 35
            goto L_0x0126
        L_0x01d2:
            r5 = r10
            goto L_0x0126
        L_0x01d5:
            r0 = move-exception
            byte[] r5 = getMin
            byte r13 = r5[r6]
            byte r13 = (byte) r13
            r14 = r13 & 227(0xe3, float:3.18E-43)
            short r14 = (short) r14
            r15 = 4868(0x1304, float:6.822E-42)
            byte r5 = r5[r15]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r13, r14, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            r13 = 49
            if (r5 == 0) goto L_0x01fe
            if (r10 < r9) goto L_0x01fe
            r5 = 6
            if (r10 > r5) goto L_0x01fe
            r5 = 30
        L_0x01fa:
            r12 = 30
            goto L_0x028f
        L_0x01fe:
            byte[] r5 = getMin
            byte r14 = r5[r6]
            byte r14 = (byte) r14
            byte r5 = r5[r13]
            short r5 = (short) r5
            r15 = 9600(0x2580, float:1.3452E-41)
            short r15 = (short) r15
            java.lang.String r5 = setMax(r14, r5, r15)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0221
            r5 = 19
            if (r10 < r5) goto L_0x0221
            if (r10 > r11) goto L_0x0221
            r5 = 30
            goto L_0x028f
        L_0x0221:
            r5 = 26
            if (r10 < r5) goto L_0x022e
            r5 = 30
            if (r10 > r5) goto L_0x0230
            r10 = 33
            r12 = 33
            goto L_0x028f
        L_0x022e:
            r5 = 30
        L_0x0230:
            byte[] r11 = getMin
            byte r14 = r11[r6]
            byte r14 = (byte) r14
            r15 = 21
            byte r11 = r11[r15]
            short r11 = (short) r11
            r3 = 10638(0x298e, float:1.4907E-41)
            short r3 = (short) r3
            java.lang.String r11 = setMax(r14, r11, r3)
            java.lang.Class r11 = java.lang.Class.forName(r11)
            boolean r11 = r11.isInstance(r0)
            if (r11 == 0) goto L_0x0252
            r11 = 37
            if (r10 < r11) goto L_0x0252
            if (r10 > r4) goto L_0x0252
            goto L_0x01fa
        L_0x0252:
            byte[] r11 = getMin
            byte r14 = r11[r6]
            byte r14 = (byte) r14
            r16 = 1156(0x484, float:1.62E-42)
            byte r11 = r11[r16]
            int r11 = -r11
            short r11 = (short) r11
            r4 = 5857(0x16e1, float:8.207E-42)
            short r4 = (short) r4
            java.lang.String r4 = setMax(r14, r11, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0273
            if (r10 < r7) goto L_0x0273
            if (r10 > r8) goto L_0x0273
            goto L_0x028f
        L_0x0273:
            byte[] r4 = getMin
            byte r11 = r4[r6]
            byte r11 = (byte) r11
            byte r4 = r4[r15]
            short r4 = (short) r4
            java.lang.String r3 = setMax(r11, r4, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x029a
            r3 = 48
            if (r10 < r3) goto L_0x029a
            if (r10 > r13) goto L_0x029a
        L_0x028f:
            r1.IsOverlapping = r0
            r1.getMax(r13)
            r5 = r12
            r3 = 1
            r4 = 39
            goto L_0x0126
        L_0x029a:
            throw r0
        L_0x029b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x02a3
            throw r1
        L_0x02a3:
            goto L_0x02a5
        L_0x02a4:
            throw r0
        L_0x02a5:
            goto L_0x02a4
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length(o.onValidateSchema):o.getPerformanceTracker");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:175:0x0527, code lost:
        if (r10 <= 47) goto L_0x0536;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:196:0x058f, code lost:
        if (r10 <= 123) goto L_0x0591;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:210:0x05de, code lost:
        if (r10 <= 181) goto L_0x0591;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x0155, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0194, code lost:
        r1.getMax(18);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void length(java.lang.String r19) {
        /*
            r18 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r18
            r0 = r19
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = r0 | 888(0x378, float:1.244E-42)
            short r4 = (short) r4
            r5 = 10671(0x29af, float:1.4953E-41)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r6 = (short) r4
            r7 = r6 | 4577(0x11e1, float:6.414E-42)
            short r7 = (short) r7
            java.lang.String r4 = setMax(r4, r6, r7)
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ all -> 0x065b }
            r8 = 0
            r7[r8] = r4     // Catch:{ all -> 0x065b }
            byte[] r4 = getMin     // Catch:{ all -> 0x065b }
            r9 = 8
            byte r4 = r4[r9]     // Catch:{ all -> 0x065b }
            byte r4 = (byte) r4     // Catch:{ all -> 0x065b }
            byte[] r10 = getMin     // Catch:{ all -> 0x065b }
            byte r10 = r10[r6]     // Catch:{ all -> 0x065b }
            short r10 = (short) r10     // Catch:{ all -> 0x065b }
            r11 = 9395(0x24b3, float:1.3165E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x065b }
            java.lang.String r4 = setMax(r4, r10, r11)     // Catch:{ all -> 0x065b }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x065b }
            byte[] r10 = getMin     // Catch:{ all -> 0x065b }
            r12 = 2662(0xa66, float:3.73E-42)
            byte r10 = r10[r12]     // Catch:{ all -> 0x065b }
            byte r10 = (byte) r10     // Catch:{ all -> 0x065b }
            byte[] r12 = getMin     // Catch:{ all -> 0x065b }
            r13 = 30
            byte r12 = r12[r13]     // Catch:{ all -> 0x065b }
            short r12 = (short) r12     // Catch:{ all -> 0x065b }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x065b }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x065b }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x065b }
            byte[] r13 = getMin     // Catch:{ all -> 0x065b }
            byte r13 = r13[r9]     // Catch:{ all -> 0x065b }
            byte r13 = (byte) r13     // Catch:{ all -> 0x065b }
            byte[] r14 = getMin     // Catch:{ all -> 0x065b }
            byte r14 = r14[r6]     // Catch:{ all -> 0x065b }
            short r14 = (short) r14     // Catch:{ all -> 0x065b }
            java.lang.String r13 = setMax(r13, r14, r11)     // Catch:{ all -> 0x065b }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x065b }
            r12[r8] = r13     // Catch:{ all -> 0x065b }
            java.lang.reflect.Method r4 = r4.getMethod(r10, r12)     // Catch:{ all -> 0x065b }
            java.lang.Object r0 = r4.invoke(r0, r7)     // Catch:{ all -> 0x065b }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x065b }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r7 = 0
        L_0x007f:
            int r10 = r0.length
            r12 = 0
            if (r7 >= r10) goto L_0x0129
            r10 = r0[r7]
            java.lang.Object[] r13 = new java.lang.Object[r6]     // Catch:{ all -> 0x0120 }
            r13[r8] = r10     // Catch:{ all -> 0x0120 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0120 }
            byte r10 = r10[r9]     // Catch:{ all -> 0x0120 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0120 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0120 }
            r15 = 4119(0x1017, float:5.772E-42)
            byte r14 = r14[r15]     // Catch:{ all -> 0x0120 }
            int r14 = -r14
            short r14 = (short) r14     // Catch:{ all -> 0x0120 }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x0120 }
            java.lang.String r10 = setMax(r10, r14, r15)     // Catch:{ all -> 0x0120 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0120 }
            r14 = 74
            byte r14 = (byte) r14     // Catch:{ all -> 0x0120 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0120 }
            r17 = 32
            byte r3 = r16[r17]     // Catch:{ all -> 0x0120 }
            short r3 = (short) r3     // Catch:{ all -> 0x0120 }
            r5 = 10257(0x2811, float:1.4373E-41)
            short r5 = (short) r5     // Catch:{ all -> 0x0120 }
            java.lang.String r3 = setMax(r14, r3, r5)     // Catch:{ all -> 0x0120 }
            java.lang.Class[] r5 = new java.lang.Class[r6]     // Catch:{ all -> 0x0120 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0120 }
            byte r14 = r14[r9]     // Catch:{ all -> 0x0120 }
            byte r14 = (byte) r14     // Catch:{ all -> 0x0120 }
            byte[] r17 = getMin     // Catch:{ all -> 0x0120 }
            byte r9 = r17[r6]     // Catch:{ all -> 0x0120 }
            short r9 = (short) r9     // Catch:{ all -> 0x0120 }
            java.lang.String r9 = setMax(r14, r9, r11)     // Catch:{ all -> 0x0120 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0120 }
            r5[r8] = r9     // Catch:{ all -> 0x0120 }
            java.lang.reflect.Method r3 = r10.getMethod(r3, r5)     // Catch:{ all -> 0x0120 }
            java.lang.Object r3 = r3.invoke(r12, r13)     // Catch:{ all -> 0x0120 }
            byte[] r5 = getMin     // Catch:{ all -> 0x0117 }
            r9 = 8
            byte r5 = r5[r9]     // Catch:{ all -> 0x0117 }
            byte r5 = (byte) r5     // Catch:{ all -> 0x0117 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0117 }
            r10 = 4119(0x1017, float:5.772E-42)
            byte r9 = r9[r10]     // Catch:{ all -> 0x0117 }
            int r9 = -r9
            short r9 = (short) r9     // Catch:{ all -> 0x0117 }
            java.lang.String r5 = setMax(r5, r9, r15)     // Catch:{ all -> 0x0117 }
            java.lang.Class r5 = java.lang.Class.forName(r5)     // Catch:{ all -> 0x0117 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0117 }
            r10 = 8
            byte r9 = r9[r10]     // Catch:{ all -> 0x0117 }
            int r9 = r9 - r6
            byte r9 = (byte) r9     // Catch:{ all -> 0x0117 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0117 }
            r13 = 73
            byte r10 = r10[r13]     // Catch:{ all -> 0x0117 }
            short r10 = (short) r10     // Catch:{ all -> 0x0117 }
            r13 = r10 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0117 }
            java.lang.String r9 = setMax(r9, r10, r13)     // Catch:{ all -> 0x0117 }
            java.lang.reflect.Method r5 = r5.getMethod(r9, r12)     // Catch:{ all -> 0x0117 }
            java.lang.Object r3 = r5.invoke(r3, r12)     // Catch:{ all -> 0x0117 }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x0117 }
            int r3 = r3.intValue()     // Catch:{ all -> 0x0117 }
            r4[r7] = r3
            int r7 = r7 + 1
            r3 = 46
            r5 = 15
            r9 = 8
            goto L_0x007f
        L_0x0117:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011f
            throw r1
        L_0x011f:
            throw r0
        L_0x0120:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0128
            throw r1
        L_0x0128:
            throw r0
        L_0x0129:
            int r10 = r8 + 1
            r14 = 47
            r15 = 4
            r3 = 3
            r0 = r4[r8]     // Catch:{ all -> 0x0499 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0499 }
            r8 = 18
            r5 = 7
            r9 = 9
            r7 = 34
            r13 = 2
            switch(r0) {
                case -64: goto L_0x047f;
                case -63: goto L_0x047b;
                case -62: goto L_0x0466;
                case -61: goto L_0x0462;
                case -60: goto L_0x0455;
                case -59: goto L_0x0451;
                case -58: goto L_0x0436;
                case -57: goto L_0x0422;
                case -56: goto L_0x041e;
                case -55: goto L_0x041a;
                case -54: goto L_0x0403;
                case -53: goto L_0x03fa;
                case -52: goto L_0x03f6;
                case -51: goto L_0x03e9;
                case -50: goto L_0x03e5;
                case -49: goto L_0x03e1;
                case -48: goto L_0x03d4;
                case -47: goto L_0x03c6;
                case -46: goto L_0x03c0;
                case -45: goto L_0x03bf;
                case -44: goto L_0x03b5;
                case -43: goto L_0x03b1;
                case -42: goto L_0x03ad;
                case -41: goto L_0x03a0;
                case -40: goto L_0x034f;
                case -39: goto L_0x034b;
                case -38: goto L_0x0347;
                case -37: goto L_0x0343;
                case -36: goto L_0x033f;
                case -35: goto L_0x033b;
                case -34: goto L_0x0337;
                case -33: goto L_0x0326;
                case -32: goto L_0x0316;
                case -31: goto L_0x02c8;
                case -30: goto L_0x02c4;
                case -29: goto L_0x02c0;
                case -28: goto L_0x02b3;
                case -27: goto L_0x02af;
                case -26: goto L_0x0261;
                case -25: goto L_0x023f;
                case -24: goto L_0x023b;
                case -23: goto L_0x0237;
                case -22: goto L_0x0233;
                case -21: goto L_0x0226;
                case -20: goto L_0x0222;
                case -19: goto L_0x021e;
                case -18: goto L_0x0218;
                case -17: goto L_0x0212;
                case -16: goto L_0x01ec;
                case -15: goto L_0x01d9;
                case -14: goto L_0x01d5;
                case -13: goto L_0x01d1;
                case -12: goto L_0x01c4;
                case -11: goto L_0x01c0;
                case -10: goto L_0x01bc;
                case -9: goto L_0x01af;
                case -8: goto L_0x01a1;
                case -7: goto L_0x019c;
                case -6: goto L_0x0199;
                case -5: goto L_0x0184;
                case -4: goto L_0x016d;
                case -3: goto L_0x015a;
                case -2: goto L_0x0145;
                case -1: goto L_0x0142;
                default: goto L_0x0140;
            }     // Catch:{ all -> 0x0499 }
        L_0x0140:
            goto L_0x0496
        L_0x0142:
            r8 = 209(0xd1, float:2.93E-43)
            goto L_0x0129
        L_0x0145:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0499 }
            o.getPerformanceTracker r0 = r0.equals     // Catch:{ all -> 0x0499 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
        L_0x0155:
            r1.getMax(r15)     // Catch:{ all -> 0x0499 }
            goto L_0x0496
        L_0x015a:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getPerformanceTracker r0 = (o.getPerformanceTracker) r0     // Catch:{ all -> 0x0499 }
            java.lang.String r0 = r0.getCurrentTrackerId()     // Catch:{ all -> 0x0499 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x016d:
            r1.setMax = r13     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getTypefaceByCat$setMin r0 = (o.getTypefaceByCat.setMin) r0     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x0499 }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ all -> 0x0499 }
            r0.setMax = r5     // Catch:{ all -> 0x0499 }
            goto L_0x0496
        L_0x0184:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x0499 }
            r1.setMax = r0     // Catch:{ all -> 0x0499 }
        L_0x0194:
            r1.getMax(r8)     // Catch:{ all -> 0x0499 }
            goto L_0x0496
        L_0x0199:
            r8 = 213(0xd5, float:2.98E-43)
            goto L_0x0129
        L_0x019c:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0499 }
            r1.setMax = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0194
        L_0x01a1:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r5)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            invoke = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0496
        L_0x01af:
            r1.getMax(r7)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 27
            r8 = 27
            goto L_0x0129
        L_0x01bc:
            r8 = 196(0xc4, float:2.75E-43)
            goto L_0x0129
        L_0x01c0:
            r8 = 123(0x7b, float:1.72E-43)
            goto L_0x0129
        L_0x01c4:
            r1.getMax(r7)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 51
            r8 = 51
            goto L_0x0129
        L_0x01d1:
            r8 = 137(0x89, float:1.92E-43)
            goto L_0x0129
        L_0x01d5:
            r8 = 256(0x100, float:3.59E-43)
            goto L_0x0129
        L_0x01d9:
            r1.getMax(r9)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 == 0) goto L_0x01e6
            r0 = 115(0x73, float:1.61E-43)
            r8 = 115(0x73, float:1.61E-43)
            goto L_0x0129
        L_0x01e6:
            r0 = 130(0x82, float:1.82E-43)
            r8 = 130(0x82, float:1.82E-43)
            goto L_0x0129
        L_0x01ec:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r5)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            byte[] r5 = getMin     // Catch:{ all -> 0x0499 }
            r7 = 8
            byte r5 = r5[r7]     // Catch:{ all -> 0x0499 }
            byte r5 = (byte) r5     // Catch:{ all -> 0x0499 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0499 }
            byte r7 = r7[r6]     // Catch:{ all -> 0x0499 }
            short r7 = (short) r7     // Catch:{ all -> 0x0499 }
            java.lang.String r5 = setMax(r5, r7, r11)     // Catch:{ all -> 0x0499 }
            java.lang.Class r5 = java.lang.Class.forName(r5)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = java.lang.reflect.Array.newInstance(r5, r0)     // Catch:{ all -> 0x0499 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x0212:
            java.lang.String r0 = "apssflyer"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x0218:
            java.lang.String r0 = "branch"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x021e:
            r8 = 220(0xdc, float:3.08E-43)
            goto L_0x0129
        L_0x0222:
            r8 = 199(0xc7, float:2.79E-43)
            goto L_0x0129
        L_0x0226:
            r1.getMax(r7)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 83
            r8 = 83
            goto L_0x0129
        L_0x0233:
            r8 = 198(0xc6, float:2.77E-43)
            goto L_0x0129
        L_0x0237:
            r8 = 53
            goto L_0x0129
        L_0x023b:
            r8 = 141(0x8d, float:1.98E-43)
            goto L_0x0129
        L_0x023f:
            r1.setMax = r3     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getTypefaceByCat r0 = (o.getTypefaceByCat) r0     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getPerformanceTracker r5 = (o.getPerformanceTracker) r5     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0499 }
            java.lang.String[] r7 = (java.lang.String[]) r7     // Catch:{ all -> 0x0499 }
            java.util.List r0 = o.judgeRes.getMin(r0, r5, r7)     // Catch:{ all -> 0x0499 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x0261:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            byte[] r5 = getMin     // Catch:{ all -> 0x02a6 }
            r7 = 8
            byte r5 = r5[r7]     // Catch:{ all -> 0x02a6 }
            byte r5 = (byte) r5     // Catch:{ all -> 0x02a6 }
            byte[] r7 = getMin     // Catch:{ all -> 0x02a6 }
            r8 = 10
            byte r7 = r7[r8]     // Catch:{ all -> 0x02a6 }
            short r7 = (short) r7     // Catch:{ all -> 0x02a6 }
            r8 = 4855(0x12f7, float:6.803E-42)
            short r8 = (short) r8     // Catch:{ all -> 0x02a6 }
            java.lang.String r5 = setMax(r5, r7, r8)     // Catch:{ all -> 0x02a6 }
            java.lang.Class r5 = java.lang.Class.forName(r5)     // Catch:{ all -> 0x02a6 }
            byte[] r7 = getMin     // Catch:{ all -> 0x02a6 }
            r8 = 8
            byte r7 = r7[r8]     // Catch:{ all -> 0x02a6 }
            int r7 = r7 - r6
            byte r7 = (byte) r7     // Catch:{ all -> 0x02a6 }
            byte[] r8 = getMin     // Catch:{ all -> 0x02a6 }
            r9 = 73
            byte r8 = r8[r9]     // Catch:{ all -> 0x02a6 }
            short r8 = (short) r8     // Catch:{ all -> 0x02a6 }
            r9 = 1170(0x492, float:1.64E-42)
            short r9 = (short) r9     // Catch:{ all -> 0x02a6 }
            java.lang.String r7 = setMax(r7, r8, r9)     // Catch:{ all -> 0x02a6 }
            java.lang.reflect.Method r5 = r5.getMethod(r7, r12)     // Catch:{ all -> 0x02a6 }
            java.lang.Object r0 = r5.invoke(r0, r12)     // Catch:{ all -> 0x02a6 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x02a6:
            r0 = move-exception
            java.lang.Throwable r5 = r0.getCause()     // Catch:{ all -> 0x0499 }
            if (r5 == 0) goto L_0x02ae
            throw r5     // Catch:{ all -> 0x0499 }
        L_0x02ae:
            throw r0     // Catch:{ all -> 0x0499 }
        L_0x02af:
            r8 = 149(0x95, float:2.09E-43)
            goto L_0x0129
        L_0x02b3:
            r1.getMax(r7)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 114(0x72, float:1.6E-43)
            r8 = 114(0x72, float:1.6E-43)
            goto L_0x0129
        L_0x02c0:
            r8 = 136(0x88, float:1.9E-43)
            goto L_0x0129
        L_0x02c4:
            r8 = 147(0x93, float:2.06E-43)
            goto L_0x0129
        L_0x02c8:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            byte[] r5 = getMin     // Catch:{ all -> 0x030d }
            r7 = 8
            byte r5 = r5[r7]     // Catch:{ all -> 0x030d }
            byte r5 = (byte) r5     // Catch:{ all -> 0x030d }
            byte[] r7 = getMin     // Catch:{ all -> 0x030d }
            r8 = 4114(0x1012, float:5.765E-42)
            byte r7 = r7[r8]     // Catch:{ all -> 0x030d }
            short r7 = (short) r7     // Catch:{ all -> 0x030d }
            r8 = 10240(0x2800, float:1.4349E-41)
            short r8 = (short) r8     // Catch:{ all -> 0x030d }
            java.lang.String r5 = setMax(r5, r7, r8)     // Catch:{ all -> 0x030d }
            java.lang.Class r5 = java.lang.Class.forName(r5)     // Catch:{ all -> 0x030d }
            byte[] r7 = getMin     // Catch:{ all -> 0x030d }
            r8 = 563(0x233, float:7.89E-43)
            byte r7 = r7[r8]     // Catch:{ all -> 0x030d }
            int r7 = r7 + r6
            byte r7 = (byte) r7     // Catch:{ all -> 0x030d }
            byte[] r8 = getMin     // Catch:{ all -> 0x030d }
            r9 = 77
            byte r8 = r8[r9]     // Catch:{ all -> 0x030d }
            short r8 = (short) r8     // Catch:{ all -> 0x030d }
            r9 = r8 | 5900(0x170c, float:8.268E-42)
            short r9 = (short) r9     // Catch:{ all -> 0x030d }
            java.lang.String r7 = setMax(r7, r8, r9)     // Catch:{ all -> 0x030d }
            java.lang.reflect.Method r5 = r5.getMethod(r7, r12)     // Catch:{ all -> 0x030d }
            java.lang.Object r0 = r5.invoke(r0, r12)     // Catch:{ all -> 0x030d }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x030d:
            r0 = move-exception
            java.lang.Throwable r5 = r0.getCause()     // Catch:{ all -> 0x0499 }
            if (r5 == 0) goto L_0x0315
            throw r5     // Catch:{ all -> 0x0499 }
        L_0x0315:
            throw r0     // Catch:{ all -> 0x0499 }
        L_0x0316:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getTypeface r0 = (o.getTypeface) r0     // Catch:{ all -> 0x0499 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x0326:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getTypeface r0 = (o.getTypeface) r0     // Catch:{ all -> 0x0499 }
            r0.length()     // Catch:{ all -> 0x0499 }
            goto L_0x0496
        L_0x0337:
            r8 = 180(0xb4, float:2.52E-43)
            goto L_0x0129
        L_0x033b:
            r8 = 52
            goto L_0x0129
        L_0x033f:
            r8 = 255(0xff, float:3.57E-43)
            goto L_0x0129
        L_0x0343:
            r8 = 87
            goto L_0x0129
        L_0x0347:
            r8 = 212(0xd4, float:2.97E-43)
            goto L_0x0129
        L_0x034b:
            r8 = 252(0xfc, float:3.53E-43)
            goto L_0x0129
        L_0x034f:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            byte[] r5 = getMin     // Catch:{ all -> 0x0397 }
            r7 = 8
            byte r5 = r5[r7]     // Catch:{ all -> 0x0397 }
            byte r5 = (byte) r5     // Catch:{ all -> 0x0397 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0397 }
            r9 = 4114(0x1012, float:5.765E-42)
            byte r7 = r7[r9]     // Catch:{ all -> 0x0397 }
            short r7 = (short) r7     // Catch:{ all -> 0x0397 }
            r9 = 10240(0x2800, float:1.4349E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x0397 }
            java.lang.String r5 = setMax(r5, r7, r9)     // Catch:{ all -> 0x0397 }
            java.lang.Class r5 = java.lang.Class.forName(r5)     // Catch:{ all -> 0x0397 }
            r7 = 60
            byte r7 = (byte) r7     // Catch:{ all -> 0x0397 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0397 }
            r13 = 32
            byte r9 = r9[r13]     // Catch:{ all -> 0x0397 }
            short r9 = (short) r9     // Catch:{ all -> 0x0397 }
            int r13 = length     // Catch:{ all -> 0x0397 }
            r13 = r13 | 4483(0x1183, float:6.282E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0397 }
            java.lang.String r7 = setMax(r7, r9, r13)     // Catch:{ all -> 0x0397 }
            java.lang.reflect.Method r5 = r5.getMethod(r7, r12)     // Catch:{ all -> 0x0397 }
            java.lang.Object r0 = r5.invoke(r0, r12)     // Catch:{ all -> 0x0397 }
            java.lang.Boolean r0 = (java.lang.Boolean) r0     // Catch:{ all -> 0x0397 }
            boolean r0 = r0.booleanValue()     // Catch:{ all -> 0x0397 }
            r1.setMax = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0194
        L_0x0397:
            r0 = move-exception
            java.lang.Throwable r5 = r0.getCause()     // Catch:{ all -> 0x0499 }
            if (r5 == 0) goto L_0x039f
            throw r5     // Catch:{ all -> 0x0499 }
        L_0x039f:
            throw r0     // Catch:{ all -> 0x0499 }
        L_0x03a0:
            r1.getMax(r14)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 145(0x91, float:2.03E-43)
            r8 = 145(0x91, float:2.03E-43)
            goto L_0x0129
        L_0x03ad:
            r8 = 250(0xfa, float:3.5E-43)
            goto L_0x0129
        L_0x03b1:
            r8 = 139(0x8b, float:1.95E-43)
            goto L_0x0129
        L_0x03b5:
            r5 = 8
            r1.getMax(r5)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0499 }
            throw r0     // Catch:{ all -> 0x0499 }
        L_0x03bf:
            return
        L_0x03c0:
            int r0 = invoke     // Catch:{ all -> 0x0499 }
            r1.setMax = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0194
        L_0x03c6:
            r1.setMax = r6     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r5)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            invokeSuspend = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0496
        L_0x03d4:
            r1.getMax(r14)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 176(0xb0, float:2.47E-43)
            r8 = 176(0xb0, float:2.47E-43)
            goto L_0x0129
        L_0x03e1:
            r8 = 125(0x7d, float:1.75E-43)
            goto L_0x0129
        L_0x03e5:
            r8 = 177(0xb1, float:2.48E-43)
            goto L_0x0129
        L_0x03e9:
            r1.getMax(r7)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 195(0xc3, float:2.73E-43)
            r8 = 195(0xc3, float:2.73E-43)
            goto L_0x0129
        L_0x03f6:
            r8 = 61
            goto L_0x0129
        L_0x03fa:
            o.getTypefaceByCat$setMin r0 = new o.getTypefaceByCat$setMin     // Catch:{ all -> 0x0499 }
            r0.<init>()     // Catch:{ all -> 0x0499 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x0403:
            r1.setMax = r13     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getTypefaceByCat$setMin r0 = (o.getTypefaceByCat.setMin) r0     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x0499 }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ all -> 0x0499 }
            r0.setMin = r5     // Catch:{ all -> 0x0499 }
            goto L_0x0496
        L_0x041a:
            r8 = 28
            goto L_0x0129
        L_0x041e:
            r8 = 203(0xcb, float:2.84E-43)
            goto L_0x0129
        L_0x0422:
            r1.getMax(r9)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            r3 = 75
            if (r0 == r3) goto L_0x0430
            r3 = 99
            r8 = 1
            goto L_0x0129
        L_0x0430:
            r0 = 62
            r8 = 62
            goto L_0x0129
        L_0x0436:
            o.getTypefaceByCat r0 = new o.getTypefaceByCat     // Catch:{ all -> 0x0499 }
            r1.setMax = r13     // Catch:{ all -> 0x0499 }
            r1.getMax(r13)     // Catch:{ all -> 0x0499 }
            r1.getMax(r3)     // Catch:{ all -> 0x0499 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0499 }
            o.getTypefaceByCat$setMin r7 = (o.getTypefaceByCat.setMin) r7     // Catch:{ all -> 0x0499 }
            r1.getMax(r5)     // Catch:{ all -> 0x0499 }
            int r5 = r1.setMin     // Catch:{ all -> 0x0499 }
            byte r5 = (byte) r5     // Catch:{ all -> 0x0499 }
            r0.<init>(r7, r5)     // Catch:{ all -> 0x0499 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0499 }
            goto L_0x0155
        L_0x0451:
            r8 = 71
            goto L_0x0129
        L_0x0455:
            r1.getMax(r14)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            if (r0 != 0) goto L_0x0496
            r0 = 248(0xf8, float:3.48E-43)
            r8 = 248(0xf8, float:3.48E-43)
            goto L_0x0129
        L_0x0462:
            r8 = 135(0x87, float:1.89E-43)
            goto L_0x0129
        L_0x0466:
            r1.getMax(r9)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            r3 = 38
            if (r0 == r3) goto L_0x0477
            r3 = 99
            r0 = 253(0xfd, float:3.55E-43)
            r8 = 253(0xfd, float:3.55E-43)
            goto L_0x0129
        L_0x0477:
            r8 = 12
            goto L_0x0129
        L_0x047b:
            r8 = 92
            goto L_0x0129
        L_0x047f:
            r1.getMax(r9)     // Catch:{ all -> 0x0499 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0499 }
            r3 = 41
            if (r0 == r3) goto L_0x0490
            r3 = 64
            r0 = 84
            r8 = 84
            goto L_0x0129
        L_0x0490:
            r0 = 127(0x7f, float:1.78E-43)
            r8 = 127(0x7f, float:1.78E-43)
            goto L_0x0129
        L_0x0496:
            r8 = r10
            goto L_0x0129
        L_0x0499:
            r0 = move-exception
            r7 = 254(0xfe, float:3.56E-43)
            r8 = 8
            if (r10 < r8) goto L_0x04b2
            r9 = 12
            if (r10 > r9) goto L_0x04b2
            r3 = 179(0xb3, float:2.51E-43)
            r3 = 220(0xdc, float:3.08E-43)
            r5 = 8
            r7 = 179(0xb3, float:2.51E-43)
        L_0x04ac:
            r8 = 123(0x7b, float:1.72E-43)
            r15 = 15
            goto L_0x064f
        L_0x04b2:
            byte[] r9 = getMin
            byte r13 = r9[r8]
            byte r8 = (byte) r13
            r13 = 4868(0x1304, float:6.822E-42)
            byte r5 = r9[r13]
            short r5 = (short) r5
            r16 = 15
            byte r9 = r9[r16]
            short r9 = (short) r9
            java.lang.String r5 = setMax(r8, r5, r9)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x04d8
            if (r10 < r3) goto L_0x04d8
            if (r10 > r15) goto L_0x04d8
            r3 = 220(0xdc, float:3.08E-43)
            r5 = 8
            goto L_0x04ac
        L_0x04d8:
            byte[] r3 = getMin
            r5 = 8
            byte r8 = r3[r5]
            byte r5 = (byte) r8
            r8 = 49
            byte r3 = r3[r8]
            short r3 = (short) r3
            r8 = 9600(0x2580, float:1.3452E-41)
            short r8 = (short) r8
            java.lang.String r3 = setMax(r5, r3, r8)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0504
            r3 = 28
            if (r10 < r3) goto L_0x0506
            r5 = 29
            if (r10 > r5) goto L_0x0506
            r3 = 220(0xdc, float:3.08E-43)
            r5 = 8
            r7 = 249(0xf9, float:3.49E-43)
            goto L_0x04ac
        L_0x0504:
            r3 = 28
        L_0x0506:
            byte[] r5 = getMin
            r8 = 8
            byte r9 = r5[r8]
            byte r8 = (byte) r9
            byte r9 = r5[r13]
            short r9 = (short) r9
            r15 = 15
            byte r5 = r5[r15]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r8, r9, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x052a
            r5 = 46
            if (r10 < r5) goto L_0x052c
            if (r10 > r14) goto L_0x052c
            goto L_0x0536
        L_0x052a:
            r5 = 46
        L_0x052c:
            r8 = 119(0x77, float:1.67E-43)
            if (r10 < r8) goto L_0x053e
            r8 = 123(0x7b, float:1.72E-43)
            if (r10 > r8) goto L_0x053e
            r7 = 146(0x92, float:2.05E-43)
        L_0x0536:
            r3 = 220(0xdc, float:3.08E-43)
            r5 = 8
            r8 = 123(0x7b, float:1.72E-43)
            goto L_0x064f
        L_0x053e:
            byte[] r8 = getMin
            r9 = 8
            byte r14 = r8[r9]
            byte r9 = (byte) r14
            r14 = 1156(0x484, float:1.62E-42)
            byte r8 = r8[r14]
            int r8 = -r8
            short r8 = (short) r8
            r14 = 5857(0x16e1, float:8.207E-42)
            short r14 = (short) r14
            java.lang.String r8 = setMax(r9, r8, r14)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x056c
            r8 = 116(0x74, float:1.63E-43)
            if (r10 < r8) goto L_0x056c
            r8 = 123(0x7b, float:1.72E-43)
            if (r10 > r8) goto L_0x056c
        L_0x0564:
            r3 = 220(0xdc, float:3.08E-43)
            r5 = 8
        L_0x0568:
            r7 = 249(0xf9, float:3.49E-43)
            goto L_0x064f
        L_0x056c:
            byte[] r8 = getMin
            r9 = 8
            byte r14 = r8[r9]
            byte r9 = (byte) r14
            r14 = 4116(0x1014, float:5.768E-42)
            byte r8 = r8[r14]
            short r8 = (short) r8
            r14 = 4837(0x12e5, float:6.778E-42)
            short r14 = (short) r14
            java.lang.String r8 = setMax(r9, r8, r14)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x0597
            r8 = 117(0x75, float:1.64E-43)
            if (r10 < r8) goto L_0x0597
            r8 = 123(0x7b, float:1.72E-43)
            if (r10 > r8) goto L_0x0599
        L_0x0591:
            r3 = 220(0xdc, float:3.08E-43)
            r5 = 8
            goto L_0x064f
        L_0x0597:
            r8 = 123(0x7b, float:1.72E-43)
        L_0x0599:
            byte[] r9 = getMin
            r16 = 8
            byte r3 = r9[r16]
            byte r3 = (byte) r3
            r5 = r3 & 227(0xe3, float:3.18E-43)
            short r5 = (short) r5
            byte r9 = r9[r13]
            short r9 = (short) r9
            java.lang.String r3 = setMax(r3, r5, r9)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x05bd
            r3 = 118(0x76, float:1.65E-43)
            if (r10 < r3) goto L_0x05bd
            r3 = 119(0x77, float:1.67E-43)
            if (r10 > r3) goto L_0x05bd
            goto L_0x0564
        L_0x05bd:
            byte[] r3 = getMin
            r5 = 8
            byte r9 = r3[r5]
            byte r5 = (byte) r9
            byte r3 = r3[r13]
            short r3 = (short) r3
            r9 = 10554(0x293a, float:1.479E-41)
            short r9 = (short) r9
            java.lang.String r3 = setMax(r5, r3, r9)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x05e1
            r3 = 180(0xb4, float:2.52E-43)
            if (r10 < r3) goto L_0x05e3
            r5 = 181(0xb5, float:2.54E-43)
            if (r10 > r5) goto L_0x05e3
            goto L_0x0591
        L_0x05e1:
            r3 = 180(0xb4, float:2.52E-43)
        L_0x05e3:
            byte[] r5 = getMin
            r16 = 8
            byte r3 = r5[r16]
            byte r3 = (byte) r3
            r16 = 21
            byte r5 = r5[r16]
            short r5 = (short) r5
            r6 = 10638(0x298e, float:1.4907E-41)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0609
            r3 = 191(0xbf, float:2.68E-43)
            if (r10 < r3) goto L_0x0609
            r3 = 192(0xc0, float:2.69E-43)
            if (r10 > r3) goto L_0x0609
            goto L_0x0591
        L_0x0609:
            byte[] r3 = getMin
            r5 = 8
            byte r6 = r3[r5]
            byte r5 = (byte) r6
            r6 = 4116(0x1014, float:5.768E-42)
            byte r3 = r3[r6]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r5, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x062d
            r3 = 207(0xcf, float:2.9E-43)
            if (r10 < r3) goto L_0x062d
            r3 = 209(0xd1, float:2.93E-43)
            if (r10 > r3) goto L_0x062d
            goto L_0x0591
        L_0x062d:
            byte[] r3 = getMin
            r5 = 8
            byte r6 = r3[r5]
            byte r6 = (byte) r6
            byte r3 = r3[r13]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r6, r3, r9)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x065a
            r3 = 217(0xd9, float:3.04E-43)
            if (r10 < r3) goto L_0x065a
            r3 = 220(0xdc, float:3.08E-43)
            if (r10 > r3) goto L_0x065a
            goto L_0x0568
        L_0x064f:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r8 = r7
            r6 = 1
            goto L_0x0129
        L_0x065a:
            throw r0
        L_0x065b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0663
            throw r1
        L_0x0663:
            goto L_0x0665
        L_0x0664:
            throw r0
        L_0x0665:
            goto L_0x0664
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length(java.lang.String):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ void length(o.onValidateSchema r17, java.lang.String r18) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r2 = r18
            r1.<init>((java.lang.Object) r0, (java.lang.Object) r2)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r3 = 162(0xa2, float:2.27E-43)
            short r3 = (short) r3
            r4 = 4119(0x1017, float:5.772E-42)
            short r5 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r5)
            byte[] r3 = getMin
            r5 = 15
            byte r3 = r3[r5]
            byte r3 = (byte) r3
            short r6 = (short) r3
            r7 = r6 | 4577(0x11e1, float:6.414E-42)
            short r7 = (short) r7
            java.lang.String r3 = setMax(r3, r6, r7)
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ all -> 0x0233 }
            r8 = 0
            r7[r8] = r3     // Catch:{ all -> 0x0233 }
            byte[] r3 = getMin     // Catch:{ all -> 0x0233 }
            r9 = 8
            byte r3 = r3[r9]     // Catch:{ all -> 0x0233 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x0233 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0233 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x0233 }
            short r10 = (short) r10     // Catch:{ all -> 0x0233 }
            r11 = 9395(0x24b3, float:1.3165E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x0233 }
            java.lang.String r3 = setMax(r3, r10, r11)     // Catch:{ all -> 0x0233 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0233 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0233 }
            r12 = 2662(0xa66, float:3.73E-42)
            byte r10 = r10[r12]     // Catch:{ all -> 0x0233 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0233 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0233 }
            r13 = 30
            byte r12 = r12[r13]     // Catch:{ all -> 0x0233 }
            short r12 = (short) r12     // Catch:{ all -> 0x0233 }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0233 }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x0233 }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x0233 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0233 }
            byte r13 = r13[r9]     // Catch:{ all -> 0x0233 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0233 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0233 }
            byte r14 = r14[r6]     // Catch:{ all -> 0x0233 }
            short r14 = (short) r14     // Catch:{ all -> 0x0233 }
            java.lang.String r13 = setMax(r13, r14, r11)     // Catch:{ all -> 0x0233 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0233 }
            r12[r8] = r13     // Catch:{ all -> 0x0233 }
            java.lang.reflect.Method r3 = r3.getMethod(r10, r12)     // Catch:{ all -> 0x0233 }
            java.lang.Object r0 = r3.invoke(r0, r7)     // Catch:{ all -> 0x0233 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0233 }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r7 = 0
        L_0x007f:
            int r10 = r0.length
            if (r7 >= r10) goto L_0x011f
            r10 = r0[r7]
            java.lang.Object[] r12 = new java.lang.Object[r6]     // Catch:{ all -> 0x0116 }
            r12[r8] = r10     // Catch:{ all -> 0x0116 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0116 }
            byte r10 = r10[r9]     // Catch:{ all -> 0x0116 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            byte r13 = r13[r4]     // Catch:{ all -> 0x0116 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            java.lang.String r10 = setMax(r10, r13, r14)     // Catch:{ all -> 0x0116 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0116 }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0116 }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x0116 }
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            r2 = 10257(0x2811, float:1.4373E-41)
            short r2 = (short) r2     // Catch:{ all -> 0x0116 }
            java.lang.String r2 = setMax(r13, r15, r2)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r13 = new java.lang.Class[r6]     // Catch:{ all -> 0x0116 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0116 }
            byte r15 = r15[r9]     // Catch:{ all -> 0x0116 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r5 = r16[r6]     // Catch:{ all -> 0x0116 }
            short r5 = (short) r5     // Catch:{ all -> 0x0116 }
            java.lang.String r5 = setMax(r15, r5, r11)     // Catch:{ all -> 0x0116 }
            java.lang.Class r5 = java.lang.Class.forName(r5)     // Catch:{ all -> 0x0116 }
            r13[r8] = r5     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r2 = r10.getMethod(r2, r13)     // Catch:{ all -> 0x0116 }
            r5 = 0
            java.lang.Object r2 = r2.invoke(r5, r12)     // Catch:{ all -> 0x0116 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010d }
            byte r10 = r10[r9]     // Catch:{ all -> 0x010d }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            byte r12 = r12[r4]     // Catch:{ all -> 0x010d }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            java.lang.String r10 = setMax(r10, r12, r14)     // Catch:{ all -> 0x010d }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            byte r12 = r12[r9]     // Catch:{ all -> 0x010d }
            int r12 = r12 - r6
            byte r12 = (byte) r12     // Catch:{ all -> 0x010d }
            byte[] r13 = getMin     // Catch:{ all -> 0x010d }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010d }
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010d }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r10 = r10.getMethod(r12, r5)     // Catch:{ all -> 0x010d }
            java.lang.Object r2 = r10.invoke(r2, r5)     // Catch:{ all -> 0x010d }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ all -> 0x010d }
            int r2 = r2.intValue()     // Catch:{ all -> 0x010d }
            r3[r7] = r2
            int r7 = r7 + 1
            r2 = 46
            r5 = 15
            goto L_0x007f
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r2 = 18
            r4 = 42
            r5 = 16
            r7 = 21
        L_0x0127:
            int r10 = r8 + 1
            r11 = 2
            r0 = r3[r8]     // Catch:{ all -> 0x0199 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0199 }
            r8 = 47
            switch(r0) {
                case -14: goto L_0x0195;
                case -13: goto L_0x0192;
                case -12: goto L_0x017a;
                case -11: goto L_0x0177;
                case -10: goto L_0x016b;
                case -9: goto L_0x016a;
                case -8: goto L_0x0162;
                case -7: goto L_0x015f;
                case -6: goto L_0x015c;
                case -5: goto L_0x0159;
                case -4: goto L_0x014f;
                case -3: goto L_0x0141;
                case -2: goto L_0x0139;
                case -1: goto L_0x0136;
                default: goto L_0x0135;
            }     // Catch:{ all -> 0x0199 }
        L_0x0135:
            goto L_0x0197
        L_0x0136:
            r8 = 46
            goto L_0x0127
        L_0x0139:
            int r0 = invoke     // Catch:{ all -> 0x0199 }
            r1.setMax = r0     // Catch:{ all -> 0x0199 }
            r1.getMax(r2)     // Catch:{ all -> 0x0199 }
            goto L_0x0197
        L_0x0141:
            r1.setMax = r6     // Catch:{ all -> 0x0199 }
            r1.getMax(r11)     // Catch:{ all -> 0x0199 }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x0199 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0199 }
            invokeSuspend = r0     // Catch:{ all -> 0x0199 }
            goto L_0x0197
        L_0x014f:
            r1.getMax(r8)     // Catch:{ all -> 0x0199 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0199 }
            if (r0 != 0) goto L_0x0197
            r8 = 15
            goto L_0x0127
        L_0x0159:
            r8 = 18
            goto L_0x0127
        L_0x015c:
            r8 = 42
            goto L_0x0127
        L_0x015f:
            r8 = 19
            goto L_0x0127
        L_0x0162:
            r1.getMax(r9)     // Catch:{ all -> 0x0199 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0199 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0199 }
            throw r0     // Catch:{ all -> 0x0199 }
        L_0x016a:
            return
        L_0x016b:
            r1.getMax(r8)     // Catch:{ all -> 0x0199 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0199 }
            if (r0 != 0) goto L_0x0197
            r0 = 41
            r8 = 41
            goto L_0x0127
        L_0x0177:
            r8 = 16
            goto L_0x0127
        L_0x017a:
            r1.setMax = r11     // Catch:{ all -> 0x0199 }
            r1.getMax(r11)     // Catch:{ all -> 0x0199 }
            r0 = 3
            r1.getMax(r0)     // Catch:{ all -> 0x0199 }
            java.lang.Object r8 = r1.isInside     // Catch:{ all -> 0x0199 }
            o.onValidateSchema r8 = (o.onValidateSchema) r8     // Catch:{ all -> 0x0199 }
            r1.getMax(r0)     // Catch:{ all -> 0x0199 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0199 }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x0199 }
            r8.length((java.lang.String) r0)     // Catch:{ all -> 0x0199 }
            goto L_0x0197
        L_0x0192:
            r8 = 21
            goto L_0x0127
        L_0x0195:
            r8 = 1
            goto L_0x0127
        L_0x0197:
            r8 = r10
            goto L_0x0127
        L_0x0199:
            r0 = move-exception
            byte[] r8 = getMin
            byte r12 = r8[r9]
            byte r12 = (byte) r12
            r13 = 4868(0x1304, float:6.822E-42)
            byte r14 = r8[r13]
            short r14 = (short) r14
            r15 = 15
            byte r8 = r8[r15]
            short r8 = (short) r8
            java.lang.String r8 = setMax(r12, r14, r8)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            r12 = 17
            r14 = 45
            if (r8 == 0) goto L_0x01c2
            if (r10 < r6) goto L_0x01c2
            if (r10 > r11) goto L_0x01c2
        L_0x01bf:
            r8 = 45
            goto L_0x0229
        L_0x01c2:
            byte[] r8 = getMin
            byte r11 = r8[r9]
            byte r11 = (byte) r11
            byte r8 = r8[r13]
            short r8 = (short) r8
            r13 = 10554(0x293a, float:1.479E-41)
            short r13 = (short) r13
            java.lang.String r8 = setMax(r11, r8, r13)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x01e4
            r8 = 10
            if (r10 < r8) goto L_0x01e4
            if (r10 > r5) goto L_0x01e4
        L_0x01e1:
            r8 = 17
            goto L_0x0229
        L_0x01e4:
            byte[] r8 = getMin
            byte r11 = r8[r9]
            byte r11 = (byte) r11
            r13 = 4869(0x1305, float:6.823E-42)
            byte r8 = r8[r13]
            short r8 = (short) r8
            r13 = 1139(0x473, float:1.596E-42)
            short r13 = (short) r13
            java.lang.String r8 = setMax(r11, r8, r13)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x0206
            if (r10 < r7) goto L_0x0206
            r8 = 22
            if (r10 > r8) goto L_0x0206
            goto L_0x01bf
        L_0x0206:
            byte[] r8 = getMin
            byte r11 = r8[r9]
            byte r11 = (byte) r11
            r13 = 1156(0x484, float:1.62E-42)
            byte r8 = r8[r13]
            int r8 = -r8
            short r8 = (short) r8
            r13 = 5857(0x16e1, float:8.207E-42)
            short r13 = (short) r13
            java.lang.String r8 = setMax(r11, r8, r13)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x0232
            r8 = 36
            if (r10 < r8) goto L_0x0232
            if (r10 > r4) goto L_0x0232
            goto L_0x01e1
        L_0x0229:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            goto L_0x0127
        L_0x0232:
            throw r0
        L_0x0233:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x023b
            throw r1
        L_0x023b:
            goto L_0x023d
        L_0x023c:
            throw r0
        L_0x023d:
            goto L_0x023c
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length(o.onValidateSchema, java.lang.String):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v38, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v44, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v45, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v46, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v47, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v66, resolved type: java.lang.Object} */
    /* JADX WARNING: type inference failed for: r14v28 */
    /* JADX WARNING: type inference failed for: r0v21, types: [int, boolean] */
    /* JADX WARNING: type inference failed for: r14v31 */
    /* JADX WARNING: type inference failed for: r14v84 */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x0389, code lost:
        r0 = 260;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x03cf, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x03d2, code lost:
        r10 = r14;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:174:0x0432, code lost:
        r10 = r14;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:223:0x04e7, code lost:
        r0 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:237:0x052a, code lost:
        if (r12 <= 51) goto L_0x052c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:304:0x0695, code lost:
        if (r12 <= 246) goto L_0x05b8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x0178, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x01e5, code lost:
        r0 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x02b9, code lost:
        r0 = r12;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:231:0x04fb  */
    /* JADX WARNING: Removed duplicated region for block: B:232:0x0507  */
    /* JADX WARNING: Removed duplicated region for block: B:250:0x0562  */
    /* JADX WARNING: Removed duplicated region for block: B:251:0x056c  */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x02a3 A[Catch:{ all -> 0x0299, all -> 0x0442 }] */
    /* JADX WARNING: Removed duplicated region for block: B:88:0x02a4 A[Catch:{ all -> 0x0299, all -> 0x0442 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final boolean length(id.dana.domain.model.rpc.response.LoginResponse r20) {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r0 = r20
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = 1000(0x3e8, float:1.401E-42)
            short r3 = (short) r3
            r4 = 1437(0x59d, float:2.014E-42)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r4 = (short) r3
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x06d5 }
            r6 = 0
            r5[r6] = r3     // Catch:{ all -> 0x06d5 }
            byte[] r3 = getMin     // Catch:{ all -> 0x06d5 }
            r7 = 8
            byte r3 = r3[r7]     // Catch:{ all -> 0x06d5 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x06d5 }
            byte[] r8 = getMin     // Catch:{ all -> 0x06d5 }
            byte r8 = r8[r4]     // Catch:{ all -> 0x06d5 }
            short r8 = (short) r8     // Catch:{ all -> 0x06d5 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x06d5 }
            java.lang.String r3 = setMax(r3, r8, r9)     // Catch:{ all -> 0x06d5 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x06d5 }
            byte[] r8 = getMin     // Catch:{ all -> 0x06d5 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x06d5 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x06d5 }
            byte[] r10 = getMin     // Catch:{ all -> 0x06d5 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x06d5 }
            short r10 = (short) r10     // Catch:{ all -> 0x06d5 }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x06d5 }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x06d5 }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x06d5 }
            byte[] r11 = getMin     // Catch:{ all -> 0x06d5 }
            byte r11 = r11[r7]     // Catch:{ all -> 0x06d5 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x06d5 }
            byte[] r12 = getMin     // Catch:{ all -> 0x06d5 }
            byte r12 = r12[r4]     // Catch:{ all -> 0x06d5 }
            short r12 = (short) r12     // Catch:{ all -> 0x06d5 }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x06d5 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x06d5 }
            r10[r6] = r11     // Catch:{ all -> 0x06d5 }
            java.lang.reflect.Method r3 = r3.getMethod(r8, r10)     // Catch:{ all -> 0x06d5 }
            java.lang.Object r0 = r3.invoke(r0, r5)     // Catch:{ all -> 0x06d5 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x06d5 }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r5 = 0
        L_0x007f:
            int r8 = r0.length
            r10 = 0
            r11 = 32
            if (r5 >= r8) goto L_0x0125
            r8 = r0[r5]
            java.lang.Object[] r12 = new java.lang.Object[r4]     // Catch:{ all -> 0x011c }
            r12[r6] = r8     // Catch:{ all -> 0x011c }
            byte[] r8 = getMin     // Catch:{ all -> 0x011c }
            byte r8 = r8[r7]     // Catch:{ all -> 0x011c }
            byte r8 = (byte) r8     // Catch:{ all -> 0x011c }
            byte[] r13 = getMin     // Catch:{ all -> 0x011c }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x011c }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x011c }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x011c }
            java.lang.String r8 = setMax(r8, r13, r14)     // Catch:{ all -> 0x011c }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x011c }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x011c }
            byte[] r15 = getMin     // Catch:{ all -> 0x011c }
            byte r11 = r15[r11]     // Catch:{ all -> 0x011c }
            short r11 = (short) r11     // Catch:{ all -> 0x011c }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x011c }
            java.lang.String r11 = setMax(r13, r11, r15)     // Catch:{ all -> 0x011c }
            java.lang.Class[] r13 = new java.lang.Class[r4]     // Catch:{ all -> 0x011c }
            byte[] r15 = getMin     // Catch:{ all -> 0x011c }
            byte r15 = r15[r7]     // Catch:{ all -> 0x011c }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011c }
            byte[] r16 = getMin     // Catch:{ all -> 0x011c }
            byte r7 = r16[r4]     // Catch:{ all -> 0x011c }
            short r7 = (short) r7     // Catch:{ all -> 0x011c }
            java.lang.String r7 = setMax(r15, r7, r9)     // Catch:{ all -> 0x011c }
            java.lang.Class r7 = java.lang.Class.forName(r7)     // Catch:{ all -> 0x011c }
            r13[r6] = r7     // Catch:{ all -> 0x011c }
            java.lang.reflect.Method r7 = r8.getMethod(r11, r13)     // Catch:{ all -> 0x011c }
            java.lang.Object r7 = r7.invoke(r10, r12)     // Catch:{ all -> 0x011c }
            byte[] r8 = getMin     // Catch:{ all -> 0x0113 }
            r11 = 8
            byte r8 = r8[r11]     // Catch:{ all -> 0x0113 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0113 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0113 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x0113 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0113 }
            java.lang.String r8 = setMax(r8, r11, r14)     // Catch:{ all -> 0x0113 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0113 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0113 }
            r12 = 8
            byte r11 = r11[r12]     // Catch:{ all -> 0x0113 }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x0113 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0113 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0113 }
            short r12 = (short) r12     // Catch:{ all -> 0x0113 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0113 }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x0113 }
            java.lang.reflect.Method r8 = r8.getMethod(r11, r10)     // Catch:{ all -> 0x0113 }
            java.lang.Object r7 = r8.invoke(r7, r10)     // Catch:{ all -> 0x0113 }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ all -> 0x0113 }
            int r7 = r7.intValue()     // Catch:{ all -> 0x0113 }
            r3[r5] = r7
            int r5 = r5 + 1
            r7 = 8
            goto L_0x007f
        L_0x0113:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011b
            throw r1
        L_0x011b:
            throw r0
        L_0x011c:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0124
            throw r1
        L_0x0124:
            throw r0
        L_0x0125:
            r7 = 5
            r9 = 3
            r0 = 0
        L_0x0128:
            int r12 = r0 + 1
            r0 = r3[r0]     // Catch:{ all -> 0x04ec }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x04ec }
            r14 = 43
            r15 = 268(0x10c, float:3.76E-43)
            r5 = 4
            r8 = 47
            r13 = 18
            r10 = 2
            r18 = 213(0xd5, float:2.98E-43)
            r11 = 9
            switch(r0) {
                case -86: goto L_0x04e1;
                case -85: goto L_0x04db;
                case -84: goto L_0x04ca;
                case -83: goto L_0x04c4;
                case -82: goto L_0x04be;
                case -81: goto L_0x04b1;
                case -80: goto L_0x049a;
                case -79: goto L_0x048a;
                case -78: goto L_0x0483;
                case -77: goto L_0x047c;
                case -76: goto L_0x046e;
                case -75: goto L_0x045d;
                case -74: goto L_0x0446;
                case -73: goto L_0x0435;
                case -72: goto L_0x042f;
                case -71: goto L_0x042b;
                case -70: goto L_0x0427;
                case -69: goto L_0x041c;
                case -68: goto L_0x040a;
                case -67: goto L_0x0406;
                case -66: goto L_0x0402;
                case -65: goto L_0x03f7;
                case -64: goto L_0x03f3;
                case -63: goto L_0x03e6;
                case -62: goto L_0x03d7;
                case -61: goto L_0x03ca;
                case -60: goto L_0x03c5;
                case -59: goto L_0x03c0;
                case -58: goto L_0x03b7;
                case -57: goto L_0x03a3;
                case -56: goto L_0x039e;
                case -55: goto L_0x0399;
                case -54: goto L_0x038d;
                case -53: goto L_0x037c;
                case -52: goto L_0x036c;
                case -51: goto L_0x0368;
                case -50: goto L_0x0363;
                case -49: goto L_0x0350;
                case -48: goto L_0x0345;
                case -47: goto L_0x0340;
                case -46: goto L_0x033b;
                case -45: goto L_0x0336;
                case -44: goto L_0x0331;
                case -43: goto L_0x0323;
                case -42: goto L_0x030b;
                case -41: goto L_0x0306;
                case -40: goto L_0x0301;
                case -39: goto L_0x02f5;
                case -38: goto L_0x02f2;
                case -37: goto L_0x02ef;
                case -36: goto L_0x02ea;
                case -35: goto L_0x02de;
                case -34: goto L_0x02d9;
                case -33: goto L_0x02d4;
                case -32: goto L_0x02c6;
                case -31: goto L_0x02c1;
                case -30: goto L_0x02bc;
                case -29: goto L_0x02ab;
                case -28: goto L_0x022e;
                case -27: goto L_0x021f;
                case -26: goto L_0x021b;
                case -25: goto L_0x0217;
                case -24: goto L_0x020c;
                case -23: goto L_0x01fd;
                case -22: goto L_0x01f4;
                case -21: goto L_0x01f0;
                case -20: goto L_0x01ec;
                case -19: goto L_0x01e8;
                case -18: goto L_0x01da;
                case -17: goto L_0x01d6;
                case -16: goto L_0x01d2;
                case -15: goto L_0x01ca;
                case -14: goto L_0x01c6;
                case -13: goto L_0x01b9;
                case -12: goto L_0x01a6;
                case -11: goto L_0x01a2;
                case -10: goto L_0x019e;
                case -9: goto L_0x019a;
                case -8: goto L_0x0196;
                case -7: goto L_0x0181;
                case -6: goto L_0x017c;
                case -5: goto L_0x0166;
                case -4: goto L_0x0152;
                case -3: goto L_0x014e;
                case -2: goto L_0x014a;
                case -1: goto L_0x0146;
                default: goto L_0x0141;
            }
        L_0x0141:
            r5 = 32
            r10 = 0
            goto L_0x04e7
        L_0x0146:
            r0 = 172(0xac, float:2.41E-43)
            goto L_0x0369
        L_0x014a:
            r0 = 249(0xf9, float:3.49E-43)
            goto L_0x0369
        L_0x014e:
            r0 = 223(0xdf, float:3.12E-43)
            goto L_0x0369
        L_0x0152:
            r1.getMax(r11)     // Catch:{ all -> 0x02a5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a5 }
            r5 = 10
            if (r0 == r5) goto L_0x0162
            if (r0 == r14) goto L_0x015e
            goto L_0x0162
        L_0x015e:
            r0 = 18
            goto L_0x0369
        L_0x0162:
            r0 = 213(0xd5, float:2.98E-43)
            goto L_0x0369
        L_0x0166:
            r1.setMax = r4     // Catch:{ all -> 0x02a5 }
            r1.getMax(r10)     // Catch:{ all -> 0x02a5 }
            r1.getMax(r9)     // Catch:{ all -> 0x02a5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a5 }
            id.dana.domain.model.rpc.response.LoginResponse r0 = (id.dana.domain.model.rpc.response.LoginResponse) r0     // Catch:{ all -> 0x02a5 }
            id.dana.domain.model.rpc.UserInfo r0 = r0.getUserInfo()     // Catch:{ all -> 0x02a5 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a5 }
        L_0x0178:
            r1.getMax(r5)     // Catch:{ all -> 0x02a5 }
            goto L_0x0141
        L_0x017c:
            java.lang.String r0 = "loginResponse.userInfo"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a5 }
            goto L_0x0178
        L_0x0181:
            r1.setMax = r10     // Catch:{ all -> 0x02a5 }
            r1.getMax(r10)     // Catch:{ all -> 0x02a5 }
            r1.getMax(r9)     // Catch:{ all -> 0x02a5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a5 }
            r1.getMax(r9)     // Catch:{ all -> 0x02a5 }
            java.lang.Object r5 = r1.isInside     // Catch:{ all -> 0x02a5 }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ all -> 0x02a5 }
            kotlin.jvm.internal.Intrinsics.checkNotNullExpressionValue(r0, r5)     // Catch:{ all -> 0x02a5 }
            goto L_0x0141
        L_0x0196:
            r0 = 111(0x6f, float:1.56E-43)
            goto L_0x0369
        L_0x019a:
            r0 = 169(0xa9, float:2.37E-43)
            goto L_0x0369
        L_0x019e:
            r0 = 135(0x87, float:1.89E-43)
            goto L_0x0369
        L_0x01a2:
            r0 = 128(0x80, float:1.794E-43)
            goto L_0x0369
        L_0x01a6:
            r1.setMax = r4     // Catch:{ all -> 0x02a5 }
            r1.getMax(r10)     // Catch:{ all -> 0x02a5 }
            r1.getMax(r9)     // Catch:{ all -> 0x02a5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a5 }
            id.dana.domain.model.rpc.UserInfo r0 = (id.dana.domain.model.rpc.UserInfo) r0     // Catch:{ all -> 0x02a5 }
            java.lang.String r0 = r0.getUserId()     // Catch:{ all -> 0x02a5 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a5 }
            goto L_0x0178
        L_0x01b9:
            r1.setMax = r4     // Catch:{ all -> 0x02a5 }
            r1.getMax(r10)     // Catch:{ all -> 0x02a5 }
            r1.getMax(r9)     // Catch:{ all -> 0x02a5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a5 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a5 }
            goto L_0x0178
        L_0x01c6:
            r0 = 50
            goto L_0x0369
        L_0x01ca:
            r0 = 286(0x11e, float:4.01E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x02a5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a5 }
            return r0
        L_0x01d2:
            r0 = 216(0xd8, float:3.03E-43)
            goto L_0x0369
        L_0x01d6:
            r0 = 133(0x85, float:1.86E-43)
            goto L_0x0369
        L_0x01da:
            r1.getMax(r15)     // Catch:{ all -> 0x02a5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a5 }
            if (r0 != 0) goto L_0x01e5
            r0 = 36
            goto L_0x0369
        L_0x01e5:
            r0 = r12
            goto L_0x0369
        L_0x01e8:
            r0 = 138(0x8a, float:1.93E-43)
            goto L_0x0369
        L_0x01ec:
            r0 = 28
            goto L_0x0369
        L_0x01f0:
            r0 = 167(0xa7, float:2.34E-43)
            goto L_0x0369
        L_0x01f4:
            int r0 = invoke     // Catch:{ all -> 0x02a5 }
            r1.setMax = r0     // Catch:{ all -> 0x02a5 }
            r1.getMax(r13)     // Catch:{ all -> 0x02a5 }
            goto L_0x0141
        L_0x01fd:
            r1.setMax = r4     // Catch:{ all -> 0x02a5 }
            r1.getMax(r10)     // Catch:{ all -> 0x02a5 }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x02a5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a5 }
            invokeSuspend = r0     // Catch:{ all -> 0x02a5 }
            goto L_0x0141
        L_0x020c:
            r1.getMax(r8)     // Catch:{ all -> 0x02a5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a5 }
            if (r0 != 0) goto L_0x01e5
            r0 = 66
            goto L_0x0369
        L_0x0217:
            r0 = 246(0xf6, float:3.45E-43)
            goto L_0x0369
        L_0x021b:
            r0 = 37
            goto L_0x0369
        L_0x021f:
            r1.getMax(r11)     // Catch:{ all -> 0x02a5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a5 }
            if (r0 == 0) goto L_0x0162
            if (r0 == r4) goto L_0x022a
            goto L_0x0162
        L_0x022a:
            r0 = 191(0xbf, float:2.68E-43)
            goto L_0x0369
        L_0x022e:
            r1.setMax = r4     // Catch:{ all -> 0x02a5 }
            r1.getMax(r10)     // Catch:{ all -> 0x02a5 }
            r1.getMax(r9)     // Catch:{ all -> 0x02a5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a5 }
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x029b }
            r5[r6] = r0     // Catch:{ all -> 0x029b }
            byte[] r0 = getMin     // Catch:{ all -> 0x029b }
            r8 = 6214(0x1846, float:8.708E-42)
            byte r0 = r0[r8]     // Catch:{ all -> 0x029b }
            byte r0 = (byte) r0     // Catch:{ all -> 0x029b }
            byte[] r8 = getMin     // Catch:{ all -> 0x029b }
            byte r8 = r8[r7]     // Catch:{ all -> 0x029b }
            short r8 = (short) r8     // Catch:{ all -> 0x029b }
            int r10 = length     // Catch:{ all -> 0x029b }
            r10 = r10 | 10496(0x2900, float:1.4708E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x029b }
            java.lang.String r0 = setMax(r0, r8, r10)     // Catch:{ all -> 0x029b }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x029b }
            byte[] r8 = getMin     // Catch:{ all -> 0x029b }
            r10 = 8
            byte r8 = r8[r10]     // Catch:{ all -> 0x029b }
            int r8 = r8 - r4
            byte r8 = (byte) r8     // Catch:{ all -> 0x029b }
            byte[] r10 = getMin     // Catch:{ all -> 0x029b }
            r11 = 32
            byte r10 = r10[r11]     // Catch:{ all -> 0x029b }
            short r10 = (short) r10     // Catch:{ all -> 0x029b }
            r11 = 10539(0x292b, float:1.4768E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x029b }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x029b }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x029b }
            byte[] r11 = getMin     // Catch:{ all -> 0x029b }
            r14 = 8
            byte r11 = r11[r14]     // Catch:{ all -> 0x029b }
            byte r11 = (byte) r11     // Catch:{ all -> 0x029b }
            byte[] r14 = getMin     // Catch:{ all -> 0x029b }
            byte r14 = r14[r7]     // Catch:{ all -> 0x029b }
            short r14 = (short) r14     // Catch:{ all -> 0x029b }
            r15 = 4098(0x1002, float:5.743E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x029b }
            java.lang.String r11 = setMax(r11, r14, r15)     // Catch:{ all -> 0x029b }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x029b }
            r10[r6] = r11     // Catch:{ all -> 0x029b }
            java.lang.reflect.Method r0 = r0.getMethod(r8, r10)     // Catch:{ all -> 0x029b }
            r14 = 0
            java.lang.Object r0 = r0.invoke(r14, r5)     // Catch:{ all -> 0x0299 }
            java.lang.Boolean r0 = (java.lang.Boolean) r0     // Catch:{ all -> 0x0299 }
            boolean r0 = r0.booleanValue()     // Catch:{ all -> 0x0299 }
            r1.setMax = r0     // Catch:{ all -> 0x0442 }
            goto L_0x03cf
        L_0x0299:
            r0 = move-exception
            goto L_0x029d
        L_0x029b:
            r0 = move-exception
            r14 = 0
        L_0x029d:
            java.lang.Throwable r5 = r0.getCause()     // Catch:{ all -> 0x0442 }
            if (r5 == 0) goto L_0x02a4
            throw r5     // Catch:{ all -> 0x0442 }
        L_0x02a4:
            throw r0     // Catch:{ all -> 0x0442 }
        L_0x02a5:
            r0 = move-exception
            r5 = 32
            r10 = 0
            goto L_0x04ef
        L_0x02ab:
            r0 = 34
            r14 = 0
            r1.getMax(r0)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 75
            goto L_0x0432
        L_0x02b9:
            r0 = r12
            goto L_0x0432
        L_0x02bc:
            r14 = 0
            r0 = 178(0xb2, float:2.5E-43)
            goto L_0x0432
        L_0x02c1:
            r14 = 0
            r0 = 211(0xd3, float:2.96E-43)
            goto L_0x0432
        L_0x02c6:
            r0 = 34
            r14 = 0
            r1.getMax(r0)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 79
            goto L_0x0432
        L_0x02d4:
            r14 = 0
            r0 = 41
            goto L_0x0432
        L_0x02d9:
            r14 = 0
            r0 = 16
            goto L_0x0432
        L_0x02de:
            r14 = 0
            r1.getMax(r8)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 104(0x68, float:1.46E-43)
            goto L_0x0432
        L_0x02ea:
            r14 = 0
            r0 = 117(0x75, float:1.64E-43)
            goto L_0x0432
        L_0x02ef:
            r0 = 1
            goto L_0x0369
        L_0x02f2:
            r0 = 5
            goto L_0x0369
        L_0x02f5:
            r14 = 0
            r1.getMax(r15)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 110(0x6e, float:1.54E-43)
            goto L_0x0432
        L_0x0301:
            r14 = 0
            r0 = 12
            goto L_0x0432
        L_0x0306:
            r14 = 0
            r0 = 39
            goto L_0x0432
        L_0x030b:
            r14 = 0
            r1.setMax = r4     // Catch:{ all -> 0x0442 }
            r1.getMax(r10)     // Catch:{ all -> 0x0442 }
            r1.getMax(r9)     // Catch:{ all -> 0x0442 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0442 }
            id.dana.domain.model.rpc.UserInfo r0 = (id.dana.domain.model.rpc.UserInfo) r0     // Catch:{ all -> 0x0442 }
            java.lang.String r0 = r0.getNickname()     // Catch:{ all -> 0x0442 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0442 }
            r1.getMax(r5)     // Catch:{ all -> 0x0442 }
            goto L_0x03d2
        L_0x0323:
            r0 = 34
            r14 = 0
            r1.getMax(r0)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 116(0x74, float:1.63E-43)
            goto L_0x0432
        L_0x0331:
            r14 = 0
            r0 = 130(0x82, float:1.82E-43)
            goto L_0x0432
        L_0x0336:
            r14 = 0
            r0 = 258(0x102, float:3.62E-43)
            goto L_0x0432
        L_0x033b:
            r14 = 0
            r0 = 217(0xd9, float:3.04E-43)
            goto L_0x0432
        L_0x0340:
            r14 = 0
            r0 = 248(0xf8, float:3.48E-43)
            goto L_0x0432
        L_0x0345:
            r5 = 8
            r14 = 0
            r1.getMax(r5)     // Catch:{ all -> 0x0442 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0442 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0442 }
            throw r0     // Catch:{ all -> 0x0442 }
        L_0x0350:
            r14 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 == 0) goto L_0x035f
            if (r0 == r4) goto L_0x035b
            goto L_0x035f
        L_0x035b:
            r0 = 213(0xd5, float:2.98E-43)
            goto L_0x0432
        L_0x035f:
            r0 = 191(0xbf, float:2.68E-43)
            goto L_0x0432
        L_0x0363:
            r14 = 0
            r0 = 215(0xd7, float:3.01E-43)
            goto L_0x0432
        L_0x0368:
            r0 = 3
        L_0x0369:
            r10 = 0
            goto L_0x04e8
        L_0x036c:
            r14 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 == 0) goto L_0x0378
            r0 = 141(0x8d, float:1.98E-43)
            goto L_0x0432
        L_0x0378:
            r0 = 218(0xda, float:3.05E-43)
            goto L_0x0432
        L_0x037c:
            r14 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            r5 = 22
            if (r0 == r5) goto L_0x0389
            r5 = 45
            goto L_0x035b
        L_0x0389:
            r0 = 260(0x104, float:3.64E-43)
            goto L_0x0432
        L_0x038d:
            r14 = 0
            r1.getMax(r8)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 166(0xa6, float:2.33E-43)
            goto L_0x0432
        L_0x0399:
            r14 = 0
            r0 = 177(0xb1, float:2.48E-43)
            goto L_0x0432
        L_0x039e:
            r14 = 0
            r0 = 26
            goto L_0x0432
        L_0x03a3:
            r14 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            r5 = 36
            if (r0 == r5) goto L_0x03b3
            r5 = 48
            r0 = 68
            goto L_0x0432
        L_0x03b3:
            r0 = 76
            goto L_0x0432
        L_0x03b7:
            r14 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 == 0) goto L_0x0389
            goto L_0x035b
        L_0x03c0:
            r14 = 0
            r0 = 80
            goto L_0x0432
        L_0x03c5:
            r14 = 0
            r0 = 67
            goto L_0x0432
        L_0x03ca:
            r14 = 0
            int r0 = invokeSuspend     // Catch:{ all -> 0x0442 }
            r1.setMax = r0     // Catch:{ all -> 0x0442 }
        L_0x03cf:
            r1.getMax(r13)     // Catch:{ all -> 0x0442 }
        L_0x03d2:
            r10 = r14
            r5 = 32
            goto L_0x04e7
        L_0x03d7:
            r14 = 0
            r1.setMax = r4     // Catch:{ all -> 0x0442 }
            r1.getMax(r10)     // Catch:{ all -> 0x0442 }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            invoke = r0     // Catch:{ all -> 0x0442 }
            goto L_0x03d2
        L_0x03e6:
            r0 = 34
            r14 = 0
            r1.getMax(r0)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 190(0xbe, float:2.66E-43)
            goto L_0x0432
        L_0x03f3:
            r14 = 0
            r0 = 132(0x84, float:1.85E-43)
            goto L_0x0432
        L_0x03f7:
            r14 = 0
            r1.getMax(r8)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 202(0xca, float:2.83E-43)
            goto L_0x0432
        L_0x0402:
            r14 = 0
            r0 = 125(0x7d, float:1.75E-43)
            goto L_0x0432
        L_0x0406:
            r14 = 0
            r0 = 121(0x79, float:1.7E-43)
            goto L_0x0432
        L_0x040a:
            r14 = 0
            r1.setMax = r4     // Catch:{ all -> 0x0442 }
            r1.getMax(r10)     // Catch:{ all -> 0x0442 }
            r1.getMax(r9)     // Catch:{ all -> 0x0442 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0442 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x0442 }
            r1.setMax = r0     // Catch:{ all -> 0x0442 }
            goto L_0x03cf
        L_0x041c:
            r14 = 0
            r1.getMax(r15)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 != 0) goto L_0x02b9
            r0 = 210(0xd2, float:2.94E-43)
            goto L_0x0432
        L_0x0427:
            r14 = 0
            r0 = 136(0x88, float:1.9E-43)
            goto L_0x0432
        L_0x042b:
            r14 = 0
            r0 = 105(0x69, float:1.47E-43)
            goto L_0x0432
        L_0x042f:
            r14 = 0
            r0 = 144(0x90, float:2.02E-43)
        L_0x0432:
            r10 = r14
            goto L_0x04e8
        L_0x0435:
            r14 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x0442 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0442 }
            if (r0 == r8) goto L_0x035b
            r5 = 60
            r0 = 181(0xb5, float:2.54E-43)
            goto L_0x0432
        L_0x0442:
            r0 = move-exception
            r10 = r14
            goto L_0x04ed
        L_0x0446:
            r14 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x0457 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0457 }
            r5 = 32
            if (r0 == r5) goto L_0x0454
            r8 = 72
            if (r0 == r8) goto L_0x035b
        L_0x0454:
            r0 = 18
            goto L_0x0432
        L_0x0457:
            r0 = move-exception
            r5 = 32
            r10 = r14
            goto L_0x04ef
        L_0x045d:
            r5 = 32
            r10 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x04d9 }
            int r0 = r1.setMin     // Catch:{ all -> 0x04d9 }
            if (r0 == 0) goto L_0x046b
            r0 = 43
            goto L_0x04e8
        L_0x046b:
            r0 = 6
            goto L_0x04e8
        L_0x046e:
            r5 = 32
            r10 = 0
            r1.getMax(r8)     // Catch:{ all -> 0x04d9 }
            int r0 = r1.setMin     // Catch:{ all -> 0x04d9 }
            if (r0 != 0) goto L_0x04e7
            r0 = 245(0xf5, float:3.43E-43)
            goto L_0x04e8
        L_0x047c:
            r5 = 32
            r10 = 0
            r0 = 119(0x77, float:1.67E-43)
            goto L_0x04e8
        L_0x0483:
            r5 = 32
            r10 = 0
            r0 = 30
            goto L_0x04e8
        L_0x048a:
            r5 = 32
            r10 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x04d9 }
            int r0 = r1.setMin     // Catch:{ all -> 0x04d9 }
            if (r0 == 0) goto L_0x0497
            r0 = 32
            goto L_0x04e8
        L_0x0497:
            r0 = 203(0xcb, float:2.84E-43)
            goto L_0x04e8
        L_0x049a:
            r5 = 32
            r10 = 0
            r1.getMax(r11)     // Catch:{ all -> 0x04d9 }
            int r0 = r1.setMin     // Catch:{ all -> 0x04d9 }
            r8 = 16
            if (r0 == r8) goto L_0x04ae
            r8 = 46
            if (r0 == r8) goto L_0x04ab
            goto L_0x04ae
        L_0x04ab:
            r0 = 250(0xfa, float:3.5E-43)
            goto L_0x04e8
        L_0x04ae:
            r0 = 107(0x6b, float:1.5E-43)
            goto L_0x04e8
        L_0x04b1:
            r5 = 32
            r10 = 0
            r1.getMax(r15)     // Catch:{ all -> 0x04d9 }
            int r0 = r1.setMin     // Catch:{ all -> 0x04d9 }
            if (r0 != 0) goto L_0x04e7
            r0 = 255(0xff, float:3.57E-43)
            goto L_0x04e8
        L_0x04be:
            r5 = 32
            r10 = 0
            r0 = 14
            goto L_0x04e8
        L_0x04c4:
            r5 = 32
            r10 = 0
            r0 = 170(0xaa, float:2.38E-43)
            goto L_0x04e8
        L_0x04ca:
            r0 = 34
            r5 = 32
            r10 = 0
            r1.getMax(r0)     // Catch:{ all -> 0x04d9 }
            int r0 = r1.setMin     // Catch:{ all -> 0x04d9 }
            if (r0 != 0) goto L_0x04e7
            r0 = 282(0x11a, float:3.95E-43)
            goto L_0x04e8
        L_0x04d9:
            r0 = move-exception
            goto L_0x04ef
        L_0x04db:
            r5 = 32
            r10 = 0
            r0 = 123(0x7b, float:1.72E-43)
            goto L_0x04e8
        L_0x04e1:
            r5 = 32
            r10 = 0
            r0 = 256(0x100, float:3.59E-43)
            goto L_0x04e8
        L_0x04e7:
            r0 = r12
        L_0x04e8:
            r11 = 32
            goto L_0x0128
        L_0x04ec:
            r0 = move-exception
        L_0x04ed:
            r5 = 32
        L_0x04ef:
            r8 = 48
            r11 = 140(0x8c, float:1.96E-43)
            r13 = 168(0xa8, float:2.35E-43)
            if (r12 < r8) goto L_0x0507
            r8 = 50
            if (r12 > r8) goto L_0x0507
            r8 = 143(0x8f, float:2.0E-43)
            r4 = 223(0xdf, float:3.12E-43)
            r8 = 50
            r11 = 8
            r13 = 143(0x8f, float:2.0E-43)
            goto L_0x06c8
        L_0x0507:
            byte[] r8 = getMin
            r14 = 8
            byte r15 = r8[r14]
            byte r14 = (byte) r15
            r15 = 21
            byte r8 = r8[r15]
            short r8 = (short) r8
            r15 = 10638(0x298e, float:1.4907E-41)
            short r15 = (short) r15
            java.lang.String r8 = setMax(r14, r8, r15)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x0532
            r8 = 50
            if (r12 < r8) goto L_0x0534
            r14 = 51
            if (r12 > r14) goto L_0x0534
        L_0x052c:
            r4 = 223(0xdf, float:3.12E-43)
            r11 = 8
            goto L_0x06c8
        L_0x0532:
            r8 = 50
        L_0x0534:
            byte[] r14 = getMin
            r17 = 8
            byte r4 = r14[r17]
            byte r4 = (byte) r4
            r17 = 4116(0x1014, float:5.768E-42)
            byte r14 = r14[r17]
            short r14 = (short) r14
            r5 = 4837(0x12e5, float:6.778E-42)
            short r5 = (short) r5
            java.lang.String r4 = setMax(r4, r14, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x055a
            r4 = 61
            if (r12 < r4) goto L_0x055a
            r4 = 67
            if (r12 > r4) goto L_0x055a
            goto L_0x052c
        L_0x055a:
            r4 = 69
            if (r12 < r4) goto L_0x056c
            r4 = 76
            if (r12 > r4) goto L_0x056c
            r4 = 180(0xb4, float:2.52E-43)
            r4 = 223(0xdf, float:3.12E-43)
            r11 = 8
            r13 = 180(0xb4, float:2.52E-43)
            goto L_0x06c8
        L_0x056c:
            byte[] r4 = getMin
            r14 = 8
            byte r6 = r4[r14]
            byte r6 = (byte) r6
            r14 = 13
            byte r4 = r4[r14]
            short r4 = (short) r4
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r4 = setMax(r6, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0594
            r4 = 76
            if (r12 < r4) goto L_0x0594
            r4 = 77
            if (r12 > r4) goto L_0x0594
            goto L_0x052c
        L_0x0594:
            byte[] r4 = getMin
            r6 = 8
            byte r14 = r4[r6]
            byte r6 = (byte) r14
            r14 = 21
            byte r4 = r4[r14]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r6, r4, r15)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x05be
            r4 = 111(0x6f, float:1.56E-43)
            if (r12 < r4) goto L_0x05be
            r4 = 112(0x70, float:1.57E-43)
            if (r12 > r4) goto L_0x05be
        L_0x05b6:
            r4 = 223(0xdf, float:3.12E-43)
        L_0x05b8:
            r11 = 8
            r13 = 140(0x8c, float:1.96E-43)
            goto L_0x06c8
        L_0x05be:
            byte[] r4 = getMin
            r6 = 8
            byte r14 = r4[r6]
            byte r6 = (byte) r14
            byte r4 = r4[r17]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r6, r4, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x05df
            r4 = 112(0x70, float:1.57E-43)
            if (r12 < r4) goto L_0x05df
            r4 = 113(0x71, float:1.58E-43)
            if (r12 > r4) goto L_0x05df
            goto L_0x05b6
        L_0x05df:
            byte[] r4 = getMin
            r6 = 8
            byte r14 = r4[r6]
            byte r6 = (byte) r14
            r14 = 4868(0x1304, float:6.822E-42)
            byte r4 = r4[r14]
            short r4 = (short) r4
            r14 = 10554(0x293a, float:1.479E-41)
            short r14 = (short) r14
            java.lang.String r4 = setMax(r6, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0605
            r4 = 113(0x71, float:1.58E-43)
            if (r12 < r4) goto L_0x0605
            r4 = 114(0x72, float:1.6E-43)
            if (r12 > r4) goto L_0x0605
            goto L_0x05b6
        L_0x0605:
            byte[] r4 = getMin
            r6 = 8
            byte r14 = r4[r6]
            byte r6 = (byte) r14
            r14 = 4869(0x1305, float:6.823E-42)
            byte r4 = r4[r14]
            short r4 = (short) r4
            r14 = 1139(0x473, float:1.596E-42)
            short r14 = (short) r14
            java.lang.String r4 = setMax(r6, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x062c
            r4 = 181(0xb5, float:2.54E-43)
            if (r12 < r4) goto L_0x062c
            r4 = 182(0xb6, float:2.55E-43)
            if (r12 > r4) goto L_0x062c
            goto L_0x052c
        L_0x062c:
            byte[] r4 = getMin
            r6 = 8
            byte r14 = r4[r6]
            byte r6 = (byte) r14
            r14 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r14]
            short r4 = (short) r4
            r14 = 10605(0x296d, float:1.4861E-41)
            short r14 = (short) r14
            java.lang.String r4 = setMax(r6, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0653
            r4 = 186(0xba, float:2.6E-43)
            if (r12 < r4) goto L_0x0653
            r4 = 191(0xbf, float:2.68E-43)
            if (r12 > r4) goto L_0x0653
            goto L_0x052c
        L_0x0653:
            r4 = 205(0xcd, float:2.87E-43)
            if (r12 < r4) goto L_0x0664
            r4 = 211(0xd3, float:2.96E-43)
            if (r12 > r4) goto L_0x0664
            r4 = 127(0x7f, float:1.78E-43)
            r4 = 223(0xdf, float:3.12E-43)
            r11 = 8
            r13 = 127(0x7f, float:1.78E-43)
            goto L_0x06c8
        L_0x0664:
            r4 = 219(0xdb, float:3.07E-43)
            if (r12 < r4) goto L_0x0675
            r4 = 223(0xdf, float:3.12E-43)
            if (r12 > r4) goto L_0x0675
            r4 = 134(0x86, float:1.88E-43)
            r4 = 223(0xdf, float:3.12E-43)
            r11 = 8
            r13 = 134(0x86, float:1.88E-43)
            goto L_0x06c8
        L_0x0675:
            byte[] r4 = getMin
            r6 = 8
            byte r15 = r4[r6]
            byte r6 = (byte) r15
            r15 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r15]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r6, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0699
            r4 = 223(0xdf, float:3.12E-43)
            if (r12 < r4) goto L_0x069b
            r6 = 246(0xf6, float:3.45E-43)
            if (r12 > r6) goto L_0x069b
            goto L_0x05b8
        L_0x0699:
            r4 = 223(0xdf, float:3.12E-43)
        L_0x069b:
            byte[] r6 = getMin
            r11 = 8
            byte r14 = r6[r11]
            byte r14 = (byte) r14
            byte r6 = r6[r17]
            short r6 = (short) r6
            java.lang.String r5 = setMax(r14, r6, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x06bc
            r5 = 241(0xf1, float:3.38E-43)
            if (r12 < r5) goto L_0x06bc
            r5 = 242(0xf2, float:3.39E-43)
            if (r12 > r5) goto L_0x06bc
            goto L_0x06c8
        L_0x06bc:
            r5 = 251(0xfb, float:3.52E-43)
            if (r12 < r5) goto L_0x06d4
            r5 = 256(0x100, float:3.59E-43)
            if (r12 > r5) goto L_0x06d4
            r5 = 129(0x81, float:1.81E-43)
            r13 = 129(0x81, float:1.81E-43)
        L_0x06c8:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r13
            r4 = 1
            r6 = 0
            goto L_0x04e8
        L_0x06d4:
            throw r0
        L_0x06d5:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x06dd
            throw r1
        L_0x06dd:
            goto L_0x06df
        L_0x06de:
            throw r0
        L_0x06df:
            goto L_0x06de
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length(id.dana.domain.model.rpc.response.LoginResponse):boolean");
    }

    /* JADX WARNING: type inference failed for: r0v12, types: [int, boolean] */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ boolean length(o.onValidateSchema r17, id.dana.domain.model.rpc.response.LoginResponse r18) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r2 = r18
            r1.<init>((java.lang.Object) r0, (java.lang.Object) r2)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r2 = r0 | 166(0xa6, float:2.33E-43)
            short r2 = (short) r2
            r3 = 4871(0x1307, float:6.826E-42)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r4 = (short) r2
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r2 = setMax(r2, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x0279 }
            r6 = 0
            r5[r6] = r2     // Catch:{ all -> 0x0279 }
            byte[] r2 = getMin     // Catch:{ all -> 0x0279 }
            r7 = 8
            byte r2 = r2[r7]     // Catch:{ all -> 0x0279 }
            byte r2 = (byte) r2     // Catch:{ all -> 0x0279 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0279 }
            byte r8 = r8[r4]     // Catch:{ all -> 0x0279 }
            short r8 = (short) r8     // Catch:{ all -> 0x0279 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x0279 }
            java.lang.String r2 = setMax(r2, r8, r9)     // Catch:{ all -> 0x0279 }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x0279 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0279 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x0279 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0279 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0279 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x0279 }
            short r10 = (short) r10     // Catch:{ all -> 0x0279 }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x0279 }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x0279 }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x0279 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0279 }
            byte r11 = r11[r7]     // Catch:{ all -> 0x0279 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0279 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0279 }
            byte r12 = r12[r4]     // Catch:{ all -> 0x0279 }
            short r12 = (short) r12     // Catch:{ all -> 0x0279 }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x0279 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0279 }
            r10[r6] = r11     // Catch:{ all -> 0x0279 }
            java.lang.reflect.Method r2 = r2.getMethod(r8, r10)     // Catch:{ all -> 0x0279 }
            java.lang.Object r0 = r2.invoke(r0, r5)     // Catch:{ all -> 0x0279 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0279 }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r5 = 0
        L_0x007f:
            int r8 = r0.length
            r11 = 32
            if (r5 >= r8) goto L_0x011f
            r8 = r0[r5]
            java.lang.Object[] r12 = new java.lang.Object[r4]     // Catch:{ all -> 0x0116 }
            r12[r6] = r8     // Catch:{ all -> 0x0116 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0116 }
            byte r8 = r8[r7]     // Catch:{ all -> 0x0116 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0116 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r8 = setMax(r8, r13, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0116 }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r11 = r16[r11]     // Catch:{ all -> 0x0116 }
            short r11 = (short) r11     // Catch:{ all -> 0x0116 }
            r3 = 10257(0x2811, float:1.4373E-41)
            short r3 = (short) r3     // Catch:{ all -> 0x0116 }
            java.lang.String r3 = setMax(r13, r11, r3)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r11 = new java.lang.Class[r4]     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            byte r13 = r13[r7]     // Catch:{ all -> 0x0116 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r10 = r16[r4]     // Catch:{ all -> 0x0116 }
            short r10 = (short) r10     // Catch:{ all -> 0x0116 }
            java.lang.String r10 = setMax(r13, r10, r9)     // Catch:{ all -> 0x0116 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0116 }
            r11[r6] = r10     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r3 = r8.getMethod(r3, r11)     // Catch:{ all -> 0x0116 }
            r8 = 0
            java.lang.Object r3 = r3.invoke(r8, r12)     // Catch:{ all -> 0x0116 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010d }
            byte r10 = r10[r7]     // Catch:{ all -> 0x010d }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r14]     // Catch:{ all -> 0x010d }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010d }
            java.lang.String r10 = setMax(r10, r11, r15)     // Catch:{ all -> 0x010d }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010d }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r7]     // Catch:{ all -> 0x010d }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r8)     // Catch:{ all -> 0x010d }
            java.lang.Object r3 = r10.invoke(r3, r8)     // Catch:{ all -> 0x010d }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x010d }
            int r3 = r3.intValue()     // Catch:{ all -> 0x010d }
            r2[r5] = r3
            int r5 = r5 + 1
            r3 = 15
            goto L_0x007f
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r3 = 44
            r5 = 47
            r8 = 16
            r9 = 5
            r10 = 49
        L_0x0128:
            int r12 = r6 + 1
            r0 = r2[r6]     // Catch:{ all -> 0x01d4 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01d4 }
            r6 = 7
            r13 = 18
            r14 = 2
            switch(r0) {
                case -18: goto L_0x01be;
                case -17: goto L_0x01bb;
                case -16: goto L_0x01b7;
                case -15: goto L_0x01b3;
                case -14: goto L_0x0198;
                case -13: goto L_0x0195;
                case -12: goto L_0x0192;
                case -11: goto L_0x0184;
                case -10: goto L_0x0177;
                case -9: goto L_0x0172;
                case -8: goto L_0x0170;
                case -7: goto L_0x0166;
                case -6: goto L_0x0159;
                case -5: goto L_0x0151;
                case -4: goto L_0x014e;
                case -3: goto L_0x0146;
                case -2: goto L_0x013e;
                case -1: goto L_0x013b;
                default: goto L_0x0137;
            }     // Catch:{ all -> 0x01d4 }
        L_0x0137:
            r6 = 73
            goto L_0x01d1
        L_0x013b:
            r6 = 44
            goto L_0x0128
        L_0x013e:
            r1.getMax(r7)     // Catch:{ all -> 0x01d4 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01d4 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01d4 }
            throw r0     // Catch:{ all -> 0x01d4 }
        L_0x0146:
            r0 = 286(0x11e, float:4.01E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x01d4 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d4 }
            return r0
        L_0x014e:
            r6 = 32
            goto L_0x0128
        L_0x0151:
            int r0 = invoke     // Catch:{ all -> 0x01d4 }
            r1.setMax = r0     // Catch:{ all -> 0x01d4 }
        L_0x0155:
            r1.getMax(r13)     // Catch:{ all -> 0x01d4 }
            goto L_0x0137
        L_0x0159:
            r1.setMax = r4     // Catch:{ all -> 0x01d4 }
            r1.getMax(r14)     // Catch:{ all -> 0x01d4 }
            r1.getMax(r6)     // Catch:{ all -> 0x01d4 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d4 }
            invokeSuspend = r0     // Catch:{ all -> 0x01d4 }
            goto L_0x0137
        L_0x0166:
            r1.getMax(r5)     // Catch:{ all -> 0x01d4 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d4 }
            if (r0 != 0) goto L_0x01d1
            r6 = 15
            goto L_0x0128
        L_0x0170:
            r6 = 4
            goto L_0x0128
        L_0x0172:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01d4 }
            r1.setMax = r0     // Catch:{ all -> 0x01d4 }
            goto L_0x0155
        L_0x0177:
            r1.setMax = r4     // Catch:{ all -> 0x01d4 }
            r1.getMax(r14)     // Catch:{ all -> 0x01d4 }
            r1.getMax(r6)     // Catch:{ all -> 0x01d4 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d4 }
            invoke = r0     // Catch:{ all -> 0x01d4 }
            goto L_0x0137
        L_0x0184:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01d4 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d4 }
            if (r0 != 0) goto L_0x01d1
            r0 = 31
            r6 = 31
            goto L_0x0128
        L_0x0192:
            r6 = 47
            goto L_0x0128
        L_0x0195:
            r6 = 37
            goto L_0x0128
        L_0x0198:
            r1.setMax = r14     // Catch:{ all -> 0x01d4 }
            r1.getMax(r14)     // Catch:{ all -> 0x01d4 }
            r0 = 3
            r1.getMax(r0)     // Catch:{ all -> 0x01d4 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x01d4 }
            o.onValidateSchema r6 = (o.onValidateSchema) r6     // Catch:{ all -> 0x01d4 }
            r1.getMax(r0)     // Catch:{ all -> 0x01d4 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01d4 }
            id.dana.domain.model.rpc.response.LoginResponse r0 = (id.dana.domain.model.rpc.response.LoginResponse) r0     // Catch:{ all -> 0x01d4 }
            boolean r0 = r6.length((id.dana.domain.model.rpc.response.LoginResponse) r0)     // Catch:{ all -> 0x01d4 }
            r1.setMax = r0     // Catch:{ all -> 0x01d4 }
            goto L_0x0155
        L_0x01b3:
            r6 = 16
            goto L_0x0128
        L_0x01b7:
            r6 = 49
            goto L_0x0128
        L_0x01bb:
            r6 = 5
            goto L_0x0128
        L_0x01be:
            r0 = 9
            r1.getMax(r0)     // Catch:{ all -> 0x01d4 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d4 }
            r6 = 67
            r12 = 40
            if (r0 == r6) goto L_0x0137
            r6 = 73
            if (r0 == r6) goto L_0x01d0
            goto L_0x01d1
        L_0x01d0:
            r12 = 2
        L_0x01d1:
            r6 = r12
            goto L_0x0128
        L_0x01d4:
            r0 = move-exception
            r6 = 73
            byte[] r13 = getMin
            byte r14 = r13[r7]
            byte r14 = (byte) r14
            r15 = 13
            byte r13 = r13[r15]
            short r13 = (short) r13
            int r15 = length
            r15 = r15 | 7588(0x1da4, float:1.0633E-41)
            short r15 = (short) r15
            java.lang.String r13 = setMax(r14, r13, r15)
            java.lang.Class r13 = java.lang.Class.forName(r13)
            boolean r13 = r13.isInstance(r0)
            r14 = 36
            if (r13 == 0) goto L_0x01fe
            if (r12 < r9) goto L_0x01fe
            r13 = 6
            if (r12 > r13) goto L_0x01fe
        L_0x01fb:
            r14 = 1
            goto L_0x026f
        L_0x01fe:
            byte[] r13 = getMin
            byte r15 = r13[r7]
            byte r15 = (byte) r15
            r16 = 7392(0x1ce0, float:1.0358E-41)
            byte r13 = r13[r16]
            short r13 = (short) r13
            r4 = 10605(0x296d, float:1.4861E-41)
            short r4 = (short) r4
            java.lang.String r4 = setMax(r15, r13, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0222
            r4 = 11
            if (r12 < r4) goto L_0x0222
            r4 = 12
            if (r12 > r4) goto L_0x0222
            goto L_0x01fb
        L_0x0222:
            byte[] r4 = getMin
            byte r13 = r4[r7]
            byte r13 = (byte) r13
            r15 = 1156(0x484, float:1.62E-42)
            byte r4 = r4[r15]
            int r4 = -r4
            short r4 = (short) r4
            r15 = 5857(0x16e1, float:8.207E-42)
            short r15 = (short) r15
            java.lang.String r4 = setMax(r13, r4, r15)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0245
            if (r12 < r8) goto L_0x0245
            r4 = 17
            if (r12 > r4) goto L_0x0245
            goto L_0x026f
        L_0x0245:
            byte[] r4 = getMin
            byte r13 = r4[r7]
            byte r13 = (byte) r13
            byte r4 = r4[r10]
            short r4 = (short) r4
            r15 = 9600(0x2580, float:1.3452E-41)
            short r15 = (short) r15
            java.lang.String r4 = setMax(r13, r4, r15)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0265
            r4 = 27
            if (r12 < r4) goto L_0x0265
            if (r12 > r11) goto L_0x0265
            goto L_0x026f
        L_0x0265:
            r4 = 41
            if (r12 < r4) goto L_0x0278
            if (r12 > r3) goto L_0x0278
            r4 = 39
            r14 = 39
        L_0x026f:
            r1.IsOverlapping = r0
            r1.getMax(r10)
            r6 = r14
            r4 = 1
            goto L_0x0128
        L_0x0278:
            throw r0
        L_0x0279:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0281
            throw r1
        L_0x0281:
            goto L_0x0283
        L_0x0282:
            throw r0
        L_0x0283:
            goto L_0x0282
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length(o.onValidateSchema, id.dana.domain.model.rpc.response.LoginResponse):boolean");
    }

    /* JADX WARNING: type inference failed for: r0v13, types: [int, boolean] */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x0235, code lost:
        if (r10 <= 30) goto L_0x01f0;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ boolean length(o.onValidateSchema r18, o.getPagePerfKey r19) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r18
            r2 = r19
            r1.<init>((java.lang.Object) r0, (java.lang.Object) r2)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r3 = 232(0xe8, float:3.25E-43)
            short r3 = (short) r3
            r4 = 9163(0x23cb, float:1.284E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x028d }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x028d }
            byte[] r3 = getMin     // Catch:{ all -> 0x028d }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x028d }
            byte r3 = (byte) r3     // Catch:{ all -> 0x028d }
            byte[] r9 = getMin     // Catch:{ all -> 0x028d }
            byte r9 = r9[r5]     // Catch:{ all -> 0x028d }
            short r9 = (short) r9     // Catch:{ all -> 0x028d }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x028d }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x028d }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x028d }
            byte[] r9 = getMin     // Catch:{ all -> 0x028d }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x028d }
            byte r9 = (byte) r9     // Catch:{ all -> 0x028d }
            byte[] r11 = getMin     // Catch:{ all -> 0x028d }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x028d }
            short r11 = (short) r11     // Catch:{ all -> 0x028d }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x028d }
            java.lang.String r9 = setMax(r9, r11, r13)     // Catch:{ all -> 0x028d }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x028d }
            byte[] r13 = getMin     // Catch:{ all -> 0x028d }
            byte r13 = r13[r8]     // Catch:{ all -> 0x028d }
            byte r13 = (byte) r13     // Catch:{ all -> 0x028d }
            byte[] r14 = getMin     // Catch:{ all -> 0x028d }
            byte r14 = r14[r5]     // Catch:{ all -> 0x028d }
            short r14 = (short) r14     // Catch:{ all -> 0x028d }
            java.lang.String r13 = setMax(r13, r14, r10)     // Catch:{ all -> 0x028d }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x028d }
            r11[r7] = r13     // Catch:{ all -> 0x028d }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x028d }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x028d }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x028d }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x007f:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x0123
            r9 = r0[r6]
            java.lang.Object[] r11 = new java.lang.Object[r5]     // Catch:{ all -> 0x011a }
            r11[r7] = r9     // Catch:{ all -> 0x011a }
            byte[] r9 = getMin     // Catch:{ all -> 0x011a }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011a }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011a }
            byte[] r13 = getMin     // Catch:{ all -> 0x011a }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x011a }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x011a }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x011a }
            java.lang.String r9 = setMax(r9, r13, r15)     // Catch:{ all -> 0x011a }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011a }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x011a }
            byte[] r16 = getMin     // Catch:{ all -> 0x011a }
            r17 = 32
            byte r2 = r16[r17]     // Catch:{ all -> 0x011a }
            short r2 = (short) r2     // Catch:{ all -> 0x011a }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x011a }
            java.lang.String r2 = setMax(r13, r2, r4)     // Catch:{ all -> 0x011a }
            java.lang.Class[] r4 = new java.lang.Class[r5]     // Catch:{ all -> 0x011a }
            byte[] r13 = getMin     // Catch:{ all -> 0x011a }
            byte r13 = r13[r8]     // Catch:{ all -> 0x011a }
            byte r13 = (byte) r13     // Catch:{ all -> 0x011a }
            byte[] r16 = getMin     // Catch:{ all -> 0x011a }
            byte r12 = r16[r5]     // Catch:{ all -> 0x011a }
            short r12 = (short) r12     // Catch:{ all -> 0x011a }
            java.lang.String r12 = setMax(r13, r12, r10)     // Catch:{ all -> 0x011a }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x011a }
            r4[r7] = r12     // Catch:{ all -> 0x011a }
            java.lang.reflect.Method r2 = r9.getMethod(r2, r4)     // Catch:{ all -> 0x011a }
            r4 = 0
            java.lang.Object r2 = r2.invoke(r4, r11)     // Catch:{ all -> 0x011a }
            byte[] r9 = getMin     // Catch:{ all -> 0x0111 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0111 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0111 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0111 }
            byte r11 = r11[r14]     // Catch:{ all -> 0x0111 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0111 }
            java.lang.String r9 = setMax(r9, r11, r15)     // Catch:{ all -> 0x0111 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0111 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0111 }
            byte r11 = r11[r8]     // Catch:{ all -> 0x0111 }
            int r11 = r11 - r5
            byte r11 = (byte) r11     // Catch:{ all -> 0x0111 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0111 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0111 }
            short r12 = (short) r12     // Catch:{ all -> 0x0111 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0111 }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x0111 }
            java.lang.reflect.Method r9 = r9.getMethod(r11, r4)     // Catch:{ all -> 0x0111 }
            java.lang.Object r2 = r9.invoke(r2, r4)     // Catch:{ all -> 0x0111 }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ all -> 0x0111 }
            int r2 = r2.intValue()     // Catch:{ all -> 0x0111 }
            r3[r6] = r2
            int r6 = r6 + 1
            r2 = 46
            r4 = 15
            r12 = 30
            goto L_0x007f
        L_0x0111:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0119
            throw r1
        L_0x0119:
            throw r0
        L_0x011a:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0122
            throw r1
        L_0x0122:
            throw r0
        L_0x0123:
            r2 = 13
            r4 = 35
            r6 = 47
            r9 = 7
        L_0x012a:
            int r10 = r7 + 1
            r11 = 3
            r0 = r3[r7]     // Catch:{ all -> 0x01e5 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01e5 }
            r7 = 18
            r12 = 2
            switch(r0) {
                case -19: goto L_0x01de;
                case -18: goto L_0x01da;
                case -17: goto L_0x01cd;
                case -16: goto L_0x01c0;
                case -15: goto L_0x01bb;
                case -14: goto L_0x01a9;
                case -13: goto L_0x01a1;
                case -12: goto L_0x019e;
                case -11: goto L_0x019b;
                case -10: goto L_0x0198;
                case -9: goto L_0x018c;
                case -8: goto L_0x017f;
                case -7: goto L_0x017a;
                case -6: goto L_0x0172;
                case -5: goto L_0x016f;
                case -4: goto L_0x016c;
                case -3: goto L_0x015b;
                case -2: goto L_0x013d;
                case -1: goto L_0x013b;
                default: goto L_0x0139;
            }     // Catch:{ all -> 0x01e5 }
        L_0x0139:
            goto L_0x01e2
        L_0x013b:
            r7 = 7
            goto L_0x012a
        L_0x013d:
            r1.setMax = r12     // Catch:{ all -> 0x01e5 }
            r1.getMax(r12)     // Catch:{ all -> 0x01e5 }
            r1.getMax(r11)     // Catch:{ all -> 0x01e5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01e5 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01e5 }
            r1.getMax(r11)     // Catch:{ all -> 0x01e5 }
            java.lang.Object r12 = r1.isInside     // Catch:{ all -> 0x01e5 }
            o.getPagePerfKey r12 = (o.getPagePerfKey) r12     // Catch:{ all -> 0x01e5 }
            boolean r0 = r0.getMax((o.getPagePerfKey) r12)     // Catch:{ all -> 0x01e5 }
            r1.setMax = r0     // Catch:{ all -> 0x01e5 }
        L_0x0156:
            r1.getMax(r7)     // Catch:{ all -> 0x01e5 }
            goto L_0x01e2
        L_0x015b:
            r1.setMax = r5     // Catch:{ all -> 0x01e5 }
            r1.getMax(r12)     // Catch:{ all -> 0x01e5 }
            r1.getMax(r11)     // Catch:{ all -> 0x01e5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01e5 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x01e5 }
            r1.setMax = r0     // Catch:{ all -> 0x01e5 }
            goto L_0x0156
        L_0x016c:
            r7 = 13
            goto L_0x012a
        L_0x016f:
            r7 = 47
            goto L_0x012a
        L_0x0172:
            r1.getMax(r8)     // Catch:{ all -> 0x01e5 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01e5 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01e5 }
            throw r0     // Catch:{ all -> 0x01e5 }
        L_0x017a:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01e5 }
            r1.setMax = r0     // Catch:{ all -> 0x01e5 }
            goto L_0x0156
        L_0x017f:
            r1.setMax = r5     // Catch:{ all -> 0x01e5 }
            r1.getMax(r12)     // Catch:{ all -> 0x01e5 }
            r1.getMax(r9)     // Catch:{ all -> 0x01e5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e5 }
            invoke = r0     // Catch:{ all -> 0x01e5 }
            goto L_0x01e2
        L_0x018c:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01e5 }
            int r7 = r1.setMin     // Catch:{ all -> 0x01e5 }
            if (r7 != 0) goto L_0x01e2
            r7 = 34
            goto L_0x012a
        L_0x0198:
            r7 = 40
            goto L_0x012a
        L_0x019b:
            r7 = 43
            goto L_0x012a
        L_0x019e:
            r7 = 46
            goto L_0x012a
        L_0x01a1:
            r0 = 286(0x11e, float:4.01E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x01e5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e5 }
            return r0
        L_0x01a9:
            r0 = 9
            r1.getMax(r0)     // Catch:{ all -> 0x01e5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e5 }
            r7 = 37
            if (r0 == 0) goto L_0x012a
            if (r0 == r5) goto L_0x01b8
            goto L_0x012a
        L_0x01b8:
            r7 = 1
            goto L_0x012a
        L_0x01bb:
            int r0 = invoke     // Catch:{ all -> 0x01e5 }
            r1.setMax = r0     // Catch:{ all -> 0x01e5 }
            goto L_0x0156
        L_0x01c0:
            r1.setMax = r5     // Catch:{ all -> 0x01e5 }
            r1.getMax(r12)     // Catch:{ all -> 0x01e5 }
            r1.getMax(r9)     // Catch:{ all -> 0x01e5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e5 }
            invokeSuspend = r0     // Catch:{ all -> 0x01e5 }
            goto L_0x01e2
        L_0x01cd:
            r1.getMax(r6)     // Catch:{ all -> 0x01e5 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01e5 }
            if (r0 != 0) goto L_0x01e2
            r0 = 68
            r7 = 68
            goto L_0x012a
        L_0x01da:
            r7 = 35
            goto L_0x012a
        L_0x01de:
            r7 = 41
            goto L_0x012a
        L_0x01e2:
            r7 = r10
            goto L_0x012a
        L_0x01e5:
            r0 = move-exception
            r7 = 11
            if (r10 < r11) goto L_0x01f4
            if (r10 > r9) goto L_0x01f4
            r7 = 45
        L_0x01ee:
            r11 = 30
        L_0x01f0:
            r15 = 15
            goto L_0x0283
        L_0x01f4:
            byte[] r11 = getMin
            byte r12 = r11[r8]
            byte r12 = (byte) r12
            r13 = 21
            byte r11 = r11[r13]
            short r11 = (short) r11
            r13 = 10638(0x298e, float:1.4907E-41)
            short r13 = (short) r13
            java.lang.String r11 = setMax(r12, r11, r13)
            java.lang.Class r11 = java.lang.Class.forName(r11)
            boolean r11 = r11.isInstance(r0)
            if (r11 == 0) goto L_0x0214
            if (r10 < r2) goto L_0x0214
            if (r10 > r4) goto L_0x0214
            goto L_0x01ee
        L_0x0214:
            byte[] r11 = getMin
            byte r12 = r11[r8]
            byte r12 = (byte) r12
            r13 = 7392(0x1ce0, float:1.0358E-41)
            byte r11 = r11[r13]
            short r11 = (short) r11
            r13 = 10605(0x296d, float:1.4861E-41)
            short r13 = (short) r13
            java.lang.String r11 = setMax(r12, r11, r13)
            java.lang.Class r11 = java.lang.Class.forName(r11)
            boolean r11 = r11.isInstance(r0)
            if (r11 == 0) goto L_0x0238
            r11 = 29
            if (r10 < r11) goto L_0x0238
            r11 = 30
            if (r10 > r11) goto L_0x023a
            goto L_0x01f0
        L_0x0238:
            r11 = 30
        L_0x023a:
            byte[] r12 = getMin
            byte r13 = r12[r8]
            byte r13 = (byte) r13
            r14 = 4116(0x1014, float:5.768E-42)
            byte r12 = r12[r14]
            short r12 = (short) r12
            r14 = 4837(0x12e5, float:6.778E-42)
            short r14 = (short) r14
            java.lang.String r12 = setMax(r13, r12, r14)
            java.lang.Class r12 = java.lang.Class.forName(r12)
            boolean r12 = r12.isInstance(r0)
            if (r12 == 0) goto L_0x025e
            if (r10 < r6) goto L_0x025e
            r12 = 69
            if (r10 > r12) goto L_0x025e
            r7 = 12
            goto L_0x01f0
        L_0x025e:
            byte[] r12 = getMin
            byte r13 = r12[r8]
            byte r13 = (byte) r13
            r14 = 4868(0x1304, float:6.822E-42)
            byte r14 = r12[r14]
            short r14 = (short) r14
            r15 = 15
            byte r12 = r12[r15]
            short r12 = (short) r12
            java.lang.String r12 = setMax(r13, r14, r12)
            java.lang.Class r12 = java.lang.Class.forName(r12)
            boolean r12 = r12.isInstance(r0)
            if (r12 == 0) goto L_0x028c
            r12 = 64
            if (r10 < r12) goto L_0x028c
            r12 = 65
            if (r10 > r12) goto L_0x028c
        L_0x0283:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            goto L_0x012a
        L_0x028c:
            throw r0
        L_0x028d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0295
            throw r1
        L_0x0295:
            goto L_0x0297
        L_0x0296:
            throw r0
        L_0x0297:
            goto L_0x0296
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length(o.onValidateSchema, o.getPagePerfKey):boolean");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ android.content.Context setMax(o.onValidateSchema r17) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r1.<init>(r0)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r2 = r0 | 114(0x72, float:1.6E-43)
            short r2 = (short) r2
            r3 = 778(0x30a, float:1.09E-42)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r3 = (short) r2
            r4 = r3 | 4577(0x11e1, float:6.414E-42)
            short r4 = (short) r4
            java.lang.String r2 = setMax(r2, r3, r4)
            r3 = 1
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ all -> 0x0237 }
            r5 = 0
            r4[r5] = r2     // Catch:{ all -> 0x0237 }
            byte[] r2 = getMin     // Catch:{ all -> 0x0237 }
            r6 = 8
            byte r2 = r2[r6]     // Catch:{ all -> 0x0237 }
            byte r2 = (byte) r2     // Catch:{ all -> 0x0237 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0237 }
            byte r7 = r7[r3]     // Catch:{ all -> 0x0237 }
            short r7 = (short) r7     // Catch:{ all -> 0x0237 }
            r8 = 9395(0x24b3, float:1.3165E-41)
            short r8 = (short) r8     // Catch:{ all -> 0x0237 }
            java.lang.String r2 = setMax(r2, r7, r8)     // Catch:{ all -> 0x0237 }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x0237 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0237 }
            r9 = 2662(0xa66, float:3.73E-42)
            byte r7 = r7[r9]     // Catch:{ all -> 0x0237 }
            byte r7 = (byte) r7     // Catch:{ all -> 0x0237 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0237 }
            r10 = 30
            byte r9 = r9[r10]     // Catch:{ all -> 0x0237 }
            short r9 = (short) r9     // Catch:{ all -> 0x0237 }
            r10 = 1177(0x499, float:1.65E-42)
            short r10 = (short) r10     // Catch:{ all -> 0x0237 }
            java.lang.String r7 = setMax(r7, r9, r10)     // Catch:{ all -> 0x0237 }
            java.lang.Class[] r9 = new java.lang.Class[r3]     // Catch:{ all -> 0x0237 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0237 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x0237 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0237 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0237 }
            byte r11 = r11[r3]     // Catch:{ all -> 0x0237 }
            short r11 = (short) r11     // Catch:{ all -> 0x0237 }
            java.lang.String r10 = setMax(r10, r11, r8)     // Catch:{ all -> 0x0237 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0237 }
            r9[r5] = r10     // Catch:{ all -> 0x0237 }
            java.lang.reflect.Method r2 = r2.getMethod(r7, r9)     // Catch:{ all -> 0x0237 }
            java.lang.Object r0 = r2.invoke(r0, r4)     // Catch:{ all -> 0x0237 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0237 }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r4 = 0
        L_0x007d:
            int r7 = r0.length
            r9 = 32
            if (r4 >= r7) goto L_0x011b
            r7 = r0[r4]
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ all -> 0x0112 }
            r10[r5] = r7     // Catch:{ all -> 0x0112 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0112 }
            byte r7 = r7[r6]     // Catch:{ all -> 0x0112 }
            byte r7 = (byte) r7     // Catch:{ all -> 0x0112 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0112 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x0112 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0112 }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0112 }
            java.lang.String r7 = setMax(r7, r11, r13)     // Catch:{ all -> 0x0112 }
            java.lang.Class r7 = java.lang.Class.forName(r7)     // Catch:{ all -> 0x0112 }
            r11 = 74
            byte r11 = (byte) r11     // Catch:{ all -> 0x0112 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0112 }
            byte r9 = r14[r9]     // Catch:{ all -> 0x0112 }
            short r9 = (short) r9     // Catch:{ all -> 0x0112 }
            r14 = 10257(0x2811, float:1.4373E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0112 }
            java.lang.String r9 = setMax(r11, r9, r14)     // Catch:{ all -> 0x0112 }
            java.lang.Class[] r11 = new java.lang.Class[r3]     // Catch:{ all -> 0x0112 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0112 }
            byte r14 = r14[r6]     // Catch:{ all -> 0x0112 }
            byte r14 = (byte) r14     // Catch:{ all -> 0x0112 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0112 }
            byte r15 = r15[r3]     // Catch:{ all -> 0x0112 }
            short r15 = (short) r15     // Catch:{ all -> 0x0112 }
            java.lang.String r14 = setMax(r14, r15, r8)     // Catch:{ all -> 0x0112 }
            java.lang.Class r14 = java.lang.Class.forName(r14)     // Catch:{ all -> 0x0112 }
            r11[r5] = r14     // Catch:{ all -> 0x0112 }
            java.lang.reflect.Method r7 = r7.getMethod(r9, r11)     // Catch:{ all -> 0x0112 }
            r9 = 0
            java.lang.Object r7 = r7.invoke(r9, r10)     // Catch:{ all -> 0x0112 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0109 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x0109 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0109 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0109 }
            byte r11 = r11[r12]     // Catch:{ all -> 0x0109 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0109 }
            java.lang.String r10 = setMax(r10, r11, r13)     // Catch:{ all -> 0x0109 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0109 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0109 }
            byte r11 = r11[r6]     // Catch:{ all -> 0x0109 }
            int r11 = r11 - r3
            byte r11 = (byte) r11     // Catch:{ all -> 0x0109 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0109 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0109 }
            short r12 = (short) r12     // Catch:{ all -> 0x0109 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0109 }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x0109 }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r9)     // Catch:{ all -> 0x0109 }
            java.lang.Object r7 = r10.invoke(r7, r9)     // Catch:{ all -> 0x0109 }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ all -> 0x0109 }
            int r7 = r7.intValue()     // Catch:{ all -> 0x0109 }
            r2[r4] = r7
            int r4 = r4 + 1
            goto L_0x007d
        L_0x0109:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0111
            throw r1
        L_0x0111:
            throw r0
        L_0x0112:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011a
            throw r1
        L_0x011a:
            throw r0
        L_0x011b:
            r4 = 24
            r7 = 21
            r8 = 2
            r10 = 14
        L_0x0122:
            int r11 = r5 + 1
            r12 = 4
            r13 = 7
            r14 = 9
            r0 = r2[r5]     // Catch:{ all -> 0x019f }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x019f }
            switch(r0) {
                case -13: goto L_0x019a;
                case -12: goto L_0x0197;
                case -11: goto L_0x0189;
                case -10: goto L_0x017c;
                case -9: goto L_0x0172;
                case -8: goto L_0x016f;
                case -7: goto L_0x016d;
                case -6: goto L_0x016b;
                case -5: goto L_0x0156;
                case -4: goto L_0x0146;
                case -3: goto L_0x013e;
                case -2: goto L_0x0136;
                case -1: goto L_0x0133;
                default: goto L_0x0131;
            }     // Catch:{ all -> 0x019f }
        L_0x0131:
            goto L_0x019d
        L_0x0133:
            r5 = 16
            goto L_0x0122
        L_0x0136:
            r1.getMax(r6)     // Catch:{ all -> 0x019f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x019f }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x019f }
            throw r0     // Catch:{ all -> 0x019f }
        L_0x013e:
            r1.getMax(r6)     // Catch:{ all -> 0x019f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x019f }
            android.content.Context r0 = (android.content.Context) r0     // Catch:{ all -> 0x019f }
            return r0
        L_0x0146:
            r1.getMax(r14)     // Catch:{ all -> 0x019f }
            int r0 = r1.setMin     // Catch:{ all -> 0x019f }
            if (r0 == 0) goto L_0x0153
            if (r0 == r3) goto L_0x0150
            goto L_0x0153
        L_0x0150:
            r0 = 6
            r5 = 6
            goto L_0x0122
        L_0x0153:
            r5 = 9
            goto L_0x0122
        L_0x0156:
            r1.setMax = r3     // Catch:{ all -> 0x019f }
            r1.getMax(r8)     // Catch:{ all -> 0x019f }
            r0 = 3
            r1.getMax(r0)     // Catch:{ all -> 0x019f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x019f }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x019f }
            android.content.Context r0 = r0.toIntRange     // Catch:{ all -> 0x019f }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x019f }
            r1.getMax(r12)     // Catch:{ all -> 0x019f }
            goto L_0x019d
        L_0x016b:
            r5 = 2
            goto L_0x0122
        L_0x016d:
            r5 = 5
            goto L_0x0122
        L_0x016f:
            r5 = 24
            goto L_0x0122
        L_0x0172:
            int r0 = invokeSuspend     // Catch:{ all -> 0x019f }
            r1.setMax = r0     // Catch:{ all -> 0x019f }
            r0 = 18
            r1.getMax(r0)     // Catch:{ all -> 0x019f }
            goto L_0x019d
        L_0x017c:
            r1.setMax = r3     // Catch:{ all -> 0x019f }
            r1.getMax(r8)     // Catch:{ all -> 0x019f }
            r1.getMax(r13)     // Catch:{ all -> 0x019f }
            int r0 = r1.setMin     // Catch:{ all -> 0x019f }
            invoke = r0     // Catch:{ all -> 0x019f }
            goto L_0x019d
        L_0x0189:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x019f }
            int r0 = r1.setMin     // Catch:{ all -> 0x019f }
            if (r0 != 0) goto L_0x019d
            r0 = 36
            r5 = 36
            goto L_0x0122
        L_0x0197:
            r5 = 21
            goto L_0x0122
        L_0x019a:
            r5 = 14
            goto L_0x0122
        L_0x019d:
            r5 = r11
            goto L_0x0122
        L_0x019f:
            r0 = move-exception
            byte[] r5 = getMin
            byte r15 = r5[r6]
            byte r15 = (byte) r15
            r16 = 4116(0x1014, float:5.768E-42)
            byte r5 = r5[r16]
            short r5 = (short) r5
            r3 = 4837(0x12e5, float:6.778E-42)
            short r3 = (short) r3
            java.lang.String r3 = setMax(r15, r5, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x01c2
            if (r11 < r13) goto L_0x01c2
            if (r11 > r14) goto L_0x01c2
        L_0x01bf:
            r5 = 1
            goto L_0x022c
        L_0x01c2:
            r3 = 11
            if (r11 < r3) goto L_0x01ca
            if (r11 > r10) goto L_0x01ca
            r5 = 4
            goto L_0x022c
        L_0x01ca:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r12 = r5 & 227(0xe3, float:3.18E-43)
            short r12 = (short) r12
            r13 = 4868(0x1304, float:6.822E-42)
            byte r3 = r3[r13]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r5, r12, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x01ec
            r3 = 10
            if (r11 < r3) goto L_0x01ec
            if (r11 > r10) goto L_0x01ec
            goto L_0x01bf
        L_0x01ec:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r12 = r5 & 227(0xe3, float:3.18E-43)
            short r12 = (short) r12
            byte r3 = r3[r13]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r5, r12, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x020c
            if (r11 < r4) goto L_0x020c
            r3 = 25
            if (r11 > r3) goto L_0x020c
            goto L_0x01bf
        L_0x020c:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            byte r3 = r3[r7]
            short r3 = (short) r3
            r12 = 10638(0x298e, float:1.4907E-41)
            short r12 = (short) r12
            java.lang.String r3 = setMax(r5, r3, r12)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0236
            if (r11 < r9) goto L_0x0236
            r3 = 37
            if (r11 > r3) goto L_0x0236
            goto L_0x01bf
        L_0x022c:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r3 = 1
            goto L_0x0122
        L_0x0236:
            throw r0
        L_0x0237:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x023f
            throw r1
        L_0x023f:
            goto L_0x0241
        L_0x0240:
            throw r0
        L_0x0241:
            goto L_0x0240
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMax(o.onValidateSchema):android.content.Context");
    }

    /* JADX WARNING: Removed duplicated region for block: B:8:0x0023  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private static java.lang.String setMax(byte r6, int r7, short r8) {
        /*
            int r8 = r8 + 4
            int r7 = r7 + 1
            byte[] r0 = getMin
            int r6 = r6 + 44
            byte[] r1 = new byte[r7]
            r2 = 0
            if (r0 != 0) goto L_0x0012
            r3 = r1
            r4 = 0
            r1 = r0
            r0 = r8
            goto L_0x002b
        L_0x0012:
            r3 = 0
            r5 = r8
            r8 = r6
            r6 = r5
        L_0x0016:
            byte r4 = (byte) r8
            r1[r3] = r4
            int r3 = r3 + 1
            if (r3 != r7) goto L_0x0023
            java.lang.String r6 = new java.lang.String
            r6.<init>(r1, r2)
            return r6
        L_0x0023:
            byte r4 = r0[r6]
            r5 = r0
            r0 = r6
            r6 = r4
            r4 = r3
            r3 = r1
            r1 = r5
        L_0x002b:
            int r8 = r8 + r6
            int r6 = r0 + 1
            r0 = r1
            r1 = r3
            r3 = r4
            goto L_0x0016
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMax(byte, int, short):java.lang.String");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:130:0x03bd, code lost:
        if (r10 <= 92) goto L_0x0373;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:150:0x042f, code lost:
        if (r10 <= 184) goto L_0x0408;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x014f, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x0183, code lost:
        r1.getMax(4);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void setMax(java.lang.String r20, java.lang.Throwable r21) {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r0 = r20
            r3 = r21
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0, (java.lang.Object) r3)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = r0 | 644(0x284, float:9.02E-43)
            short r3 = (short) r3
            r4 = 7708(0x1e1c, float:1.0801E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x04d5 }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x04d5 }
            byte[] r3 = getMin     // Catch:{ all -> 0x04d5 }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x04d5 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x04d5 }
            byte[] r9 = getMin     // Catch:{ all -> 0x04d5 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x04d5 }
            short r9 = (short) r9     // Catch:{ all -> 0x04d5 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x04d5 }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x04d5 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x04d5 }
            byte[] r9 = getMin     // Catch:{ all -> 0x04d5 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x04d5 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x04d5 }
            byte[] r11 = getMin     // Catch:{ all -> 0x04d5 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x04d5 }
            short r11 = (short) r11     // Catch:{ all -> 0x04d5 }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x04d5 }
            java.lang.String r9 = setMax(r9, r11, r13)     // Catch:{ all -> 0x04d5 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x04d5 }
            byte[] r13 = getMin     // Catch:{ all -> 0x04d5 }
            byte r13 = r13[r8]     // Catch:{ all -> 0x04d5 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x04d5 }
            byte[] r14 = getMin     // Catch:{ all -> 0x04d5 }
            byte r14 = r14[r5]     // Catch:{ all -> 0x04d5 }
            short r14 = (short) r14     // Catch:{ all -> 0x04d5 }
            java.lang.String r13 = setMax(r13, r14, r10)     // Catch:{ all -> 0x04d5 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x04d5 }
            r11[r7] = r13     // Catch:{ all -> 0x04d5 }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x04d5 }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x04d5 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x04d5 }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x0081:
            int r9 = r0.length
            r11 = 0
            if (r6 >= r9) goto L_0x012b
            r9 = r0[r6]
            java.lang.Object[] r13 = new java.lang.Object[r5]     // Catch:{ all -> 0x0122 }
            r13[r7] = r9     // Catch:{ all -> 0x0122 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0122 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0122 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0122 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0122 }
            r15 = 4119(0x1017, float:5.772E-42)
            byte r14 = r14[r15]     // Catch:{ all -> 0x0122 }
            int r14 = -r14
            short r14 = (short) r14     // Catch:{ all -> 0x0122 }
            r12 = 1123(0x463, float:1.574E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x0122 }
            java.lang.String r9 = setMax(r9, r14, r12)     // Catch:{ all -> 0x0122 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0122 }
            r14 = 74
            byte r14 = (byte) r14     // Catch:{ all -> 0x0122 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0122 }
            r17 = 32
            byte r4 = r16[r17]     // Catch:{ all -> 0x0122 }
            short r4 = (short) r4     // Catch:{ all -> 0x0122 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0122 }
            java.lang.String r4 = setMax(r14, r4, r15)     // Catch:{ all -> 0x0122 }
            java.lang.Class[] r14 = new java.lang.Class[r5]     // Catch:{ all -> 0x0122 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0122 }
            byte r15 = r15[r8]     // Catch:{ all -> 0x0122 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0122 }
            byte[] r17 = getMin     // Catch:{ all -> 0x0122 }
            byte r8 = r17[r5]     // Catch:{ all -> 0x0122 }
            short r8 = (short) r8     // Catch:{ all -> 0x0122 }
            java.lang.String r8 = setMax(r15, r8, r10)     // Catch:{ all -> 0x0122 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0122 }
            r14[r7] = r8     // Catch:{ all -> 0x0122 }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r14)     // Catch:{ all -> 0x0122 }
            java.lang.Object r4 = r4.invoke(r11, r13)     // Catch:{ all -> 0x0122 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0119 }
            r9 = 8
            byte r8 = r8[r9]     // Catch:{ all -> 0x0119 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0119 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0119 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r9 = r9[r13]     // Catch:{ all -> 0x0119 }
            int r9 = -r9
            short r9 = (short) r9     // Catch:{ all -> 0x0119 }
            java.lang.String r8 = setMax(r8, r9, r12)     // Catch:{ all -> 0x0119 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0119 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0119 }
            r12 = 8
            byte r9 = r9[r12]     // Catch:{ all -> 0x0119 }
            int r9 = r9 - r5
            byte r9 = (byte) r9     // Catch:{ all -> 0x0119 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0119 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0119 }
            short r12 = (short) r12     // Catch:{ all -> 0x0119 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0119 }
            java.lang.String r9 = setMax(r9, r12, r13)     // Catch:{ all -> 0x0119 }
            java.lang.reflect.Method r8 = r8.getMethod(r9, r11)     // Catch:{ all -> 0x0119 }
            java.lang.Object r4 = r8.invoke(r4, r11)     // Catch:{ all -> 0x0119 }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x0119 }
            int r4 = r4.intValue()     // Catch:{ all -> 0x0119 }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            r8 = 8
            r12 = 30
            goto L_0x0081
        L_0x0119:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0121
            throw r1
        L_0x0121:
            throw r0
        L_0x0122:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x012a
            throw r1
        L_0x012a:
            throw r0
        L_0x012b:
            r9 = 2
            r0 = 0
        L_0x012d:
            int r10 = r0 + 1
            r12 = 4116(0x1014, float:5.768E-42)
            r0 = r3[r0]     // Catch:{ all -> 0x034f }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x034f }
            r13 = 7
            r14 = 34
            r15 = 18
            r4 = 47
            r6 = 4
            r8 = 3
            switch(r0) {
                case -45: goto L_0x0348;
                case -44: goto L_0x0342;
                case -43: goto L_0x0330;
                case -42: goto L_0x032c;
                case -41: goto L_0x02cf;
                case -40: goto L_0x02c8;
                case -39: goto L_0x02c4;
                case -38: goto L_0x02c0;
                case -37: goto L_0x02b5;
                case -36: goto L_0x02a5;
                case -35: goto L_0x02a1;
                case -34: goto L_0x0296;
                case -33: goto L_0x0292;
                case -32: goto L_0x0249;
                case -31: goto L_0x0239;
                case -30: goto L_0x0235;
                case -29: goto L_0x022a;
                case -28: goto L_0x0229;
                case -27: goto L_0x0225;
                case -26: goto L_0x0221;
                case -25: goto L_0x0216;
                case -24: goto L_0x0212;
                case -23: goto L_0x0207;
                case -22: goto L_0x01f9;
                case -21: goto L_0x01f3;
                case -20: goto L_0x01db;
                case -19: goto L_0x01d7;
                case -18: goto L_0x01d3;
                case -17: goto L_0x01cf;
                case -16: goto L_0x01cb;
                case -15: goto L_0x01c8;
                case -14: goto L_0x01bd;
                case -13: goto L_0x01b9;
                case -12: goto L_0x01b6;
                case -11: goto L_0x0188;
                case -10: goto L_0x017f;
                case -9: goto L_0x017c;
                case -8: goto L_0x0172;
                case -7: goto L_0x016f;
                case -6: goto L_0x016c;
                case -5: goto L_0x0162;
                case -4: goto L_0x0154;
                case -3: goto L_0x014b;
                case -2: goto L_0x0148;
                case -1: goto L_0x0145;
                default: goto L_0x0143;
            }     // Catch:{ all -> 0x034f }
        L_0x0143:
            goto L_0x034c
        L_0x0145:
            r0 = 60
            goto L_0x012d
        L_0x0148:
            r0 = 145(0x91, float:2.03E-43)
            goto L_0x012d
        L_0x014b:
            int r0 = invokeSuspend     // Catch:{ all -> 0x034f }
            r1.setMax = r0     // Catch:{ all -> 0x034f }
        L_0x014f:
            r1.getMax(r15)     // Catch:{ all -> 0x034f }
            goto L_0x034c
        L_0x0154:
            r1.setMax = r5     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r13)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            invoke = r0     // Catch:{ all -> 0x034f }
            goto L_0x034c
        L_0x0162:
            r1.getMax(r14)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            if (r0 != 0) goto L_0x034c
            r0 = 24
            goto L_0x012d
        L_0x016c:
            r0 = 56
            goto L_0x012d
        L_0x016f:
            r0 = 112(0x70, float:1.57E-43)
            goto L_0x012d
        L_0x0172:
            r4 = 8
            r1.getMax(r4)     // Catch:{ all -> 0x034f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x034f }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x034f }
            throw r0     // Catch:{ all -> 0x034f }
        L_0x017c:
            r0 = 184(0xb8, float:2.58E-43)
            goto L_0x012d
        L_0x017f:
            java.lang.String r0 = "Login"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x034f }
        L_0x0183:
            r1.getMax(r6)     // Catch:{ all -> 0x034f }
            goto L_0x034c
        L_0x0188:
            r0 = 5
            r1.setMax = r0     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x034f }
            android.content.Context r0 = (android.content.Context) r0     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x034f }
            java.lang.String r4 = (java.lang.String) r4     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x034f }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r13 = r1.isInside     // Catch:{ all -> 0x034f }
            java.lang.String r13 = (java.lang.String) r13     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r8 = r1.isInside     // Catch:{ all -> 0x034f }
            java.lang.String r8 = (java.lang.String) r8     // Catch:{ all -> 0x034f }
            o.BlurProcess.getMin(r0, r4, r6, r13, r8)     // Catch:{ all -> 0x034f }
            goto L_0x034c
        L_0x01b6:
            r0 = 2
            goto L_0x012d
        L_0x01b9:
            r0 = 57
            goto L_0x012d
        L_0x01bd:
            r1.getMax(r14)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            if (r0 != 0) goto L_0x034c
            r0 = 53
            goto L_0x012d
        L_0x01c8:
            r0 = 1
            goto L_0x012d
        L_0x01cb:
            r0 = 66
            goto L_0x012d
        L_0x01cf:
            r0 = 27
            goto L_0x012d
        L_0x01d3:
            r0 = 114(0x72, float:1.6E-43)
            goto L_0x012d
        L_0x01d7:
            r0 = 175(0xaf, float:2.45E-43)
            goto L_0x012d
        L_0x01db:
            r0 = 9
            r1.getMax(r0)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            r4 = 21
            r6 = 180(0xb4, float:2.52E-43)
            if (r0 == r4) goto L_0x01ef
            if (r0 == r14) goto L_0x01eb
            goto L_0x01ef
        L_0x01eb:
            r0 = 31
            goto L_0x012d
        L_0x01ef:
            r0 = 180(0xb4, float:2.52E-43)
            goto L_0x012d
        L_0x01f3:
            int r0 = invoke     // Catch:{ all -> 0x034f }
            r1.setMax = r0     // Catch:{ all -> 0x034f }
            goto L_0x014f
        L_0x01f9:
            r1.setMax = r5     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r13)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            invokeSuspend = r0     // Catch:{ all -> 0x034f }
            goto L_0x034c
        L_0x0207:
            r1.getMax(r4)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            if (r0 != 0) goto L_0x034c
            r0 = 91
            goto L_0x012d
        L_0x0212:
            r0 = 65
            goto L_0x012d
        L_0x0216:
            r1.getMax(r4)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            if (r0 != 0) goto L_0x034c
            r0 = 106(0x6a, float:1.49E-43)
            goto L_0x012d
        L_0x0221:
            r0 = 149(0x95, float:2.09E-43)
            goto L_0x012d
        L_0x0225:
            r0 = 107(0x6b, float:1.5E-43)
            goto L_0x012d
        L_0x0229:
            return
        L_0x022a:
            r1.getMax(r4)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            if (r0 != 0) goto L_0x034c
            r0 = 144(0x90, float:2.02E-43)
            goto L_0x012d
        L_0x0235:
            r0 = 26
            goto L_0x012d
        L_0x0239:
            r1.setMax = r5     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x034f }
            id.dana.data.base.NetworkException r0 = (id.dana.data.base.NetworkException) r0     // Catch:{ all -> 0x034f }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x034f }
            goto L_0x0183
        L_0x0249:
            r1.setMax = r5     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x034f }
            byte[] r4 = getMin     // Catch:{ all -> 0x0289 }
            r8 = 8
            byte r4 = r4[r8]     // Catch:{ all -> 0x0289 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x0289 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0289 }
            byte r8 = r8[r12]     // Catch:{ all -> 0x0289 }
            short r8 = (short) r8     // Catch:{ all -> 0x0289 }
            int r13 = length     // Catch:{ all -> 0x0289 }
            r13 = r13 | 5797(0x16a5, float:8.123E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0289 }
            java.lang.String r4 = setMax(r4, r8, r13)     // Catch:{ all -> 0x0289 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x0289 }
            r8 = 59
            byte r8 = (byte) r8     // Catch:{ all -> 0x0289 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0289 }
            r14 = 70
            byte r13 = r13[r14]     // Catch:{ all -> 0x0289 }
            short r13 = (short) r13     // Catch:{ all -> 0x0289 }
            r14 = 10545(0x2931, float:1.4777E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0289 }
            java.lang.String r8 = setMax(r8, r13, r14)     // Catch:{ all -> 0x0289 }
            java.lang.reflect.Method r4 = r4.getMethod(r8, r11)     // Catch:{ all -> 0x0289 }
            java.lang.Object r0 = r4.invoke(r0, r11)     // Catch:{ all -> 0x0289 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x034f }
            goto L_0x0183
        L_0x0289:
            r0 = move-exception
            java.lang.Throwable r4 = r0.getCause()     // Catch:{ all -> 0x034f }
            if (r4 == 0) goto L_0x0291
            throw r4     // Catch:{ all -> 0x034f }
        L_0x0291:
            throw r0     // Catch:{ all -> 0x034f }
        L_0x0292:
            r0 = 150(0x96, float:2.1E-43)
            goto L_0x012d
        L_0x0296:
            r1.getMax(r4)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            if (r0 != 0) goto L_0x034c
            r0 = 173(0xad, float:2.42E-43)
            goto L_0x012d
        L_0x02a1:
            r0 = 30
            goto L_0x012d
        L_0x02a5:
            r1.setMax = r5     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x034f }
            boolean r0 = r0 instanceof id.dana.data.base.NetworkException     // Catch:{ all -> 0x034f }
            r1.setMax = r0     // Catch:{ all -> 0x034f }
            goto L_0x014f
        L_0x02b5:
            r1.getMax(r4)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            if (r0 != 0) goto L_0x034c
            r0 = 179(0xb3, float:2.51E-43)
            goto L_0x012d
        L_0x02c0:
            r0 = 110(0x6e, float:1.54E-43)
            goto L_0x012d
        L_0x02c4:
            r0 = 54
            goto L_0x012d
        L_0x02c8:
            r0 = 2131887132(0x7f12041c, float:1.9408862E38)
            r1.setMax = r0     // Catch:{ all -> 0x034f }
            goto L_0x014f
        L_0x02cf:
            r1.setMax = r9     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x034f }
            r1.getMax(r13)     // Catch:{ all -> 0x034f }
            int r4 = r1.setMin     // Catch:{ all -> 0x034f }
            java.lang.Object[] r8 = new java.lang.Object[r5]     // Catch:{ all -> 0x0323 }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)     // Catch:{ all -> 0x0323 }
            r8[r7] = r4     // Catch:{ all -> 0x0323 }
            byte[] r4 = getMin     // Catch:{ all -> 0x0323 }
            r13 = 6214(0x1846, float:8.708E-42)
            byte r4 = r4[r13]     // Catch:{ all -> 0x0323 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x0323 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0323 }
            r14 = 5903(0x170f, float:8.272E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0323 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0323 }
            r14 = 6203(0x183b, float:8.692E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0323 }
            java.lang.String r4 = setMax(r4, r13, r14)     // Catch:{ all -> 0x0323 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x0323 }
            r13 = 59
            byte r13 = (byte) r13     // Catch:{ all -> 0x0323 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0323 }
            r15 = 92
            byte r14 = r14[r15]     // Catch:{ all -> 0x0323 }
            short r14 = (short) r14     // Catch:{ all -> 0x0323 }
            r15 = 10630(0x2986, float:1.4896E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0323 }
            java.lang.String r13 = setMax(r13, r14, r15)     // Catch:{ all -> 0x0323 }
            java.lang.Class[] r14 = new java.lang.Class[r5]     // Catch:{ all -> 0x0323 }
            java.lang.Class r15 = java.lang.Integer.TYPE     // Catch:{ all -> 0x0323 }
            r14[r7] = r15     // Catch:{ all -> 0x0323 }
            java.lang.reflect.Method r4 = r4.getMethod(r13, r14)     // Catch:{ all -> 0x0323 }
            java.lang.Object r0 = r4.invoke(r0, r8)     // Catch:{ all -> 0x0323 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x034f }
            goto L_0x0183
        L_0x0323:
            r0 = move-exception
            java.lang.Throwable r4 = r0.getCause()     // Catch:{ all -> 0x034f }
            if (r4 == 0) goto L_0x032b
            throw r4     // Catch:{ all -> 0x034f }
        L_0x032b:
            throw r0     // Catch:{ all -> 0x034f }
        L_0x032c:
            r0 = 92
            goto L_0x012d
        L_0x0330:
            r1.setMax = r5     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x034f }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x034f }
            android.content.Context r0 = r0.toIntRange     // Catch:{ all -> 0x034f }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x034f }
            goto L_0x0183
        L_0x0342:
            java.lang.String r0 = "alipayplus.mobilewallet.user.login"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x034f }
            goto L_0x0183
        L_0x0348:
            r0 = 67
            goto L_0x012d
        L_0x034c:
            r0 = r10
            goto L_0x012d
        L_0x034f:
            r0 = move-exception
            byte[] r4 = getMin
            r6 = 8
            byte r8 = r4[r6]
            byte r6 = (byte) r8
            byte r4 = r4[r12]
            short r4 = (short) r4
            r8 = 4837(0x12e5, float:6.778E-42)
            short r8 = (short) r8
            java.lang.String r4 = setMax(r6, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            r6 = 174(0xae, float:2.44E-43)
            r13 = 25
            if (r4 == 0) goto L_0x0379
            if (r10 < r9) goto L_0x0379
            if (r10 > r13) goto L_0x0379
        L_0x0373:
            r5 = 8
        L_0x0375:
            r13 = 15
            goto L_0x04c9
        L_0x0379:
            byte[] r4 = getMin
            r14 = 8
            byte r15 = r4[r14]
            byte r14 = (byte) r15
            r15 = 4868(0x1304, float:6.822E-42)
            byte r5 = r4[r15]
            short r5 = (short) r5
            r18 = 15
            byte r4 = r4[r18]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r14, r5, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x039f
            r4 = 19
            if (r10 < r4) goto L_0x039f
            if (r10 > r13) goto L_0x039f
            goto L_0x0373
        L_0x039f:
            byte[] r4 = getMin
            r5 = 8
            byte r14 = r4[r5]
            byte r5 = (byte) r14
            byte r4 = r4[r12]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r5, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x03c0
            r4 = 67
            r5 = 92
            if (r10 < r4) goto L_0x03c4
            if (r10 > r5) goto L_0x03c4
            goto L_0x0373
        L_0x03c0:
            r4 = 67
            r5 = 92
        L_0x03c4:
            byte[] r14 = getMin
            r17 = 8
            byte r4 = r14[r17]
            byte r4 = (byte) r4
            byte r14 = r14[r15]
            short r14 = (short) r14
            r5 = 10554(0x293a, float:1.479E-41)
            short r5 = (short) r5
            java.lang.String r4 = setMax(r4, r14, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x03e8
            r4 = 146(0x92, float:2.05E-43)
            if (r10 < r4) goto L_0x03e8
            r4 = 147(0x93, float:2.06E-43)
            if (r10 > r4) goto L_0x03e8
            goto L_0x0373
        L_0x03e8:
            byte[] r4 = getMin
            r5 = 8
            byte r14 = r4[r5]
            byte r5 = (byte) r14
            byte r4 = r4[r12]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r5, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x040e
            r4 = 147(0x93, float:2.06E-43)
            if (r10 < r4) goto L_0x040e
            r4 = 148(0x94, float:2.07E-43)
            if (r10 > r4) goto L_0x040e
        L_0x0408:
            r5 = 8
            r6 = 25
            goto L_0x0375
        L_0x040e:
            byte[] r4 = getMin
            r5 = 8
            byte r14 = r4[r5]
            byte r5 = (byte) r14
            r14 = r5 & 227(0xe3, float:3.18E-43)
            short r14 = (short) r14
            byte r4 = r4[r15]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r5, r14, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0432
            r4 = 181(0xb5, float:2.54E-43)
            if (r10 < r4) goto L_0x0432
            r4 = 184(0xb8, float:2.58E-43)
            if (r10 > r4) goto L_0x0434
        L_0x0431:
            goto L_0x0408
        L_0x0432:
            r4 = 184(0xb8, float:2.58E-43)
        L_0x0434:
            byte[] r5 = getMin
            r14 = 8
            byte r4 = r5[r14]
            byte r4 = (byte) r4
            r14 = 13
            byte r5 = r5[r14]
            short r5 = (short) r5
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r4 = setMax(r4, r5, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x045c
            r4 = 182(0xb6, float:2.55E-43)
            if (r10 < r4) goto L_0x045c
            r4 = 183(0xb7, float:2.56E-43)
            if (r10 > r4) goto L_0x045c
            goto L_0x0431
        L_0x045c:
            byte[] r4 = getMin
            r5 = 8
            byte r14 = r4[r5]
            byte r5 = (byte) r14
            r14 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r14]
            short r4 = (short) r4
            r14 = 10605(0x296d, float:1.4861E-41)
            short r14 = (short) r14
            java.lang.String r4 = setMax(r5, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0483
            r4 = 185(0xb9, float:2.59E-43)
            if (r10 < r4) goto L_0x0483
            r4 = 191(0xbf, float:2.68E-43)
            if (r10 > r4) goto L_0x0483
            goto L_0x0373
        L_0x0483:
            byte[] r4 = getMin
            r5 = 8
            byte r14 = r4[r5]
            byte r5 = (byte) r14
            byte r4 = r4[r12]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r5, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x04a4
            r4 = 186(0xba, float:2.6E-43)
            if (r10 < r4) goto L_0x04a4
            r4 = 191(0xbf, float:2.68E-43)
            if (r10 > r4) goto L_0x04a4
            goto L_0x0431
        L_0x04a4:
            byte[] r4 = getMin
            r5 = 8
            byte r8 = r4[r5]
            byte r8 = (byte) r8
            byte r12 = r4[r15]
            short r12 = (short) r12
            r13 = 15
            byte r4 = r4[r13]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r8, r12, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x04d4
            r4 = 189(0xbd, float:2.65E-43)
            if (r10 < r4) goto L_0x04d4
            r4 = 190(0xbe, float:2.66E-43)
            if (r10 > r4) goto L_0x04d4
        L_0x04c9:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r6
            r5 = 1
            goto L_0x012d
        L_0x04d4:
            throw r0
        L_0x04d5:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x04dd
            throw r1
        L_0x04dd:
            goto L_0x04df
        L_0x04de:
            throw r0
        L_0x04df:
            goto L_0x04de
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMax(java.lang.String, java.lang.Throwable):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:130:0x0394, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:178:0x0533, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:257:0x075e, code lost:
        if (r14 <= 100) goto L_0x0760;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:265:0x078b, code lost:
        if (r14 <= 101) goto L_0x078d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:273:0x07b4, code lost:
        if (r14 <= 106) goto L_0x078d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x0163, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x017f, code lost:
        r0 = r14;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x0246, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Removed duplicated region for block: B:117:0x034d A[Catch:{ all -> 0x0452, all -> 0x033e, all -> 0x0516 }] */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x034e A[Catch:{ all -> 0x0452, all -> 0x033e, all -> 0x0516 }] */
    /* JADX WARNING: Removed duplicated region for block: B:228:0x06b0 A[Catch:{ all -> 0x06a6, all -> 0x0712 }] */
    /* JADX WARNING: Removed duplicated region for block: B:229:0x06b1 A[Catch:{ all -> 0x06a6, all -> 0x0712 }] */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0758  */
    /* JADX WARNING: Removed duplicated region for block: B:259:0x0766  */
    /* JADX WARNING: Removed duplicated region for block: B:262:0x0785  */
    /* JADX WARNING: Removed duplicated region for block: B:267:0x0791  */
    /* JADX WARNING: Removed duplicated region for block: B:272:0x07b2  */
    /* JADX WARNING: Removed duplicated region for block: B:274:0x07b7  */
    /* JADX WARNING: Removed duplicated region for block: B:291:0x080f  */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x0817  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void setMax(java.lang.Throwable r23) {
        /*
            r22 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r22
            r0 = r23
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = 1256(0x4e8, float:1.76E-42)
            short r4 = (short) r4
            r5 = 14306(0x37e2, float:2.0047E-41)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r5 = (short) r4
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r4 = setMax(r4, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x08f1 }
            r7 = 0
            r6[r7] = r4     // Catch:{ all -> 0x08f1 }
            byte[] r4 = getMin     // Catch:{ all -> 0x08f1 }
            r8 = 8
            byte r4 = r4[r8]     // Catch:{ all -> 0x08f1 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x08f1 }
            byte[] r9 = getMin     // Catch:{ all -> 0x08f1 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x08f1 }
            short r9 = (short) r9     // Catch:{ all -> 0x08f1 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x08f1 }
            java.lang.String r4 = setMax(r4, r9, r10)     // Catch:{ all -> 0x08f1 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x08f1 }
            byte[] r9 = getMin     // Catch:{ all -> 0x08f1 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x08f1 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x08f1 }
            byte[] r11 = getMin     // Catch:{ all -> 0x08f1 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x08f1 }
            short r11 = (short) r11     // Catch:{ all -> 0x08f1 }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x08f1 }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x08f1 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x08f1 }
            byte[] r12 = getMin     // Catch:{ all -> 0x08f1 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x08f1 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x08f1 }
            byte[] r13 = getMin     // Catch:{ all -> 0x08f1 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x08f1 }
            short r13 = (short) r13     // Catch:{ all -> 0x08f1 }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x08f1 }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x08f1 }
            r11[r7] = r12     // Catch:{ all -> 0x08f1 }
            java.lang.reflect.Method r4 = r4.getMethod(r9, r11)     // Catch:{ all -> 0x08f1 }
            java.lang.Object r0 = r4.invoke(r0, r6)     // Catch:{ all -> 0x08f1 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x08f1 }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r6 = 0
        L_0x007f:
            int r9 = r0.length
            r11 = 4119(0x1017, float:5.772E-42)
            r12 = 32
            r13 = 0
            if (r6 >= r9) goto L_0x0127
            r9 = r0[r6]
            java.lang.Object[] r14 = new java.lang.Object[r5]     // Catch:{ all -> 0x011e }
            r14[r7] = r9     // Catch:{ all -> 0x011e }
            byte[] r9 = getMin     // Catch:{ all -> 0x011e }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011e }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011e }
            byte[] r15 = getMin     // Catch:{ all -> 0x011e }
            byte r15 = r15[r11]     // Catch:{ all -> 0x011e }
            int r15 = -r15
            short r15 = (short) r15     // Catch:{ all -> 0x011e }
            r3 = 1123(0x463, float:1.574E-42)
            short r3 = (short) r3     // Catch:{ all -> 0x011e }
            java.lang.String r9 = setMax(r9, r15, r3)     // Catch:{ all -> 0x011e }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011e }
            r15 = 74
            byte r15 = (byte) r15     // Catch:{ all -> 0x011e }
            byte[] r16 = getMin     // Catch:{ all -> 0x011e }
            byte r12 = r16[r12]     // Catch:{ all -> 0x011e }
            short r12 = (short) r12     // Catch:{ all -> 0x011e }
            r11 = 10257(0x2811, float:1.4373E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x011e }
            java.lang.String r11 = setMax(r15, r12, r11)     // Catch:{ all -> 0x011e }
            java.lang.Class[] r12 = new java.lang.Class[r5]     // Catch:{ all -> 0x011e }
            byte[] r15 = getMin     // Catch:{ all -> 0x011e }
            byte r15 = r15[r8]     // Catch:{ all -> 0x011e }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011e }
            byte[] r17 = getMin     // Catch:{ all -> 0x011e }
            byte r8 = r17[r5]     // Catch:{ all -> 0x011e }
            short r8 = (short) r8     // Catch:{ all -> 0x011e }
            java.lang.String r8 = setMax(r15, r8, r10)     // Catch:{ all -> 0x011e }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x011e }
            r12[r7] = r8     // Catch:{ all -> 0x011e }
            java.lang.reflect.Method r8 = r9.getMethod(r11, r12)     // Catch:{ all -> 0x011e }
            java.lang.Object r8 = r8.invoke(r13, r14)     // Catch:{ all -> 0x011e }
            byte[] r9 = getMin     // Catch:{ all -> 0x0115 }
            r11 = 8
            byte r9 = r9[r11]     // Catch:{ all -> 0x0115 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0115 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0115 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x0115 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0115 }
            java.lang.String r3 = setMax(r9, r11, r3)     // Catch:{ all -> 0x0115 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0115 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0115 }
            r11 = 8
            byte r9 = r9[r11]     // Catch:{ all -> 0x0115 }
            int r9 = r9 - r5
            byte r9 = (byte) r9     // Catch:{ all -> 0x0115 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0115 }
            r12 = 73
            byte r11 = r11[r12]     // Catch:{ all -> 0x0115 }
            short r11 = (short) r11     // Catch:{ all -> 0x0115 }
            r12 = r11 | 10256(0x2810, float:1.4372E-41)
            short r12 = (short) r12     // Catch:{ all -> 0x0115 }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x0115 }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r13)     // Catch:{ all -> 0x0115 }
            java.lang.Object r3 = r3.invoke(r8, r13)     // Catch:{ all -> 0x0115 }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x0115 }
            int r3 = r3.intValue()     // Catch:{ all -> 0x0115 }
            r4[r6] = r3
            int r6 = r6 + 1
            r3 = 46
            r8 = 8
            goto L_0x007f
        L_0x0115:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011d
            throw r1
        L_0x011d:
            throw r0
        L_0x011e:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0126
            throw r1
        L_0x0126:
            throw r0
        L_0x0127:
            r9 = 2
            r11 = 3
            r0 = 0
        L_0x012a:
            int r14 = r0 + 1
            r0 = r4[r0]     // Catch:{ all -> 0x072f }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x072f }
            r3 = 18
            r8 = 7
            r6 = 34
            r15 = 9
            r7 = 47
            r12 = 4
            switch(r0) {
                case -89: goto L_0x071e;
                case -88: goto L_0x0714;
                case -87: goto L_0x0701;
                case -86: goto L_0x06f7;
                case -85: goto L_0x06e6;
                case -84: goto L_0x06dc;
                case -83: goto L_0x06d2;
                case -82: goto L_0x06c1;
                case -81: goto L_0x06b6;
                case -80: goto L_0x064f;
                case -79: goto L_0x0640;
                case -78: goto L_0x0635;
                case -77: goto L_0x062b;
                case -76: goto L_0x061a;
                case -75: goto L_0x0610;
                case -74: goto L_0x05ec;
                case -73: goto L_0x05e2;
                case -72: goto L_0x05d1;
                case -71: goto L_0x05c7;
                case -70: goto L_0x05b2;
                case -69: goto L_0x05a8;
                case -68: goto L_0x058c;
                case -67: goto L_0x0582;
                case -66: goto L_0x0578;
                case -65: goto L_0x0565;
                case -64: goto L_0x054c;
                case -63: goto L_0x0542;
                case -62: goto L_0x0538;
                case -61: goto L_0x051b;
                case -60: goto L_0x04fa;
                case -59: goto L_0x04f2;
                case -58: goto L_0x04ea;
                case -57: goto L_0x04e2;
                case -56: goto L_0x04cb;
                case -55: goto L_0x04c4;
                case -54: goto L_0x04bc;
                case -53: goto L_0x04a0;
                case -52: goto L_0x048a;
                case -51: goto L_0x0482;
                case -50: goto L_0x0481;
                case -49: goto L_0x0479;
                case -48: goto L_0x0471;
                case -47: goto L_0x045b;
                case -46: goto L_0x03e4;
                case -45: goto L_0x03dc;
                case -44: goto L_0x03d4;
                case -43: goto L_0x03c5;
                case -42: goto L_0x03bd;
                case -41: goto L_0x039b;
                case -40: goto L_0x038c;
                case -39: goto L_0x0383;
                case -38: goto L_0x0365;
                case -37: goto L_0x035d;
                case -36: goto L_0x0356;
                case -35: goto L_0x02ee;
                case -34: goto L_0x02eb;
                case -33: goto L_0x02e0;
                case -32: goto L_0x02dc;
                case -31: goto L_0x02c8;
                case -30: goto L_0x02c4;
                case -29: goto L_0x02c0;
                case -28: goto L_0x02b5;
                case -27: goto L_0x02a5;
                case -26: goto L_0x0286;
                case -25: goto L_0x0282;
                case -24: goto L_0x0263;
                case -23: goto L_0x0254;
                case -22: goto L_0x0206;
                case -21: goto L_0x01e0;
                case -20: goto L_0x01dc;
                case -19: goto L_0x01d8;
                case -18: goto L_0x01cd;
                case -17: goto L_0x01bf;
                case -16: goto L_0x01ba;
                case -15: goto L_0x01b6;
                case -14: goto L_0x01b2;
                case -13: goto L_0x01a7;
                case -12: goto L_0x01a3;
                case -11: goto L_0x019f;
                case -10: goto L_0x0194;
                case -9: goto L_0x018a;
                case -8: goto L_0x0186;
                case -7: goto L_0x0182;
                case -6: goto L_0x0174;
                case -5: goto L_0x0167;
                case -4: goto L_0x015f;
                case -3: goto L_0x015b;
                case -2: goto L_0x014c;
                case -1: goto L_0x0148;
                default: goto L_0x013f;
            }     // Catch:{ all -> 0x072f }
        L_0x013f:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            goto L_0x0728
        L_0x0148:
            r0 = 237(0xed, float:3.32E-43)
            goto L_0x063b
        L_0x014c:
            r1.getMax(r15)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 == 0) goto L_0x0157
            r0 = 138(0x8a, float:1.93E-43)
            goto L_0x063b
        L_0x0157:
            r0 = 204(0xcc, float:2.86E-43)
            goto L_0x063b
        L_0x015b:
            r0 = 225(0xe1, float:3.15E-43)
            goto L_0x063b
        L_0x015f:
            int r0 = invoke     // Catch:{ all -> 0x072f }
            r1.setMax = r0     // Catch:{ all -> 0x072f }
        L_0x0163:
            r1.getMax(r3)     // Catch:{ all -> 0x072f }
            goto L_0x013f
        L_0x0167:
            r1.setMax = r5     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r8)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            invokeSuspend = r0     // Catch:{ all -> 0x072f }
            goto L_0x013f
        L_0x0174:
            r1.getMax(r7)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 != 0) goto L_0x017f
            r0 = 19
            goto L_0x063b
        L_0x017f:
            r0 = r14
            goto L_0x063b
        L_0x0182:
            r0 = 190(0xbe, float:2.66E-43)
            goto L_0x063b
        L_0x0186:
            r0 = 176(0xb0, float:2.47E-43)
            goto L_0x063b
        L_0x018a:
            r3 = 8
            r1.getMax(r3)     // Catch:{ all -> 0x072f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x072f }
            throw r0     // Catch:{ all -> 0x072f }
        L_0x0194:
            r1.getMax(r7)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 != 0) goto L_0x017f
            r0 = 40
            goto L_0x063b
        L_0x019f:
            r0 = 203(0xcb, float:2.84E-43)
            goto L_0x063b
        L_0x01a3:
            r0 = 335(0x14f, float:4.7E-43)
            goto L_0x063b
        L_0x01a7:
            r1.getMax(r7)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 != 0) goto L_0x017f
            r0 = 69
            goto L_0x063b
        L_0x01b2:
            r0 = 223(0xdf, float:3.12E-43)
            goto L_0x063b
        L_0x01b6:
            r0 = 234(0xea, float:3.28E-43)
            goto L_0x063b
        L_0x01ba:
            int r0 = invokeSuspend     // Catch:{ all -> 0x072f }
            r1.setMax = r0     // Catch:{ all -> 0x072f }
            goto L_0x0163
        L_0x01bf:
            r1.setMax = r5     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r8)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            invoke = r0     // Catch:{ all -> 0x072f }
            goto L_0x013f
        L_0x01cd:
            r1.getMax(r6)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 != 0) goto L_0x017f
            r0 = 92
            goto L_0x063b
        L_0x01d8:
            r0 = 242(0xf2, float:3.39E-43)
            goto L_0x063b
        L_0x01dc:
            r0 = 266(0x10a, float:3.73E-43)
            goto L_0x063b
        L_0x01e0:
            r1.setMax = r12     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x072f }
            o.isMainThread$getMin r0 = (o.isMainThread.getMin) r0     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.String r3 = (java.lang.String) r3     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ all -> 0x072f }
            r0.getMin(r3, r6, r7)     // Catch:{ all -> 0x072f }
            goto L_0x013f
        L_0x0206:
            r1.setMax = r5     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x072f }
            byte[] r3 = getMin     // Catch:{ all -> 0x024b }
            r6 = 8
            byte r3 = r3[r6]     // Catch:{ all -> 0x024b }
            byte r3 = (byte) r3     // Catch:{ all -> 0x024b }
            byte[] r6 = getMin     // Catch:{ all -> 0x024b }
            r7 = 4116(0x1014, float:5.768E-42)
            byte r6 = r6[r7]     // Catch:{ all -> 0x024b }
            short r6 = (short) r6     // Catch:{ all -> 0x024b }
            int r7 = length     // Catch:{ all -> 0x024b }
            r7 = r7 | 5797(0x16a5, float:8.123E-42)
            short r7 = (short) r7     // Catch:{ all -> 0x024b }
            java.lang.String r3 = setMax(r3, r6, r7)     // Catch:{ all -> 0x024b }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x024b }
            r6 = 59
            byte r6 = (byte) r6     // Catch:{ all -> 0x024b }
            byte[] r7 = getMin     // Catch:{ all -> 0x024b }
            r8 = 70
            byte r7 = r7[r8]     // Catch:{ all -> 0x024b }
            short r7 = (short) r7     // Catch:{ all -> 0x024b }
            r8 = 10545(0x2931, float:1.4777E-41)
            short r8 = (short) r8     // Catch:{ all -> 0x024b }
            java.lang.String r6 = setMax(r6, r7, r8)     // Catch:{ all -> 0x024b }
            java.lang.reflect.Method r3 = r3.getMethod(r6, r13)     // Catch:{ all -> 0x024b }
            java.lang.Object r0 = r3.invoke(r0, r13)     // Catch:{ all -> 0x024b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x072f }
        L_0x0246:
            r1.getMax(r12)     // Catch:{ all -> 0x072f }
            goto L_0x013f
        L_0x024b:
            r0 = move-exception
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x072f }
            if (r3 == 0) goto L_0x0253
            throw r3     // Catch:{ all -> 0x072f }
        L_0x0253:
            throw r0     // Catch:{ all -> 0x072f }
        L_0x0254:
            r1.setMax = r5     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x072f }
            id.dana.data.base.NetworkException r0 = (id.dana.data.base.NetworkException) r0     // Catch:{ all -> 0x072f }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x072f }
            goto L_0x0246
        L_0x0263:
            r1.setMax = r11     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x072f }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.String r3 = (java.lang.String) r3     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x072f }
            id.dana.data.base.NetworkException r6 = (id.dana.data.base.NetworkException) r6     // Catch:{ all -> 0x072f }
            r0.getMax((java.lang.String) r3, (id.dana.data.base.NetworkException) r6)     // Catch:{ all -> 0x072f }
            goto L_0x013f
        L_0x0282:
            r0 = 146(0x92, float:2.05E-43)
            goto L_0x063b
        L_0x0286:
            r1.setMax = r11     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.String r3 = (java.lang.String) r3     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x072f }
            java.lang.Throwable r6 = (java.lang.Throwable) r6     // Catch:{ all -> 0x072f }
            o.setStateOff.length(r0, r3, r6)     // Catch:{ all -> 0x072f }
            goto L_0x013f
        L_0x02a5:
            r1.setMax = r5     // Catch:{ all -> 0x072f }
            r1.getMax(r9)     // Catch:{ all -> 0x072f }
            r1.getMax(r11)     // Catch:{ all -> 0x072f }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x072f }
            boolean r0 = r0 instanceof id.dana.data.base.NetworkException     // Catch:{ all -> 0x072f }
            r1.setMax = r0     // Catch:{ all -> 0x072f }
            goto L_0x0163
        L_0x02b5:
            r1.getMax(r7)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 != 0) goto L_0x017f
            r0 = 105(0x69, float:1.47E-43)
            goto L_0x063b
        L_0x02c0:
            r0 = 283(0x11b, float:3.97E-43)
            goto L_0x063b
        L_0x02c4:
            r0 = 298(0x12a, float:4.18E-43)
            goto L_0x063b
        L_0x02c8:
            r1.getMax(r15)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 == 0) goto L_0x02d8
            r3 = 32
            if (r0 == r3) goto L_0x02d4
            goto L_0x02d8
        L_0x02d4:
            r0 = 182(0xb6, float:2.55E-43)
            goto L_0x063b
        L_0x02d8:
            r0 = 271(0x10f, float:3.8E-43)
            goto L_0x063b
        L_0x02dc:
            r0 = 93
            goto L_0x063b
        L_0x02e0:
            r1.getMax(r6)     // Catch:{ all -> 0x072f }
            int r0 = r1.setMin     // Catch:{ all -> 0x072f }
            if (r0 != 0) goto L_0x017f
            r0 = 132(0x84, float:1.85E-43)
            goto L_0x063b
        L_0x02eb:
            r0 = 2
            goto L_0x063b
        L_0x02ee:
            r1.setMax = r5     // Catch:{ all -> 0x034f }
            r1.getMax(r9)     // Catch:{ all -> 0x034f }
            r1.getMax(r8)     // Catch:{ all -> 0x034f }
            int r0 = r1.setMin     // Catch:{ all -> 0x034f }
            java.lang.Object[] r3 = new java.lang.Object[r5]     // Catch:{ all -> 0x0342 }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ all -> 0x0342 }
            r6 = 0
            r3[r6] = r0     // Catch:{ all -> 0x0342 }
            byte[] r0 = getMin     // Catch:{ all -> 0x0342 }
            r6 = 8
            byte r0 = r0[r6]     // Catch:{ all -> 0x0342 }
            byte r0 = (byte) r0     // Catch:{ all -> 0x0342 }
            byte[] r6 = getMin     // Catch:{ all -> 0x0342 }
            r16 = 4119(0x1017, float:5.772E-42)
            byte r6 = r6[r16]     // Catch:{ all -> 0x0340 }
            int r6 = -r6
            short r6 = (short) r6     // Catch:{ all -> 0x0340 }
            r7 = 1123(0x463, float:1.574E-42)
            short r7 = (short) r7     // Catch:{ all -> 0x0340 }
            java.lang.String r0 = setMax(r0, r6, r7)     // Catch:{ all -> 0x0340 }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x0340 }
            r6 = 74
            byte r6 = (byte) r6     // Catch:{ all -> 0x0340 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0340 }
            r20 = 32
            byte r7 = r7[r20]     // Catch:{ all -> 0x033e }
            short r7 = (short) r7     // Catch:{ all -> 0x033e }
            r8 = 10257(0x2811, float:1.4373E-41)
            short r8 = (short) r8     // Catch:{ all -> 0x033e }
            java.lang.String r6 = setMax(r6, r7, r8)     // Catch:{ all -> 0x033e }
            java.lang.Class[] r7 = new java.lang.Class[r5]     // Catch:{ all -> 0x033e }
            java.lang.Class r8 = java.lang.Integer.TYPE     // Catch:{ all -> 0x033e }
            r15 = 0
            r7[r15] = r8     // Catch:{ all -> 0x033e }
            java.lang.reflect.Method r0 = r0.getMethod(r6, r7)     // Catch:{ all -> 0x033e }
            java.lang.Object r0 = r0.invoke(r13, r3)     // Catch:{ all -> 0x033e }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0516 }
            goto L_0x0394
        L_0x033e:
            r0 = move-exception
            goto L_0x0347
        L_0x0340:
            r0 = move-exception
            goto L_0x0345
        L_0x0342:
            r0 = move-exception
            r16 = 4119(0x1017, float:5.772E-42)
        L_0x0345:
            r20 = 32
        L_0x0347:
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x0516 }
            if (r3 == 0) goto L_0x034e
            throw r3     // Catch:{ all -> 0x0516 }
        L_0x034e:
            throw r0     // Catch:{ all -> 0x0516 }
        L_0x034f:
            r0 = move-exception
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            goto L_0x0517
        L_0x0356:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 3
            goto L_0x063b
        L_0x035d:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 202(0xca, float:2.83E-43)
            goto L_0x063b
        L_0x0365:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r9     // Catch:{ all -> 0x0516 }
            r1.getMax(r9)     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0516 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0516 }
            r1.getMax(r8)     // Catch:{ all -> 0x0516 }
            int r3 = r1.setMin     // Catch:{ all -> 0x0516 }
            if (r3 == 0) goto L_0x037e
            r3 = 1
            goto L_0x037f
        L_0x037e:
            r3 = 0
        L_0x037f:
            r0.setMin((boolean) r3)     // Catch:{ all -> 0x0516 }
            goto L_0x0397
        L_0x0383:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            java.lang.String r0 = "DanaLogin"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0516 }
            goto L_0x0394
        L_0x038c:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            java.lang.String r0 = "[PinLogin] "
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0516 }
        L_0x0394:
            r1.getMax(r12)     // Catch:{ all -> 0x0516 }
        L_0x0397:
            r3 = 46
            goto L_0x064c
        L_0x039b:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r11     // Catch:{ all -> 0x0516 }
            r1.getMax(r9)     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0516 }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x0516 }
            java.lang.String r3 = (java.lang.String) r3     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x0516 }
            java.lang.Throwable r6 = (java.lang.Throwable) r6     // Catch:{ all -> 0x0516 }
            o.updateActionSheetContent.logNetworkException(r0, r3, r6)     // Catch:{ all -> 0x0516 }
            goto L_0x0397
        L_0x03bd:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 285(0x11d, float:4.0E-43)
            goto L_0x063b
        L_0x03c5:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r7)     // Catch:{ all -> 0x0516 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0516 }
            if (r0 != 0) goto L_0x017f
            r0 = 160(0xa0, float:2.24E-43)
            goto L_0x063b
        L_0x03d4:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 243(0xf3, float:3.4E-43)
            goto L_0x063b
        L_0x03dc:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 337(0x151, float:4.72E-43)
            goto L_0x063b
        L_0x03e4:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r9     // Catch:{ all -> 0x0516 }
            r1.getMax(r9)     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x0516 }
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x0452 }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x0452 }
            byte[] r3 = getMin     // Catch:{ all -> 0x0452 }
            r7 = 8
            byte r3 = r3[r7]     // Catch:{ all -> 0x0452 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x0452 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0452 }
            r8 = 5903(0x170f, float:8.272E-42)
            byte r7 = r7[r8]     // Catch:{ all -> 0x0452 }
            int r7 = -r7
            short r7 = (short) r7     // Catch:{ all -> 0x0452 }
            r8 = 5049(0x13b9, float:7.075E-42)
            short r8 = (short) r8     // Catch:{ all -> 0x0452 }
            java.lang.String r3 = setMax(r3, r7, r8)     // Catch:{ all -> 0x0452 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0452 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0452 }
            r8 = 6214(0x1846, float:8.708E-42)
            byte r7 = r7[r8]     // Catch:{ all -> 0x0452 }
            byte r7 = (byte) r7     // Catch:{ all -> 0x0452 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0452 }
            r15 = 76
            byte r8 = r8[r15]     // Catch:{ all -> 0x0452 }
            short r8 = (short) r8     // Catch:{ all -> 0x0452 }
            int r15 = length     // Catch:{ all -> 0x0452 }
            r15 = r15 | 14083(0x3703, float:1.9734E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0452 }
            java.lang.String r7 = setMax(r7, r8, r15)     // Catch:{ all -> 0x0452 }
            java.lang.Class[] r8 = new java.lang.Class[r5]     // Catch:{ all -> 0x0452 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0452 }
            r18 = 8
            byte r15 = r15[r18]     // Catch:{ all -> 0x0452 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0452 }
            byte[] r21 = getMin     // Catch:{ all -> 0x0452 }
            byte r13 = r21[r5]     // Catch:{ all -> 0x0452 }
            short r13 = (short) r13     // Catch:{ all -> 0x0452 }
            java.lang.String r13 = setMax(r15, r13, r10)     // Catch:{ all -> 0x0452 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0452 }
            r15 = 0
            r8[r15] = r13     // Catch:{ all -> 0x0452 }
            java.lang.reflect.Method r3 = r3.getMethod(r7, r8)     // Catch:{ all -> 0x0452 }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x0452 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0516 }
            goto L_0x0394
        L_0x0452:
            r0 = move-exception
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x0516 }
            if (r3 == 0) goto L_0x045a
            throw r3     // Catch:{ all -> 0x0516 }
        L_0x045a:
            throw r0     // Catch:{ all -> 0x0516 }
        L_0x045b:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r5     // Catch:{ all -> 0x0516 }
            r1.getMax(r9)     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0516 }
            java.lang.String r0 = r0.toString()     // Catch:{ all -> 0x0516 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0516 }
            goto L_0x0394
        L_0x0471:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 324(0x144, float:4.54E-43)
            goto L_0x0729
        L_0x0479:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 233(0xe9, float:3.27E-43)
            goto L_0x0729
        L_0x0481:
            return
        L_0x0482:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 100
            goto L_0x063b
        L_0x048a:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r5     // Catch:{ all -> 0x0516 }
            r1.getMax(r9)     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0516 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0516 }
            o.isMainThread$getMin r0 = r0.getMax     // Catch:{ all -> 0x0516 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0516 }
            goto L_0x0394
        L_0x04a0:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r9     // Catch:{ all -> 0x0516 }
            r1.getMax(r9)     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0516 }
            o.isMainThread$getMin r0 = (o.isMainThread.getMin) r0     // Catch:{ all -> 0x0516 }
            r1.getMax(r11)     // Catch:{ all -> 0x0516 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x0516 }
            java.lang.String r3 = (java.lang.String) r3     // Catch:{ all -> 0x0516 }
            r0.onError(r3)     // Catch:{ all -> 0x0516 }
            goto L_0x0397
        L_0x04bc:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 70
            goto L_0x0729
        L_0x04c4:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 1
            goto L_0x063b
        L_0x04cb:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r15)     // Catch:{ all -> 0x0516 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0516 }
            r3 = 66
            if (r0 == r3) goto L_0x04de
            r3 = 98
            r0 = 167(0xa7, float:2.34E-43)
            goto L_0x0729
        L_0x04de:
            r0 = 107(0x6b, float:1.5E-43)
            goto L_0x0729
        L_0x04e2:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 212(0xd4, float:2.97E-43)
            goto L_0x0729
        L_0x04ea:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 133(0x85, float:1.86E-43)
            goto L_0x0729
        L_0x04f2:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 41
            goto L_0x0729
        L_0x04fa:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r15)     // Catch:{ all -> 0x0516 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0516 }
            r3 = 13
            if (r0 == r3) goto L_0x0510
            r3 = 46
            if (r0 == r3) goto L_0x050c
            goto L_0x0512
        L_0x050c:
            r0 = 245(0xf5, float:3.43E-43)
            goto L_0x0729
        L_0x0510:
            r3 = 46
        L_0x0512:
            r0 = 200(0xc8, float:2.8E-43)
            goto L_0x0729
        L_0x0516:
            r0 = move-exception
        L_0x0517:
            r3 = 46
            goto L_0x06b3
        L_0x051b:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r5     // Catch:{ all -> 0x06b2 }
            r1.getMax(r9)     // Catch:{ all -> 0x06b2 }
            r1.getMax(r11)     // Catch:{ all -> 0x06b2 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x06b2 }
            id.dana.data.base.NetworkException r0 = (id.dana.data.base.NetworkException) r0     // Catch:{ all -> 0x06b2 }
            java.lang.String r0 = r0.getErrorCode()     // Catch:{ all -> 0x06b2 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x06b2 }
        L_0x0533:
            r1.getMax(r12)     // Catch:{ all -> 0x06b2 }
            goto L_0x064c
        L_0x0538:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 112(0x70, float:1.57E-43)
            goto L_0x0729
        L_0x0542:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 193(0xc1, float:2.7E-43)
            goto L_0x0729
        L_0x054c:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r5     // Catch:{ all -> 0x06b2 }
            r1.getMax(r9)     // Catch:{ all -> 0x06b2 }
            r1.getMax(r11)     // Catch:{ all -> 0x06b2 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x06b2 }
            id.dana.data.base.NetworkException r0 = (id.dana.data.base.NetworkException) r0     // Catch:{ all -> 0x06b2 }
            java.lang.Integer r0 = r0.getLeftTimes()     // Catch:{ all -> 0x06b2 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x06b2 }
            goto L_0x0533
        L_0x0565:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 252(0xfc, float:3.53E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x06b2 }
            int r0 = r1.setMin     // Catch:{ all -> 0x06b2 }
            if (r0 != 0) goto L_0x0728
            r0 = 232(0xe8, float:3.25E-43)
            goto L_0x0729
        L_0x0578:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 136(0x88, float:1.9E-43)
            goto L_0x0729
        L_0x0582:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 220(0xdc, float:3.08E-43)
            goto L_0x0729
        L_0x058c:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r15)     // Catch:{ all -> 0x06b2 }
            int r0 = r1.setMin     // Catch:{ all -> 0x06b2 }
            r6 = 26
            if (r0 == r6) goto L_0x05a4
            r6 = 42
            if (r0 == r6) goto L_0x05a0
            goto L_0x05a4
        L_0x05a0:
            r0 = 289(0x121, float:4.05E-43)
            goto L_0x0729
        L_0x05a4:
            r0 = 161(0xa1, float:2.26E-43)
            goto L_0x0729
        L_0x05a8:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 300(0x12c, float:4.2E-43)
            goto L_0x0729
        L_0x05b2:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r15)     // Catch:{ all -> 0x06b2 }
            int r0 = r1.setMin     // Catch:{ all -> 0x06b2 }
            if (r0 == 0) goto L_0x05c3
            r0 = 195(0xc3, float:2.73E-43)
            goto L_0x0729
        L_0x05c3:
            r0 = 172(0xac, float:2.41E-43)
            goto L_0x0729
        L_0x05c7:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 241(0xf1, float:3.38E-43)
            goto L_0x0729
        L_0x05d1:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r7)     // Catch:{ all -> 0x06b2 }
            int r0 = r1.setMin     // Catch:{ all -> 0x06b2 }
            if (r0 != 0) goto L_0x0728
            r0 = 265(0x109, float:3.71E-43)
            goto L_0x0729
        L_0x05e2:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 197(0xc5, float:2.76E-43)
            goto L_0x0729
        L_0x05ec:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r11     // Catch:{ all -> 0x06b2 }
            r1.getMax(r9)     // Catch:{ all -> 0x06b2 }
            r1.getMax(r11)     // Catch:{ all -> 0x06b2 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x06b2 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x06b2 }
            r1.getMax(r11)     // Catch:{ all -> 0x06b2 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x06b2 }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x06b2 }
            r1.getMax(r11)     // Catch:{ all -> 0x06b2 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x06b2 }
            java.lang.Throwable r7 = (java.lang.Throwable) r7     // Catch:{ all -> 0x06b2 }
            r0.setMax(r6, r7)     // Catch:{ all -> 0x06b2 }
            goto L_0x064c
        L_0x0610:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 21
            goto L_0x0729
        L_0x061a:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r6)     // Catch:{ all -> 0x06b2 }
            int r0 = r1.setMin     // Catch:{ all -> 0x06b2 }
            if (r0 != 0) goto L_0x0728
            r0 = 282(0x11a, float:3.95E-43)
            goto L_0x0729
        L_0x062b:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 194(0xc2, float:2.72E-43)
            goto L_0x0729
        L_0x0635:
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 106(0x6a, float:1.49E-43)
        L_0x063b:
            r7 = 0
            r12 = 32
            goto L_0x012a
        L_0x0640:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            java.lang.String r0 = "[PinLogin] login error: "
            r1.IsOverlapping = r0     // Catch:{ all -> 0x06b2 }
            goto L_0x0533
        L_0x064c:
            r13 = 0
            goto L_0x0728
        L_0x064f:
            r3 = 46
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.setMax = r5     // Catch:{ all -> 0x06b2 }
            r1.getMax(r9)     // Catch:{ all -> 0x06b2 }
            r1.getMax(r11)     // Catch:{ all -> 0x06b2 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x06b2 }
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x06a8 }
            r7 = 0
            r6[r7] = r0     // Catch:{ all -> 0x06a8 }
            byte[] r0 = getMin     // Catch:{ all -> 0x06a8 }
            r7 = 8
            byte r0 = r0[r7]     // Catch:{ all -> 0x06a8 }
            byte r0 = (byte) r0     // Catch:{ all -> 0x06a8 }
            byte[] r7 = getMin     // Catch:{ all -> 0x06a8 }
            r8 = 5903(0x170f, float:8.272E-42)
            byte r7 = r7[r8]     // Catch:{ all -> 0x06a8 }
            int r7 = -r7
            short r7 = (short) r7     // Catch:{ all -> 0x06a8 }
            r8 = 5049(0x13b9, float:7.075E-42)
            short r8 = (short) r8     // Catch:{ all -> 0x06a8 }
            java.lang.String r0 = setMax(r0, r7, r8)     // Catch:{ all -> 0x06a8 }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x06a8 }
            java.lang.Class[] r7 = new java.lang.Class[r5]     // Catch:{ all -> 0x06a8 }
            byte[] r8 = getMin     // Catch:{ all -> 0x06a8 }
            r13 = 8
            byte r8 = r8[r13]     // Catch:{ all -> 0x06a8 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x06a8 }
            byte[] r13 = getMin     // Catch:{ all -> 0x06a8 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x06a8 }
            short r13 = (short) r13     // Catch:{ all -> 0x06a8 }
            java.lang.String r8 = setMax(r8, r13, r10)     // Catch:{ all -> 0x06a8 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x06a8 }
            r13 = 0
            r7[r13] = r8     // Catch:{ all -> 0x06a6 }
            java.lang.reflect.Constructor r0 = r0.getDeclaredConstructor(r7)     // Catch:{ all -> 0x06a6 }
            java.lang.Object r0 = r0.newInstance(r6)     // Catch:{ all -> 0x06a6 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0712 }
            r1.getMax(r12)     // Catch:{ all -> 0x0712 }
            goto L_0x0728
        L_0x06a6:
            r0 = move-exception
            goto L_0x06aa
        L_0x06a8:
            r0 = move-exception
            r13 = 0
        L_0x06aa:
            java.lang.Throwable r6 = r0.getCause()     // Catch:{ all -> 0x0712 }
            if (r6 == 0) goto L_0x06b1
            throw r6     // Catch:{ all -> 0x0712 }
        L_0x06b1:
            throw r0     // Catch:{ all -> 0x0712 }
        L_0x06b2:
            r0 = move-exception
        L_0x06b3:
            r13 = 0
            goto L_0x0737
        L_0x06b6:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 339(0x153, float:4.75E-43)
            goto L_0x0729
        L_0x06c1:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r6)     // Catch:{ all -> 0x0712 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0712 }
            if (r0 != 0) goto L_0x0728
            r0 = 323(0x143, float:4.53E-43)
            goto L_0x0729
        L_0x06d2:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 198(0xc6, float:2.77E-43)
            goto L_0x0729
        L_0x06dc:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 191(0xbf, float:2.68E-43)
            goto L_0x0729
        L_0x06e6:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r7)     // Catch:{ all -> 0x0712 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0712 }
            if (r0 != 0) goto L_0x0728
            r0 = 334(0x14e, float:4.68E-43)
            goto L_0x0729
        L_0x06f7:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 179(0xb3, float:2.51E-43)
            goto L_0x0729
        L_0x0701:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r1.getMax(r7)     // Catch:{ all -> 0x0712 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0712 }
            if (r0 != 0) goto L_0x0728
            r0 = 360(0x168, float:5.04E-43)
            goto L_0x0729
        L_0x0712:
            r0 = move-exception
            goto L_0x0737
        L_0x0714:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 180(0xb4, float:2.52E-43)
            goto L_0x0729
        L_0x071e:
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
            r0 = 170(0xaa, float:2.38E-43)
            goto L_0x0729
        L_0x0728:
            r0 = r14
        L_0x0729:
            r7 = 0
            r12 = 32
            r13 = 0
            goto L_0x012a
        L_0x072f:
            r0 = move-exception
            r3 = 46
            r13 = 0
            r16 = 4119(0x1017, float:5.772E-42)
            r20 = 32
        L_0x0737:
            byte[] r6 = getMin
            r7 = 8
            byte r8 = r6[r7]
            byte r7 = (byte) r8
            r8 = 4868(0x1304, float:6.822E-42)
            byte r6 = r6[r8]
            short r6 = (short) r6
            r12 = 10554(0x293a, float:1.479E-41)
            short r12 = (short) r12
            java.lang.String r6 = setMax(r7, r6, r12)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r7 = 222(0xde, float:3.11E-43)
            r12 = 236(0xec, float:3.31E-43)
            if (r6 == 0) goto L_0x0766
            r6 = 93
            if (r14 < r6) goto L_0x0768
            r15 = 100
            if (r14 > r15) goto L_0x0768
        L_0x0760:
            r5 = 8
            r12 = 222(0xde, float:3.11E-43)
            goto L_0x08e5
        L_0x0766:
            r6 = 93
        L_0x0768:
            byte[] r15 = getMin
            r18 = 8
            byte r3 = r15[r18]
            byte r3 = (byte) r3
            r19 = 7392(0x1ce0, float:1.0358E-41)
            byte r15 = r15[r19]
            short r15 = (short) r15
            r5 = 10605(0x296d, float:1.4861E-41)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r15, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0791
            r3 = 100
            if (r14 < r3) goto L_0x0793
            r5 = 101(0x65, float:1.42E-43)
            if (r14 > r5) goto L_0x0793
        L_0x078d:
            r5 = 8
            goto L_0x08e5
        L_0x0791:
            r3 = 100
        L_0x0793:
            byte[] r5 = getMin
            r15 = 8
            byte r3 = r5[r15]
            byte r3 = (byte) r3
            r15 = r3 & 227(0xe3, float:3.18E-43)
            short r15 = (short) r15
            byte r5 = r5[r8]
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r15, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x07b7
            r3 = 102(0x66, float:1.43E-43)
            if (r14 < r3) goto L_0x07b7
            r3 = 106(0x6a, float:1.49E-43)
            if (r14 > r3) goto L_0x07b9
            goto L_0x078d
        L_0x07b7:
            r3 = 106(0x6a, float:1.49E-43)
        L_0x07b9:
            byte[] r5 = getMin
            r15 = 8
            byte r3 = r5[r15]
            byte r3 = (byte) r3
            r15 = 49
            byte r5 = r5[r15]
            short r5 = (short) r5
            r15 = 9600(0x2580, float:1.3452E-41)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r3, r5, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x07df
            r3 = 112(0x70, float:1.57E-43)
            if (r14 < r3) goto L_0x07df
            r3 = 113(0x71, float:1.58E-43)
            if (r14 > r3) goto L_0x07df
            goto L_0x078d
        L_0x07df:
            byte[] r3 = getMin
            r5 = 8
            byte r15 = r3[r5]
            byte r5 = (byte) r15
            r15 = 13
            byte r3 = r3[r15]
            short r3 = (short) r3
            int r15 = length
            r15 = r15 | 7588(0x1da4, float:1.0633E-41)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r5, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0807
            r3 = 128(0x80, float:1.794E-43)
            if (r14 < r3) goto L_0x0807
            r3 = 129(0x81, float:1.81E-43)
            if (r14 > r3) goto L_0x0807
            goto L_0x078d
        L_0x0807:
            r3 = 173(0xad, float:2.42E-43)
            if (r14 < r3) goto L_0x0817
            r3 = 176(0xb0, float:2.47E-43)
            if (r14 > r3) goto L_0x0817
            r3 = 20
            r5 = 8
            r12 = 20
            goto L_0x08e5
        L_0x0817:
            byte[] r3 = getMin
            r5 = 8
            byte r15 = r3[r5]
            byte r5 = (byte) r15
            r15 = r5 & 227(0xe3, float:3.18E-43)
            short r15 = (short) r15
            byte r3 = r3[r8]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r5, r15, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x083c
            r3 = 183(0xb7, float:2.56E-43)
            if (r14 < r3) goto L_0x083c
            r3 = 184(0xb8, float:2.58E-43)
            if (r14 > r3) goto L_0x083c
            goto L_0x0760
        L_0x083c:
            byte[] r3 = getMin
            r5 = 8
            byte r8 = r3[r5]
            byte r5 = (byte) r8
            r8 = 4869(0x1305, float:6.823E-42)
            byte r3 = r3[r8]
            short r3 = (short) r3
            r8 = 1139(0x473, float:1.596E-42)
            short r8 = (short) r8
            java.lang.String r3 = setMax(r5, r3, r8)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0863
            r3 = 185(0xb9, float:2.59E-43)
            if (r14 < r3) goto L_0x0863
            r3 = 186(0xba, float:2.6E-43)
            if (r14 > r3) goto L_0x0863
            goto L_0x078d
        L_0x0863:
            byte[] r3 = getMin
            r5 = 8
            byte r15 = r3[r5]
            byte r5 = (byte) r15
            r15 = 13
            byte r3 = r3[r15]
            short r3 = (short) r3
            int r15 = length
            r15 = r15 | 7588(0x1da4, float:1.0633E-41)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r5, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x088c
            r3 = 186(0xba, float:2.6E-43)
            if (r14 < r3) goto L_0x088c
            r3 = 189(0xbd, float:2.65E-43)
            if (r14 > r3) goto L_0x088c
            goto L_0x0760
        L_0x088c:
            r3 = 294(0x126, float:4.12E-43)
            if (r14 < r3) goto L_0x089b
            r3 = 298(0x12a, float:4.18E-43)
            if (r14 > r3) goto L_0x089b
            r3 = 189(0xbd, float:2.65E-43)
            r5 = 8
            r12 = 189(0xbd, float:2.65E-43)
            goto L_0x08e5
        L_0x089b:
            byte[] r3 = getMin
            r5 = 8
            byte r15 = r3[r5]
            byte r5 = (byte) r15
            r15 = 1156(0x484, float:1.62E-42)
            byte r3 = r3[r15]
            int r3 = -r3
            short r3 = (short) r3
            r15 = 5857(0x16e1, float:8.207E-42)
            short r15 = (short) r15
            java.lang.String r3 = setMax(r5, r3, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x08c3
            r3 = 300(0x12c, float:4.2E-43)
            if (r14 < r3) goto L_0x08c3
            r3 = 301(0x12d, float:4.22E-43)
            if (r14 > r3) goto L_0x08c3
            goto L_0x0760
        L_0x08c3:
            byte[] r3 = getMin
            r5 = 8
            byte r7 = r3[r5]
            byte r7 = (byte) r7
            r15 = 4869(0x1305, float:6.823E-42)
            byte r3 = r3[r15]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r7, r3, r8)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x08f0
            r3 = 318(0x13e, float:4.46E-43)
            if (r14 < r3) goto L_0x08f0
            r3 = 319(0x13f, float:4.47E-43)
            if (r14 > r3) goto L_0x08f0
        L_0x08e5:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r12
            r5 = 1
            goto L_0x0729
        L_0x08f0:
            throw r0
        L_0x08f1:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x08f9
            throw r1
        L_0x08f9:
            goto L_0x08fb
        L_0x08fa:
            throw r0
        L_0x08fb:
            goto L_0x08fa
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMax(java.lang.Throwable):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ o.ShareRecyclerAdapter.ShareViewHolder setMin(o.onValidateSchema r18) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r18
            r1.<init>(r0)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r2 = r0 | 228(0xe4, float:3.2E-43)
            short r2 = (short) r2
            r3 = 8918(0x22d6, float:1.2497E-41)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r4 = (short) r2
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r2 = setMax(r2, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x02c8 }
            r6 = 0
            r5[r6] = r2     // Catch:{ all -> 0x02c8 }
            byte[] r2 = getMin     // Catch:{ all -> 0x02c8 }
            r7 = 8
            byte r2 = r2[r7]     // Catch:{ all -> 0x02c8 }
            byte r2 = (byte) r2     // Catch:{ all -> 0x02c8 }
            byte[] r8 = getMin     // Catch:{ all -> 0x02c8 }
            byte r8 = r8[r4]     // Catch:{ all -> 0x02c8 }
            short r8 = (short) r8     // Catch:{ all -> 0x02c8 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x02c8 }
            java.lang.String r2 = setMax(r2, r8, r9)     // Catch:{ all -> 0x02c8 }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x02c8 }
            byte[] r8 = getMin     // Catch:{ all -> 0x02c8 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x02c8 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x02c8 }
            byte[] r10 = getMin     // Catch:{ all -> 0x02c8 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x02c8 }
            short r10 = (short) r10     // Catch:{ all -> 0x02c8 }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x02c8 }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x02c8 }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x02c8 }
            byte[] r11 = getMin     // Catch:{ all -> 0x02c8 }
            byte r11 = r11[r7]     // Catch:{ all -> 0x02c8 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x02c8 }
            byte[] r12 = getMin     // Catch:{ all -> 0x02c8 }
            byte r12 = r12[r4]     // Catch:{ all -> 0x02c8 }
            short r12 = (short) r12     // Catch:{ all -> 0x02c8 }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x02c8 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x02c8 }
            r10[r6] = r11     // Catch:{ all -> 0x02c8 }
            java.lang.reflect.Method r2 = r2.getMethod(r8, r10)     // Catch:{ all -> 0x02c8 }
            java.lang.Object r0 = r2.invoke(r0, r5)     // Catch:{ all -> 0x02c8 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x02c8 }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r5 = 0
        L_0x007d:
            int r8 = r0.length
            r10 = 32
            if (r5 >= r8) goto L_0x011d
            r8 = r0[r5]
            java.lang.Object[] r11 = new java.lang.Object[r4]     // Catch:{ all -> 0x0114 }
            r11[r6] = r8     // Catch:{ all -> 0x0114 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0114 }
            byte r8 = r8[r7]     // Catch:{ all -> 0x0114 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0114 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0114 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0114 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0114 }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0114 }
            java.lang.String r8 = setMax(r8, r12, r14)     // Catch:{ all -> 0x0114 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0114 }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x0114 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0114 }
            byte r10 = r15[r10]     // Catch:{ all -> 0x0114 }
            short r10 = (short) r10     // Catch:{ all -> 0x0114 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0114 }
            java.lang.String r10 = setMax(r12, r10, r15)     // Catch:{ all -> 0x0114 }
            java.lang.Class[] r12 = new java.lang.Class[r4]     // Catch:{ all -> 0x0114 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0114 }
            byte r15 = r15[r7]     // Catch:{ all -> 0x0114 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0114 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0114 }
            byte r3 = r16[r4]     // Catch:{ all -> 0x0114 }
            short r3 = (short) r3     // Catch:{ all -> 0x0114 }
            java.lang.String r3 = setMax(r15, r3, r9)     // Catch:{ all -> 0x0114 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0114 }
            r12[r6] = r3     // Catch:{ all -> 0x0114 }
            java.lang.reflect.Method r3 = r8.getMethod(r10, r12)     // Catch:{ all -> 0x0114 }
            r8 = 0
            java.lang.Object r3 = r3.invoke(r8, r11)     // Catch:{ all -> 0x0114 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010b }
            byte r10 = r10[r7]     // Catch:{ all -> 0x010b }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r13]     // Catch:{ all -> 0x010b }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010b }
            java.lang.String r10 = setMax(r10, r11, r14)     // Catch:{ all -> 0x010b }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r7]     // Catch:{ all -> 0x010b }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x010b }
            byte[] r12 = getMin     // Catch:{ all -> 0x010b }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010b }
            short r12 = (short) r12     // Catch:{ all -> 0x010b }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010b }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010b }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r8)     // Catch:{ all -> 0x010b }
            java.lang.Object r3 = r10.invoke(r3, r8)     // Catch:{ all -> 0x010b }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x010b }
            int r3 = r3.intValue()     // Catch:{ all -> 0x010b }
            r2[r5] = r3
            int r5 = r5 + 1
            r3 = 15
            goto L_0x007d
        L_0x010b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0113
            throw r1
        L_0x0113:
            throw r0
        L_0x0114:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011c
            throw r1
        L_0x011c:
            throw r0
        L_0x011d:
            r3 = 49
            r5 = 39
        L_0x0121:
            r8 = 29
            r9 = 3
        L_0x0124:
            int r11 = r6 + 1
            r12 = 56
            r0 = r2[r6]     // Catch:{ all -> 0x01ce }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01ce }
            r6 = 2
            r13 = 34
            r14 = 9
            switch(r0) {
                case -18: goto L_0x01ba;
                case -17: goto L_0x01b6;
                case -16: goto L_0x01a1;
                case -15: goto L_0x0199;
                case -14: goto L_0x0188;
                case -13: goto L_0x0186;
                case -12: goto L_0x0183;
                case -11: goto L_0x0177;
                case -10: goto L_0x0175;
                case -9: goto L_0x016d;
                case -8: goto L_0x016a;
                case -7: goto L_0x0167;
                case -6: goto L_0x0164;
                case -5: goto L_0x0158;
                case -4: goto L_0x0149;
                case -3: goto L_0x013e;
                case -2: goto L_0x013b;
                case -1: goto L_0x0138;
                default: goto L_0x0136;
            }     // Catch:{ all -> 0x01ce }
        L_0x0136:
            goto L_0x01cb
        L_0x0138:
            r6 = 32
            goto L_0x0124
        L_0x013b:
            r6 = 49
            goto L_0x0124
        L_0x013e:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01ce }
            r1.setMax = r0     // Catch:{ all -> 0x01ce }
            r0 = 18
            r1.getMax(r0)     // Catch:{ all -> 0x01ce }
            goto L_0x01cb
        L_0x0149:
            r1.setMax = r4     // Catch:{ all -> 0x01ce }
            r1.getMax(r6)     // Catch:{ all -> 0x01ce }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x01ce }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ce }
            invoke = r0     // Catch:{ all -> 0x01ce }
            goto L_0x01cb
        L_0x0158:
            r1.getMax(r13)     // Catch:{ all -> 0x01ce }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ce }
            if (r0 != 0) goto L_0x01cb
            r0 = 28
            r6 = 28
            goto L_0x0124
        L_0x0164:
            r6 = 50
            goto L_0x0124
        L_0x0167:
            r6 = 29
            goto L_0x0124
        L_0x016a:
            r6 = 60
            goto L_0x0124
        L_0x016d:
            r1.getMax(r7)     // Catch:{ all -> 0x01ce }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01ce }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01ce }
            throw r0     // Catch:{ all -> 0x01ce }
        L_0x0175:
            r6 = 3
            goto L_0x0124
        L_0x0177:
            r1.getMax(r13)     // Catch:{ all -> 0x01ce }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ce }
            if (r0 != 0) goto L_0x01cb
            r0 = 47
            r6 = 47
            goto L_0x0124
        L_0x0183:
            r6 = 37
            goto L_0x0124
        L_0x0186:
            r6 = 1
            goto L_0x0124
        L_0x0188:
            r1.getMax(r14)     // Catch:{ all -> 0x01ce }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ce }
            r6 = 61
            if (r0 == 0) goto L_0x0124
            if (r0 == r4) goto L_0x0194
            goto L_0x0124
        L_0x0194:
            r0 = 52
            r6 = 52
            goto L_0x0124
        L_0x0199:
            r1.getMax(r7)     // Catch:{ all -> 0x01ce }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01ce }
            o.ShareRecyclerAdapter$ShareViewHolder r0 = (o.ShareRecyclerAdapter.ShareViewHolder) r0     // Catch:{ all -> 0x01ce }
            return r0
        L_0x01a1:
            r1.setMax = r4     // Catch:{ all -> 0x01ce }
            r1.getMax(r6)     // Catch:{ all -> 0x01ce }
            r1.getMax(r9)     // Catch:{ all -> 0x01ce }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01ce }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01ce }
            o.ShareRecyclerAdapter$ShareViewHolder r0 = r0.FastBitmap$CoordinateSystem     // Catch:{ all -> 0x01ce }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01ce }
            r0 = 4
            r1.getMax(r0)     // Catch:{ all -> 0x01ce }
            goto L_0x01cb
        L_0x01b6:
            r6 = 39
            goto L_0x0124
        L_0x01ba:
            r1.getMax(r14)     // Catch:{ all -> 0x01ce }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ce }
            r6 = 63
            if (r0 == r4) goto L_0x01c7
            r11 = 77
            goto L_0x0124
        L_0x01c7:
            r6 = 56
            goto L_0x0124
        L_0x01cb:
            r6 = r11
            goto L_0x0124
        L_0x01ce:
            r0 = move-exception
            byte[] r6 = getMin
            byte r13 = r6[r7]
            byte r13 = (byte) r13
            r14 = 7392(0x1ce0, float:1.0358E-41)
            byte r6 = r6[r14]
            short r6 = (short) r6
            r15 = 10605(0x296d, float:1.4861E-41)
            short r15 = (short) r15
            java.lang.String r6 = setMax(r13, r6, r15)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r13 = 59
            r16 = 48
            if (r6 == 0) goto L_0x01f8
            if (r11 < r9) goto L_0x01f8
            if (r11 > r8) goto L_0x01f8
        L_0x01f2:
            r6 = 48
        L_0x01f4:
            r12 = 15
            goto L_0x02bf
        L_0x01f8:
            byte[] r6 = getMin
            byte r4 = r6[r7]
            byte r4 = (byte) r4
            r17 = 4869(0x1305, float:6.823E-42)
            byte r6 = r6[r17]
            short r6 = (short) r6
            r9 = 1139(0x473, float:1.596E-42)
            short r9 = (short) r9
            java.lang.String r4 = setMax(r4, r6, r9)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x021a
            r4 = 24
            if (r11 < r4) goto L_0x021a
            if (r11 > r8) goto L_0x021a
            goto L_0x01f2
        L_0x021a:
            byte[] r4 = getMin
            byte r6 = r4[r7]
            byte r6 = (byte) r6
            r9 = 4868(0x1304, float:6.822E-42)
            byte r4 = r4[r9]
            short r4 = (short) r4
            r8 = 10554(0x293a, float:1.479E-41)
            short r8 = (short) r8
            java.lang.String r4 = setMax(r6, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x023e
            if (r11 < r5) goto L_0x023e
            r4 = 40
            if (r11 > r4) goto L_0x023e
        L_0x023b:
            r6 = 59
            goto L_0x01f4
        L_0x023e:
            byte[] r4 = getMin
            byte r6 = r4[r7]
            byte r6 = (byte) r6
            r8 = 1156(0x484, float:1.62E-42)
            byte r4 = r4[r8]
            int r4 = -r4
            short r4 = (short) r4
            r8 = 5857(0x16e1, float:8.207E-42)
            short r8 = (short) r8
            java.lang.String r4 = setMax(r6, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0263
            r4 = 43
            if (r11 < r4) goto L_0x0263
            r4 = 44
            if (r11 > r4) goto L_0x0263
            goto L_0x023b
        L_0x0263:
            r4 = 53
            if (r11 < r4) goto L_0x026e
            if (r11 > r12) goto L_0x026e
            r4 = 36
            r6 = 36
            goto L_0x01f4
        L_0x026e:
            byte[] r4 = getMin
            byte r6 = r4[r7]
            byte r6 = (byte) r6
            byte r4 = r4[r14]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r6, r4, r15)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x028e
            r4 = 57
            if (r11 < r4) goto L_0x028e
            r4 = 58
            if (r11 > r4) goto L_0x028e
            goto L_0x01f2
        L_0x028e:
            r4 = 65
            if (r11 < r4) goto L_0x029c
            r6 = 69
            if (r11 > r6) goto L_0x029c
            r4 = 31
            r6 = 31
            goto L_0x01f4
        L_0x029c:
            byte[] r6 = getMin
            byte r8 = r6[r7]
            byte r8 = (byte) r8
            byte r9 = r6[r9]
            short r9 = (short) r9
            r12 = 15
            byte r6 = r6[r12]
            short r6 = (short) r6
            java.lang.String r6 = setMax(r8, r9, r6)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x02c7
            r6 = 64
            if (r11 < r6) goto L_0x02c7
            if (r11 > r4) goto L_0x02c7
            r6 = 48
        L_0x02bf:
            r1.IsOverlapping = r0
            r1.getMax(r3)
            r4 = 1
            goto L_0x0121
        L_0x02c7:
            throw r0
        L_0x02c8:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x02d0
            throw r1
        L_0x02d0:
            goto L_0x02d2
        L_0x02d1:
            throw r0
        L_0x02d2:
            goto L_0x02d1
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMin(o.onValidateSchema):o.ShareRecyclerAdapter$ShareViewHolder");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x032d, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:0x0354, code lost:
        r0 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:135:0x03b9, code lost:
        r3 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x042b, code lost:
        r13 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:173:0x0445, code lost:
        r13 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:174:0x0446, code lost:
        r0 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x04c9, code lost:
        if (r11 <= 12) goto L_0x04cb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:230:0x0579, code lost:
        if (r11 <= 87) goto L_0x0552;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0145, code lost:
        r3 = r13;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x017e, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x019d, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Removed duplicated region for block: B:111:0x033c A[Catch:{ all -> 0x0332, all -> 0x03d7 }] */
    /* JADX WARNING: Removed duplicated region for block: B:112:0x033d A[Catch:{ all -> 0x0332, all -> 0x03d7 }] */
    /* JADX WARNING: Removed duplicated region for block: B:158:0x0417 A[Catch:{ all -> 0x040d, all -> 0x0443 }] */
    /* JADX WARNING: Removed duplicated region for block: B:159:0x0418 A[Catch:{ all -> 0x040d, all -> 0x0443 }] */
    /* JADX WARNING: Removed duplicated region for block: B:180:0x046c A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:191:0x04a0  */
    /* JADX WARNING: Removed duplicated region for block: B:192:0x04a4  */
    /* JADX WARNING: Removed duplicated region for block: B:211:0x0500  */
    /* JADX WARNING: Removed duplicated region for block: B:212:0x0505  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void setMin(boolean r21) {
        /*
            r20 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r20
            r0 = r21
            r1.<init>((java.lang.Object) r2, (int) r0)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = r0 | 640(0x280, float:8.97E-43)
            short r4 = (short) r4
            r5 = r4 | 4430(0x114e, float:6.208E-42)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r6 = (short) r4
            r7 = r6 | 4577(0x11e1, float:6.414E-42)
            short r7 = (short) r7
            java.lang.String r4 = setMax(r4, r6, r7)
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ all -> 0x05f9 }
            r8 = 0
            r7[r8] = r4     // Catch:{ all -> 0x05f9 }
            byte[] r4 = getMin     // Catch:{ all -> 0x05f9 }
            r9 = 8
            byte r4 = r4[r9]     // Catch:{ all -> 0x05f9 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x05f9 }
            byte[] r10 = getMin     // Catch:{ all -> 0x05f9 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x05f9 }
            short r10 = (short) r10     // Catch:{ all -> 0x05f9 }
            r11 = 9395(0x24b3, float:1.3165E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x05f9 }
            java.lang.String r4 = setMax(r4, r10, r11)     // Catch:{ all -> 0x05f9 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x05f9 }
            byte[] r10 = getMin     // Catch:{ all -> 0x05f9 }
            r12 = 2662(0xa66, float:3.73E-42)
            byte r10 = r10[r12]     // Catch:{ all -> 0x05f9 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x05f9 }
            byte[] r12 = getMin     // Catch:{ all -> 0x05f9 }
            r13 = 30
            byte r12 = r12[r13]     // Catch:{ all -> 0x05f9 }
            short r12 = (short) r12     // Catch:{ all -> 0x05f9 }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x05f9 }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x05f9 }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x05f9 }
            byte[] r13 = getMin     // Catch:{ all -> 0x05f9 }
            byte r13 = r13[r9]     // Catch:{ all -> 0x05f9 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x05f9 }
            byte[] r14 = getMin     // Catch:{ all -> 0x05f9 }
            byte r14 = r14[r6]     // Catch:{ all -> 0x05f9 }
            short r14 = (short) r14     // Catch:{ all -> 0x05f9 }
            java.lang.String r13 = setMax(r13, r14, r11)     // Catch:{ all -> 0x05f9 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x05f9 }
            r12[r8] = r13     // Catch:{ all -> 0x05f9 }
            java.lang.reflect.Method r4 = r4.getMethod(r10, r12)     // Catch:{ all -> 0x05f9 }
            java.lang.Object r0 = r4.invoke(r0, r7)     // Catch:{ all -> 0x05f9 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x05f9 }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r7 = 0
        L_0x007f:
            int r10 = r0.length
            r12 = 32
            r13 = 0
            if (r7 >= r10) goto L_0x0129
            r10 = r0[r7]
            java.lang.Object[] r14 = new java.lang.Object[r6]     // Catch:{ all -> 0x0120 }
            r14[r8] = r10     // Catch:{ all -> 0x0120 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0120 }
            byte r10 = r10[r9]     // Catch:{ all -> 0x0120 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0120 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0120 }
            r16 = 4119(0x1017, float:5.772E-42)
            byte r15 = r15[r16]     // Catch:{ all -> 0x0120 }
            int r15 = -r15
            short r15 = (short) r15     // Catch:{ all -> 0x0120 }
            r3 = 1123(0x463, float:1.574E-42)
            short r3 = (short) r3     // Catch:{ all -> 0x0120 }
            java.lang.String r10 = setMax(r10, r15, r3)     // Catch:{ all -> 0x0120 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0120 }
            r15 = 74
            byte r15 = (byte) r15     // Catch:{ all -> 0x0120 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0120 }
            byte r12 = r16[r12]     // Catch:{ all -> 0x0120 }
            short r12 = (short) r12     // Catch:{ all -> 0x0120 }
            r5 = 10257(0x2811, float:1.4373E-41)
            short r5 = (short) r5     // Catch:{ all -> 0x0120 }
            java.lang.String r5 = setMax(r15, r12, r5)     // Catch:{ all -> 0x0120 }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x0120 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0120 }
            byte r15 = r15[r9]     // Catch:{ all -> 0x0120 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0120 }
            byte[] r17 = getMin     // Catch:{ all -> 0x0120 }
            byte r9 = r17[r6]     // Catch:{ all -> 0x0120 }
            short r9 = (short) r9     // Catch:{ all -> 0x0120 }
            java.lang.String r9 = setMax(r15, r9, r11)     // Catch:{ all -> 0x0120 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0120 }
            r12[r8] = r9     // Catch:{ all -> 0x0120 }
            java.lang.reflect.Method r5 = r10.getMethod(r5, r12)     // Catch:{ all -> 0x0120 }
            java.lang.Object r5 = r5.invoke(r13, r14)     // Catch:{ all -> 0x0120 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0117 }
            r10 = 8
            byte r9 = r9[r10]     // Catch:{ all -> 0x0117 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0117 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0117 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r10 = r10[r12]     // Catch:{ all -> 0x0117 }
            int r10 = -r10
            short r10 = (short) r10     // Catch:{ all -> 0x0117 }
            java.lang.String r3 = setMax(r9, r10, r3)     // Catch:{ all -> 0x0117 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0117 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0117 }
            r10 = 8
            byte r9 = r9[r10]     // Catch:{ all -> 0x0117 }
            int r9 = r9 - r6
            byte r9 = (byte) r9     // Catch:{ all -> 0x0117 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0117 }
            r12 = 73
            byte r10 = r10[r12]     // Catch:{ all -> 0x0117 }
            short r10 = (short) r10     // Catch:{ all -> 0x0117 }
            r12 = r10 | 10256(0x2810, float:1.4372E-41)
            short r12 = (short) r12     // Catch:{ all -> 0x0117 }
            java.lang.String r9 = setMax(r9, r10, r12)     // Catch:{ all -> 0x0117 }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r13)     // Catch:{ all -> 0x0117 }
            java.lang.Object r3 = r3.invoke(r5, r13)     // Catch:{ all -> 0x0117 }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x0117 }
            int r3 = r3.intValue()     // Catch:{ all -> 0x0117 }
            r4[r7] = r3
            int r7 = r7 + 1
            r3 = 46
            r5 = 15
            r9 = 8
            goto L_0x007f
        L_0x0117:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011f
            throw r1
        L_0x011f:
            throw r0
        L_0x0120:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0128
            throw r1
        L_0x0128:
            throw r0
        L_0x0129:
            r9 = 47
            r10 = 4
            r0 = 0
        L_0x012d:
            int r11 = r0 + 1
            r14 = 90
            r15 = 4868(0x1304, float:6.822E-42)
            r7 = 9
            r5 = 3
            r0 = r4[r0]     // Catch:{ all -> 0x044c }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x044c }
            r18 = 157(0x9d, float:2.2E-43)
            r3 = 18
            r12 = 7
            r8 = 2
            switch(r0) {
                case -55: goto L_0x0430;
                case -54: goto L_0x042d;
                case -53: goto L_0x041e;
                case -52: goto L_0x0419;
                case -51: goto L_0x03e4;
                case -50: goto L_0x03db;
                case -49: goto L_0x03ca;
                case -48: goto L_0x03bc;
                case -47: goto L_0x03b1;
                case -46: goto L_0x03ad;
                case -45: goto L_0x03a9;
                case -44: goto L_0x038d;
                case -43: goto L_0x0387;
                case -42: goto L_0x0375;
                case -41: goto L_0x035e;
                case -40: goto L_0x035b;
                case -39: goto L_0x0357;
                case -38: goto L_0x0348;
                case -37: goto L_0x0343;
                case -36: goto L_0x02c7;
                case -35: goto L_0x02b7;
                case -34: goto L_0x0266;
                case -33: goto L_0x0262;
                case -32: goto L_0x0251;
                case -31: goto L_0x0241;
                case -30: goto L_0x023d;
                case -29: goto L_0x0239;
                case -28: goto L_0x022c;
                case -27: goto L_0x0228;
                case -26: goto L_0x0224;
                case -25: goto L_0x0219;
                case -24: goto L_0x0215;
                case -23: goto L_0x0203;
                case -22: goto L_0x01ff;
                case -21: goto L_0x01fb;
                case -20: goto L_0x01f7;
                case -19: goto L_0x01f3;
                case -18: goto L_0x01f0;
                case -17: goto L_0x01e3;
                case -16: goto L_0x01c6;
                case -15: goto L_0x01c5;
                case -14: goto L_0x01c1;
                case -13: goto L_0x01bd;
                case -12: goto L_0x01b9;
                case -11: goto L_0x01ae;
                case -10: goto L_0x01a1;
                case -9: goto L_0x0199;
                case -8: goto L_0x0195;
                case -7: goto L_0x0182;
                case -6: goto L_0x016e;
                case -5: goto L_0x015e;
                case -4: goto L_0x015a;
                case -3: goto L_0x0150;
                case -2: goto L_0x014d;
                case -1: goto L_0x0149;
                default: goto L_0x0145;
            }     // Catch:{ all -> 0x044c }
        L_0x0145:
            r3 = r13
            r14 = 0
            goto L_0x0445
        L_0x0149:
            r0 = 133(0x85, float:1.86E-43)
            goto L_0x0447
        L_0x014d:
            r0 = 6
            goto L_0x0447
        L_0x0150:
            r3 = 8
            r1.getMax(r3)     // Catch:{ all -> 0x044c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x044c }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x044c }
            throw r0     // Catch:{ all -> 0x044c }
        L_0x015a:
            r0 = 181(0xb5, float:2.54E-43)
            goto L_0x0447
        L_0x015e:
            r1.getMax(r7)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            r3 = 51
            if (r0 == r3) goto L_0x016a
            r0 = 7
            goto L_0x0447
        L_0x016a:
            r0 = 157(0x9d, float:2.2E-43)
            goto L_0x0447
        L_0x016e:
            r1.setMax = r6     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r5)     // Catch:{ all -> 0x044c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x044c }
            o.convertDipToPx r0 = (o.convertDipToPx) r0     // Catch:{ all -> 0x044c }
            o.convertDipToPx$length r0 = r0.length     // Catch:{ all -> 0x044c }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x044c }
        L_0x017e:
            r1.getMax(r10)     // Catch:{ all -> 0x044c }
            goto L_0x0145
        L_0x0182:
            r1.setMax = r6     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r5)     // Catch:{ all -> 0x044c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x044c }
            o.convertDipToPx$length r0 = (o.convertDipToPx.length) r0     // Catch:{ all -> 0x044c }
            java.util.List r0 = r0.length     // Catch:{ all -> 0x044c }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x044c }
            goto L_0x017e
        L_0x0195:
            r0 = 136(0x88, float:1.9E-43)
            goto L_0x0447
        L_0x0199:
            int r0 = invoke     // Catch:{ all -> 0x044c }
            r1.setMax = r0     // Catch:{ all -> 0x044c }
        L_0x019d:
            r1.getMax(r3)     // Catch:{ all -> 0x044c }
            goto L_0x0145
        L_0x01a1:
            r1.setMax = r6     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r12)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            invokeSuspend = r0     // Catch:{ all -> 0x044c }
            goto L_0x0145
        L_0x01ae:
            r1.getMax(r9)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            if (r0 != 0) goto L_0x0446
            r0 = 31
            goto L_0x0447
        L_0x01b9:
            r0 = 127(0x7f, float:1.78E-43)
            goto L_0x0447
        L_0x01bd:
            r0 = 33
            goto L_0x0447
        L_0x01c1:
            r0 = 77
            goto L_0x0447
        L_0x01c5:
            return
        L_0x01c6:
            r1.setMax = r8     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r5)     // Catch:{ all -> 0x044c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x044c }
            o.JavaBlurProcess r0 = (o.JavaBlurProcess) r0     // Catch:{ all -> 0x044c }
            r1.getMax(r12)     // Catch:{ all -> 0x044c }
            int r3 = r1.setMin     // Catch:{ all -> 0x044c }
            if (r3 == 0) goto L_0x01db
            r3 = 1
            goto L_0x01dc
        L_0x01db:
            r3 = 0
        L_0x01dc:
            o.convertDipToPx r0 = r0.getMax(r3)     // Catch:{ all -> 0x044c }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x044c }
            goto L_0x017e
        L_0x01e3:
            r0 = 268(0x10c, float:3.76E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            if (r0 != 0) goto L_0x0446
            r0 = 44
            goto L_0x0447
        L_0x01f0:
            r0 = 1
            goto L_0x0447
        L_0x01f3:
            r0 = 87
            goto L_0x0447
        L_0x01f7:
            r0 = 120(0x78, float:1.68E-43)
            goto L_0x0447
        L_0x01fb:
            r0 = 126(0x7e, float:1.77E-43)
            goto L_0x0447
        L_0x01ff:
            r0 = 53
            goto L_0x0447
        L_0x0203:
            r1.getMax(r7)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            if (r0 == 0) goto L_0x0211
            if (r0 == r6) goto L_0x020d
            goto L_0x0211
        L_0x020d:
            r0 = 54
            goto L_0x0447
        L_0x0211:
            r0 = 66
            goto L_0x0447
        L_0x0215:
            r0 = 82
            goto L_0x0447
        L_0x0219:
            r1.getMax(r9)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            if (r0 != 0) goto L_0x0446
            r0 = 65
            goto L_0x0447
        L_0x0224:
            r0 = 51
            goto L_0x0447
        L_0x0228:
            r0 = 80
            goto L_0x0447
        L_0x022c:
            r0 = 268(0x10c, float:3.76E-43)
            r1.getMax(r0)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            if (r0 != 0) goto L_0x0446
            r0 = 76
            goto L_0x0447
        L_0x0239:
            r0 = 179(0xb3, float:2.51E-43)
            goto L_0x0447
        L_0x023d:
            r0 = 47
            goto L_0x0447
        L_0x0241:
            r1.setMax = r6     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r5)     // Catch:{ all -> 0x044c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x044c }
            o.convertSpToPx[] r0 = (o.convertSpToPx[]) r0     // Catch:{ all -> 0x044c }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x044c }
            goto L_0x017e
        L_0x0251:
            r1.setMax = r6     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r5)     // Catch:{ all -> 0x044c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x044c }
            o.convertSpToPx[] r0 = (o.convertSpToPx[]) r0     // Catch:{ all -> 0x044c }
            o.genTextSelector.setMax(r0)     // Catch:{ all -> 0x044c }
            goto L_0x0145
        L_0x0262:
            r0 = 11
            goto L_0x0447
        L_0x0266:
            r1.setMax = r6     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r5)     // Catch:{ all -> 0x044c }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x044c }
            byte[] r8 = getMin     // Catch:{ all -> 0x02ae }
            r12 = 8
            byte r8 = r8[r12]     // Catch:{ all -> 0x02ae }
            byte r8 = (byte) r8     // Catch:{ all -> 0x02ae }
            byte[] r12 = getMin     // Catch:{ all -> 0x02ae }
            r18 = 10
            byte r12 = r12[r18]     // Catch:{ all -> 0x02ae }
            short r12 = (short) r12     // Catch:{ all -> 0x02ae }
            r14 = 4855(0x12f7, float:6.803E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x02ae }
            java.lang.String r8 = setMax(r8, r12, r14)     // Catch:{ all -> 0x02ae }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x02ae }
            byte[] r12 = getMin     // Catch:{ all -> 0x02ae }
            r14 = 2662(0xa66, float:3.73E-42)
            byte r12 = r12[r14]     // Catch:{ all -> 0x02ae }
            byte r12 = (byte) r12     // Catch:{ all -> 0x02ae }
            byte[] r14 = getMin     // Catch:{ all -> 0x02ae }
            r18 = 77
            byte r14 = r14[r18]     // Catch:{ all -> 0x02ae }
            short r14 = (short) r14     // Catch:{ all -> 0x02ae }
            short r7 = (short) r15     // Catch:{ all -> 0x02ae }
            java.lang.String r7 = setMax(r12, r14, r7)     // Catch:{ all -> 0x02ae }
            java.lang.reflect.Method r7 = r8.getMethod(r7, r13)     // Catch:{ all -> 0x02ae }
            java.lang.Object r0 = r7.invoke(r0, r13)     // Catch:{ all -> 0x02ae }
            java.lang.Integer r0 = (java.lang.Integer) r0     // Catch:{ all -> 0x02ae }
            int r0 = r0.intValue()     // Catch:{ all -> 0x02ae }
            r1.setMax = r0     // Catch:{ all -> 0x044c }
            goto L_0x019d
        L_0x02ae:
            r0 = move-exception
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x044c }
            if (r3 == 0) goto L_0x02b6
            throw r3     // Catch:{ all -> 0x044c }
        L_0x02b6:
            throw r0     // Catch:{ all -> 0x044c }
        L_0x02b7:
            r1.setMax = r6     // Catch:{ all -> 0x044c }
            r1.getMax(r8)     // Catch:{ all -> 0x044c }
            r1.getMax(r12)     // Catch:{ all -> 0x044c }
            int r0 = r1.setMin     // Catch:{ all -> 0x044c }
            o.convertSpToPx[] r0 = new o.convertSpToPx[r0]     // Catch:{ all -> 0x044c }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x044c }
            goto L_0x017e
        L_0x02c7:
            r1.setMax = r8     // Catch:{ all -> 0x033e }
            r1.getMax(r8)     // Catch:{ all -> 0x033e }
            r1.getMax(r5)     // Catch:{ all -> 0x033e }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x033e }
            r1.getMax(r5)     // Catch:{ all -> 0x033e }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x033e }
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ all -> 0x0334 }
            r8 = 0
            r7[r8] = r3     // Catch:{ all -> 0x0334 }
            byte[] r3 = getMin     // Catch:{ all -> 0x0334 }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x0334 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x0334 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0334 }
            r12 = 10
            byte r8 = r8[r12]     // Catch:{ all -> 0x0334 }
            short r8 = (short) r8     // Catch:{ all -> 0x0334 }
            r12 = 4855(0x12f7, float:6.803E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x0334 }
            java.lang.String r3 = setMax(r3, r8, r12)     // Catch:{ all -> 0x0334 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0334 }
            int r8 = length     // Catch:{ all -> 0x0334 }
            r8 = r8 & 494(0x1ee, float:6.92E-43)
            byte r8 = (byte) r8     // Catch:{ all -> 0x0334 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0334 }
            r14 = 32
            byte r12 = r12[r14]     // Catch:{ all -> 0x0334 }
            short r12 = (short) r12     // Catch:{ all -> 0x0334 }
            r14 = 2666(0xa6a, float:3.736E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0334 }
            java.lang.String r8 = setMax(r8, r12, r14)     // Catch:{ all -> 0x0334 }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x0334 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0334 }
            byte r14 = r14[r5]     // Catch:{ all -> 0x0334 }
            byte r14 = (byte) r14     // Catch:{ all -> 0x0334 }
            byte[] r18 = getMin     // Catch:{ all -> 0x0334 }
            r19 = 4116(0x1014, float:5.768E-42)
            byte r15 = r18[r19]     // Catch:{ all -> 0x0334 }
            short r15 = (short) r15     // Catch:{ all -> 0x0334 }
            r13 = 11560(0x2d28, float:1.6199E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0334 }
            java.lang.String r13 = setMax(r14, r15, r13)     // Catch:{ all -> 0x0334 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0334 }
            r14 = 0
            r12[r14] = r13     // Catch:{ all -> 0x0332 }
            java.lang.reflect.Method r3 = r3.getMethod(r8, r12)     // Catch:{ all -> 0x0332 }
            java.lang.Object r0 = r3.invoke(r0, r7)     // Catch:{ all -> 0x0332 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x03d7 }
        L_0x032d:
            r1.getMax(r10)     // Catch:{ all -> 0x03d7 }
            goto L_0x03b9
        L_0x0332:
            r0 = move-exception
            goto L_0x0336
        L_0x0334:
            r0 = move-exception
            r14 = 0
        L_0x0336:
            java.lang.Throwable r3 = r0.getCause()     // Catch:{ all -> 0x03d7 }
            if (r3 == 0) goto L_0x033d
            throw r3     // Catch:{ all -> 0x03d7 }
        L_0x033d:
            throw r0     // Catch:{ all -> 0x03d7 }
        L_0x033e:
            r0 = move-exception
            r14 = 0
            r3 = r13
            goto L_0x044f
        L_0x0343:
            r14 = 0
            r0 = 159(0x9f, float:2.23E-43)
            goto L_0x03de
        L_0x0348:
            r14 = 0
            r1.getMax(r9)     // Catch:{ all -> 0x03d7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x03d7 }
            if (r0 != 0) goto L_0x0354
            r0 = 119(0x77, float:1.67E-43)
            goto L_0x03de
        L_0x0354:
            r0 = r11
            goto L_0x03de
        L_0x0357:
            r0 = 49
            goto L_0x0447
        L_0x035b:
            r0 = 4
            goto L_0x0447
        L_0x035e:
            r3 = 9
            r14 = 0
            r1.getMax(r3)     // Catch:{ all -> 0x03d7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x03d7 }
            r3 = 28
            if (r0 == r3) goto L_0x0372
            r3 = 35
            if (r0 == r3) goto L_0x036f
            goto L_0x0372
        L_0x036f:
            r0 = 7
            goto L_0x03de
        L_0x0372:
            r0 = 157(0x9d, float:2.2E-43)
            goto L_0x03de
        L_0x0375:
            r14 = 0
            r1.setMax = r6     // Catch:{ all -> 0x03d7 }
            r1.getMax(r8)     // Catch:{ all -> 0x03d7 }
            r1.getMax(r5)     // Catch:{ all -> 0x03d7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x03d7 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x03d7 }
            android.content.Context r0 = r0.toIntRange     // Catch:{ all -> 0x03d7 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x03d7 }
            goto L_0x032d
        L_0x0387:
            r14 = 0
            java.lang.String r0 = "Login"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x03d7 }
            goto L_0x032d
        L_0x038d:
            r14 = 0
            o.JavaBlurProcess r0 = new o.JavaBlurProcess     // Catch:{ all -> 0x03d7 }
            r1.setMax = r8     // Catch:{ all -> 0x03d7 }
            r1.getMax(r8)     // Catch:{ all -> 0x03d7 }
            r1.getMax(r5)     // Catch:{ all -> 0x03d7 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x03d7 }
            android.content.Context r3 = (android.content.Context) r3     // Catch:{ all -> 0x03d7 }
            r1.getMax(r5)     // Catch:{ all -> 0x03d7 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x03d7 }
            java.lang.String r7 = (java.lang.String) r7     // Catch:{ all -> 0x03d7 }
            r0.<init>(r3, r7)     // Catch:{ all -> 0x03d7 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x03d7 }
            goto L_0x032d
        L_0x03a9:
            r14 = 0
            r0 = 89
            goto L_0x03de
        L_0x03ad:
            r14 = 0
            r0 = 128(0x80, float:1.794E-43)
            goto L_0x03de
        L_0x03b1:
            r14 = 0
            int r0 = invokeSuspend     // Catch:{ all -> 0x03d7 }
            r1.setMax = r0     // Catch:{ all -> 0x03d7 }
            r1.getMax(r3)     // Catch:{ all -> 0x03d7 }
        L_0x03b9:
            r3 = 0
            goto L_0x0445
        L_0x03bc:
            r14 = 0
            r1.setMax = r6     // Catch:{ all -> 0x03d7 }
            r1.getMax(r8)     // Catch:{ all -> 0x03d7 }
            r1.getMax(r12)     // Catch:{ all -> 0x03d7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x03d7 }
            invoke = r0     // Catch:{ all -> 0x03d7 }
            goto L_0x03b9
        L_0x03ca:
            r14 = 0
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x03d7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x03d7 }
            if (r0 != 0) goto L_0x0354
            r0 = 156(0x9c, float:2.19E-43)
            goto L_0x03de
        L_0x03d7:
            r0 = move-exception
            r3 = 0
            goto L_0x044f
        L_0x03db:
            r14 = 0
            r0 = 45
        L_0x03de:
            r8 = 0
            r12 = 32
            r13 = 0
            goto L_0x012d
        L_0x03e4:
            r14 = 0
            byte[] r0 = getMin     // Catch:{ all -> 0x040f }
            r3 = 8
            byte r0 = r0[r3]     // Catch:{ all -> 0x040f }
            byte r0 = (byte) r0     // Catch:{ all -> 0x040f }
            byte[] r3 = getMin     // Catch:{ all -> 0x040f }
            r7 = 4116(0x1014, float:5.768E-42)
            byte r3 = r3[r7]     // Catch:{ all -> 0x040f }
            short r3 = (short) r3     // Catch:{ all -> 0x040f }
            r7 = 8353(0x20a1, float:1.1705E-41)
            short r7 = (short) r7     // Catch:{ all -> 0x040f }
            java.lang.String r0 = setMax(r0, r3, r7)     // Catch:{ all -> 0x040f }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x040f }
            r3 = 0
            java.lang.reflect.Constructor r0 = r0.getDeclaredConstructor(r3)     // Catch:{ all -> 0x040d }
            java.lang.Object r0 = r0.newInstance(r3)     // Catch:{ all -> 0x040d }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0443 }
            r1.getMax(r10)     // Catch:{ all -> 0x0443 }
            goto L_0x0445
        L_0x040d:
            r0 = move-exception
            goto L_0x0411
        L_0x040f:
            r0 = move-exception
            r3 = 0
        L_0x0411:
            java.lang.Throwable r7 = r0.getCause()     // Catch:{ all -> 0x0443 }
            if (r7 == 0) goto L_0x0418
            throw r7     // Catch:{ all -> 0x0443 }
        L_0x0418:
            throw r0     // Catch:{ all -> 0x0443 }
        L_0x0419:
            r3 = r13
            r14 = 0
            r0 = 57
            goto L_0x0447
        L_0x041e:
            r3 = r13
            r14 = 0
            r1.getMax(r9)     // Catch:{ all -> 0x0443 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0443 }
            if (r0 != 0) goto L_0x042a
            r0 = 178(0xb2, float:2.5E-43)
            goto L_0x042b
        L_0x042a:
            r0 = r11
        L_0x042b:
            r13 = r3
            goto L_0x0447
        L_0x042d:
            r0 = 32
            goto L_0x0447
        L_0x0430:
            r3 = r13
            r14 = 0
            r1.getMax(r7)     // Catch:{ all -> 0x0443 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0443 }
            r5 = 36
            if (r0 == r5) goto L_0x0440
            r5 = 90
            r0 = 69
            goto L_0x042b
        L_0x0440:
            r0 = 35
            goto L_0x042b
        L_0x0443:
            r0 = move-exception
            goto L_0x044f
        L_0x0445:
            r13 = r3
        L_0x0446:
            r0 = r11
        L_0x0447:
            r8 = 0
            r12 = 32
            goto L_0x012d
        L_0x044c:
            r0 = move-exception
            r3 = r13
            r14 = 0
        L_0x044f:
            byte[] r7 = getMin
            r8 = 8
            byte r12 = r7[r8]
            byte r12 = (byte) r12
            r13 = 4868(0x1304, float:6.822E-42)
            byte r7 = r7[r13]
            short r7 = (short) r7
            r13 = 10554(0x293a, float:1.479E-41)
            short r13 = (short) r13
            java.lang.String r7 = setMax(r12, r7, r13)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x047c
            if (r11 < r8) goto L_0x047c
            r7 = 9
            if (r11 > r7) goto L_0x047c
            r3 = 46
            r5 = 8
            r7 = 11
        L_0x0478:
            r13 = 15
            goto L_0x05ee
        L_0x047c:
            byte[] r7 = getMin
            byte r12 = r7[r8]
            byte r8 = (byte) r12
            r12 = 1156(0x484, float:1.62E-42)
            byte r7 = r7[r12]
            int r7 = -r7
            short r7 = (short) r7
            r12 = 5857(0x16e1, float:8.207E-42)
            short r12 = (short) r12
            java.lang.String r7 = setMax(r8, r7, r12)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x04a4
            r7 = 9
            if (r11 < r7) goto L_0x04a4
            r7 = 11
            if (r11 > r7) goto L_0x04a4
            r3 = 3
            r5 = 8
            goto L_0x0478
        L_0x04a4:
            byte[] r7 = getMin
            r8 = 8
            byte r12 = r7[r8]
            byte r8 = (byte) r12
            r12 = 4868(0x1304, float:6.822E-42)
            byte r13 = r7[r12]
            short r12 = (short) r13
            r13 = 15
            byte r7 = r7[r13]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r8, r12, r7)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x04d0
            r7 = 11
            if (r11 < r7) goto L_0x04d2
            r8 = 12
            if (r11 > r8) goto L_0x04d2
        L_0x04cb:
            r3 = 3
        L_0x04cc:
            r5 = 8
            goto L_0x05ee
        L_0x04d0:
            r7 = 11
        L_0x04d2:
            byte[] r8 = getMin
            r12 = 8
            byte r15 = r8[r12]
            byte r12 = (byte) r15
            r15 = 49
            byte r8 = r8[r15]
            short r8 = (short) r8
            r15 = 9600(0x2580, float:1.3452E-41)
            short r15 = (short) r15
            java.lang.String r8 = setMax(r12, r8, r15)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x04f8
            r8 = 26
            if (r11 < r8) goto L_0x04f8
            r8 = 27
            if (r11 > r8) goto L_0x04f8
            goto L_0x04cb
        L_0x04f8:
            r8 = 40
            if (r11 < r8) goto L_0x0505
            r8 = 45
            if (r11 > r8) goto L_0x0505
            r5 = 125(0x7d, float:1.75E-43)
            r3 = 125(0x7d, float:1.75E-43)
            goto L_0x04cc
        L_0x0505:
            byte[] r8 = getMin
            r12 = 8
            byte r15 = r8[r12]
            byte r12 = (byte) r15
            r15 = 4869(0x1305, float:6.823E-42)
            byte r8 = r8[r15]
            short r8 = (short) r8
            r15 = 1139(0x473, float:1.596E-42)
            short r15 = (short) r15
            java.lang.String r8 = setMax(r12, r8, r15)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x052b
            r8 = 83
            if (r11 < r8) goto L_0x052b
            r8 = 87
            if (r11 > r8) goto L_0x052b
            goto L_0x04cb
        L_0x052b:
            byte[] r5 = getMin
            r8 = 8
            byte r12 = r5[r8]
            byte r8 = (byte) r12
            r12 = 13
            byte r5 = r5[r12]
            short r5 = (short) r5
            int r3 = length
            r3 = r3 | 7588(0x1da4, float:1.0633E-41)
            short r3 = (short) r3
            java.lang.String r3 = setMax(r8, r5, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0556
            r3 = 84
            if (r11 < r3) goto L_0x0556
            r3 = 87
            if (r11 > r3) goto L_0x0556
        L_0x0552:
            r3 = 46
            goto L_0x04cc
        L_0x0556:
            byte[] r3 = getMin
            r5 = 8
            byte r8 = r3[r5]
            byte r5 = (byte) r8
            byte r3 = r3[r12]
            short r3 = (short) r3
            int r8 = length
            r8 = r8 | 7588(0x1da4, float:1.0633E-41)
            short r8 = (short) r8
            java.lang.String r3 = setMax(r5, r3, r8)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x057c
            r3 = 85
            if (r11 < r3) goto L_0x057c
            r3 = 87
            if (r11 > r3) goto L_0x057e
            goto L_0x0552
        L_0x057c:
            r3 = 87
        L_0x057e:
            byte[] r5 = getMin
            r8 = 8
            byte r3 = r5[r8]
            byte r3 = (byte) r3
            r8 = 4869(0x1305, float:6.823E-42)
            byte r5 = r5[r8]
            short r5 = (short) r5
            java.lang.String r3 = setMax(r3, r5, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x05a1
            r3 = 89
            if (r11 < r3) goto L_0x05a1
            r3 = 90
            if (r11 > r3) goto L_0x05a1
            goto L_0x0552
        L_0x05a1:
            byte[] r3 = getMin
            r5 = 8
            byte r8 = r3[r5]
            byte r5 = (byte) r8
            r8 = r5 & 227(0xe3, float:3.18E-43)
            short r8 = (short) r8
            r15 = 4868(0x1304, float:6.822E-42)
            byte r3 = r3[r15]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r5, r8, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x05c7
            r3 = 159(0x9f, float:2.23E-43)
            if (r11 < r3) goto L_0x05c7
            r3 = 160(0xa0, float:2.24E-43)
            if (r11 > r3) goto L_0x05c7
            goto L_0x0552
        L_0x05c7:
            byte[] r3 = getMin
            r5 = 8
            byte r8 = r3[r5]
            byte r8 = (byte) r8
            byte r3 = r3[r12]
            short r3 = (short) r3
            int r12 = length
            r12 = r12 | 7588(0x1da4, float:1.0633E-41)
            short r12 = (short) r12
            java.lang.String r3 = setMax(r8, r3, r12)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x05f8
            r3 = 174(0xae, float:2.44E-43)
            if (r11 < r3) goto L_0x05f8
            r3 = 175(0xaf, float:2.45E-43)
            if (r11 > r3) goto L_0x05f8
            r3 = 46
        L_0x05ee:
            r1.IsOverlapping = r0
            r8 = 49
            r1.getMax(r8)
            r0 = r3
            goto L_0x03de
        L_0x05f8:
            throw r0
        L_0x05f9:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0601
            throw r1
        L_0x0601:
            goto L_0x0603
        L_0x0602:
            throw r0
        L_0x0603:
            goto L_0x0602
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMin(boolean):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v7, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v13, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v22, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v23, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v24, resolved type: java.lang.Object} */
    /* JADX WARNING: type inference failed for: r11v6 */
    /* JADX WARNING: type inference failed for: r11v25 */
    /* JADX WARNING: type inference failed for: r11v27 */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:143:0x0435, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:149:0x047f, code lost:
        r0 = r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:172:0x0504, code lost:
        if (r9 <= 56) goto L_0x04dc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:179:0x052d, code lost:
        if (r9 <= 101) goto L_0x04ad;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x013b, code lost:
        r11 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x013c, code lost:
        r11 = r11;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0147, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x0164, code lost:
        r0 = r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x01be, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:75:0x02a7, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:0x02b9, code lost:
        r12 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:0x02d3, code lost:
        r11 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:99:0x0327, code lost:
        r1.getMax(4);
        r11 = r11;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:106:0x0336 A[Catch:{ all -> 0x032c, all -> 0x03f4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:107:0x0337 A[Catch:{ all -> 0x032c, all -> 0x03f4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:169:0x04fe  */
    /* JADX WARNING: Removed duplicated region for block: B:173:0x0507  */
    /* JADX WARNING: Removed duplicated region for block: B:176:0x0527  */
    /* JADX WARNING: Removed duplicated region for block: B:180:0x0531  */
    /* JADX WARNING: Removed duplicated region for block: B:218:0x061a  */
    /* JADX WARNING: Removed duplicated region for block: B:219:0x061f  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private final void toFloatRange() {
        /*
            r21 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r21
            r1.<init>(r2)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = 574(0x23e, float:8.04E-43)
            short r3 = (short) r3
            r4 = 3524(0xdc4, float:4.938E-42)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x0637 }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x0637 }
            byte[] r3 = getMin     // Catch:{ all -> 0x0637 }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x0637 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x0637 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0637 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x0637 }
            short r9 = (short) r9     // Catch:{ all -> 0x0637 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x0637 }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x0637 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0637 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0637 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x0637 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0637 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0637 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x0637 }
            short r11 = (short) r11     // Catch:{ all -> 0x0637 }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x0637 }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x0637 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x0637 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0637 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x0637 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x0637 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0637 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x0637 }
            short r13 = (short) r13     // Catch:{ all -> 0x0637 }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x0637 }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x0637 }
            r11[r7] = r12     // Catch:{ all -> 0x0637 }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x0637 }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x0637 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0637 }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x007d:
            int r9 = r0.length
            r11 = 4119(0x1017, float:5.772E-42)
            r12 = 0
            if (r6 >= r9) goto L_0x0125
            r9 = r0[r6]
            java.lang.Object[] r13 = new java.lang.Object[r5]     // Catch:{ all -> 0x011c }
            r13[r7] = r9     // Catch:{ all -> 0x011c }
            byte[] r9 = getMin     // Catch:{ all -> 0x011c }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011c }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011c }
            byte[] r14 = getMin     // Catch:{ all -> 0x011c }
            byte r14 = r14[r11]     // Catch:{ all -> 0x011c }
            int r14 = -r14
            short r14 = (short) r14     // Catch:{ all -> 0x011c }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x011c }
            java.lang.String r9 = setMax(r9, r14, r15)     // Catch:{ all -> 0x011c }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011c }
            r14 = 74
            byte r14 = (byte) r14     // Catch:{ all -> 0x011c }
            byte[] r16 = getMin     // Catch:{ all -> 0x011c }
            r17 = 32
            byte r4 = r16[r17]     // Catch:{ all -> 0x011c }
            short r4 = (short) r4     // Catch:{ all -> 0x011c }
            r11 = 10257(0x2811, float:1.4373E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x011c }
            java.lang.String r4 = setMax(r14, r4, r11)     // Catch:{ all -> 0x011c }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x011c }
            byte[] r14 = getMin     // Catch:{ all -> 0x011c }
            byte r14 = r14[r8]     // Catch:{ all -> 0x011c }
            byte r14 = (byte) r14     // Catch:{ all -> 0x011c }
            byte[] r17 = getMin     // Catch:{ all -> 0x011c }
            byte r8 = r17[r5]     // Catch:{ all -> 0x011c }
            short r8 = (short) r8     // Catch:{ all -> 0x011c }
            java.lang.String r8 = setMax(r14, r8, r10)     // Catch:{ all -> 0x011c }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x011c }
            r11[r7] = r8     // Catch:{ all -> 0x011c }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r11)     // Catch:{ all -> 0x011c }
            java.lang.Object r4 = r4.invoke(r12, r13)     // Catch:{ all -> 0x011c }
            byte[] r8 = getMin     // Catch:{ all -> 0x0113 }
            r9 = 8
            byte r8 = r8[r9]     // Catch:{ all -> 0x0113 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0113 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0113 }
            r11 = 4119(0x1017, float:5.772E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x0113 }
            int r9 = -r9
            short r9 = (short) r9     // Catch:{ all -> 0x0113 }
            java.lang.String r8 = setMax(r8, r9, r15)     // Catch:{ all -> 0x0113 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0113 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0113 }
            r11 = 8
            byte r9 = r9[r11]     // Catch:{ all -> 0x0113 }
            int r9 = r9 - r5
            byte r9 = (byte) r9     // Catch:{ all -> 0x0113 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0113 }
            r13 = 73
            byte r11 = r11[r13]     // Catch:{ all -> 0x0113 }
            short r11 = (short) r11     // Catch:{ all -> 0x0113 }
            r13 = r11 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0113 }
            java.lang.String r9 = setMax(r9, r11, r13)     // Catch:{ all -> 0x0113 }
            java.lang.reflect.Method r8 = r8.getMethod(r9, r12)     // Catch:{ all -> 0x0113 }
            java.lang.Object r4 = r8.invoke(r4, r12)     // Catch:{ all -> 0x0113 }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x0113 }
            int r4 = r4.intValue()     // Catch:{ all -> 0x0113 }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            r8 = 8
            goto L_0x007d
        L_0x0113:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011b
            throw r1
        L_0x011b:
            throw r0
        L_0x011c:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0124
            throw r1
        L_0x0124:
            throw r0
        L_0x0125:
            r0 = 0
        L_0x0126:
            int r9 = r0 + 1
            r11 = 2
            r0 = r3[r0]     // Catch:{ all -> 0x0483 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0483 }
            r13 = 6214(0x1846, float:8.708E-42)
            r14 = 47
            r15 = 9
            r6 = 7
            r8 = 4
            r4 = 3
            switch(r0) {
                case -44: goto L_0x0478;
                case -43: goto L_0x0450;
                case -42: goto L_0x043d;
                case -41: goto L_0x0439;
                case -40: goto L_0x0410;
                case -39: goto L_0x03fb;
                case -38: goto L_0x03f7;
                case -37: goto L_0x0369;
                case -36: goto L_0x0352;
                case -35: goto L_0x034d;
                case -34: goto L_0x0347;
                case -33: goto L_0x0338;
                case -32: goto L_0x0302;
                case -31: goto L_0x0301;
                case -30: goto L_0x02fd;
                case -29: goto L_0x02d6;
                case -28: goto L_0x02ce;
                case -27: goto L_0x02bc;
                case -26: goto L_0x02b7;
                case -25: goto L_0x02b4;
                case -24: goto L_0x0284;
                case -23: goto L_0x01fb;
                case -22: goto L_0x01e8;
                case -21: goto L_0x01d7;
                case -20: goto L_0x01d4;
                case -19: goto L_0x01c3;
                case -18: goto L_0x01b0;
                case -17: goto L_0x01a6;
                case -16: goto L_0x01a3;
                case -15: goto L_0x01a0;
                case -14: goto L_0x019d;
                case -13: goto L_0x019a;
                case -12: goto L_0x0190;
                case -11: goto L_0x018d;
                case -10: goto L_0x018a;
                case -9: goto L_0x017e;
                case -8: goto L_0x0171;
                case -7: goto L_0x016c;
                case -6: goto L_0x0169;
                case -5: goto L_0x0166;
                case -4: goto L_0x015a;
                case -3: goto L_0x014d;
                case -2: goto L_0x0143;
                case -1: goto L_0x0140;
                default: goto L_0x013b;
            }     // Catch:{ all -> 0x0483 }
        L_0x013b:
            r11 = r12
        L_0x013c:
            r13 = 4119(0x1017, float:5.772E-42)
            goto L_0x047f
        L_0x0140:
            r0 = 83
            goto L_0x0126
        L_0x0143:
            int r0 = invoke     // Catch:{ all -> 0x0483 }
            r1.setMax = r0     // Catch:{ all -> 0x0483 }
        L_0x0147:
            r0 = 18
            r1.getMax(r0)     // Catch:{ all -> 0x0483 }
            goto L_0x013b
        L_0x014d:
            r1.setMax = r5     // Catch:{ all -> 0x0483 }
            r1.getMax(r11)     // Catch:{ all -> 0x0483 }
            r1.getMax(r6)     // Catch:{ all -> 0x0483 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0483 }
            invokeSuspend = r0     // Catch:{ all -> 0x0483 }
            goto L_0x013b
        L_0x015a:
            r1.getMax(r14)     // Catch:{ all -> 0x0483 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0483 }
            if (r0 != 0) goto L_0x0164
            r0 = 25
            goto L_0x0126
        L_0x0164:
            r0 = r9
            goto L_0x0126
        L_0x0166:
            r0 = 147(0x93, float:2.06E-43)
            goto L_0x0126
        L_0x0169:
            r0 = 97
            goto L_0x0126
        L_0x016c:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0483 }
            r1.setMax = r0     // Catch:{ all -> 0x0483 }
            goto L_0x0147
        L_0x0171:
            r1.setMax = r5     // Catch:{ all -> 0x0483 }
            r1.getMax(r11)     // Catch:{ all -> 0x0483 }
            r1.getMax(r6)     // Catch:{ all -> 0x0483 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0483 }
            invoke = r0     // Catch:{ all -> 0x0483 }
            goto L_0x013b
        L_0x017e:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x0483 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0483 }
            if (r0 != 0) goto L_0x0164
            r0 = 54
            goto L_0x0126
        L_0x018a:
            r0 = 81
            goto L_0x0126
        L_0x018d:
            r0 = 161(0xa1, float:2.26E-43)
            goto L_0x0126
        L_0x0190:
            r1.getMax(r14)     // Catch:{ all -> 0x0483 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0483 }
            if (r0 != 0) goto L_0x0164
            r0 = 80
            goto L_0x0126
        L_0x019a:
            r0 = 118(0x76, float:1.65E-43)
            goto L_0x0126
        L_0x019d:
            r0 = 87
            goto L_0x0126
        L_0x01a0:
            r0 = 128(0x80, float:1.794E-43)
            goto L_0x0126
        L_0x01a3:
            r0 = 111(0x6f, float:1.56E-43)
            goto L_0x0126
        L_0x01a6:
            r4 = 8
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0483 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0483 }
            throw r0     // Catch:{ all -> 0x0483 }
        L_0x01b0:
            r1.setMax = r5     // Catch:{ all -> 0x0483 }
            r1.getMax(r11)     // Catch:{ all -> 0x0483 }
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0483 }
            o.convertSpToPx r0 = (o.convertSpToPx) r0     // Catch:{ all -> 0x0483 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0483 }
        L_0x01be:
            r1.getMax(r8)     // Catch:{ all -> 0x0483 }
            goto L_0x013b
        L_0x01c3:
            r1.setMax = r5     // Catch:{ all -> 0x0483 }
            r1.getMax(r11)     // Catch:{ all -> 0x0483 }
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0483 }
            o.convertSpToPx[] r0 = (o.convertSpToPx[]) r0     // Catch:{ all -> 0x0483 }
            o.genTextSelector.setMax(r0)     // Catch:{ all -> 0x0483 }
            goto L_0x013b
        L_0x01d4:
            r0 = 1
            goto L_0x0126
        L_0x01d7:
            r1.setMax = r5     // Catch:{ all -> 0x0483 }
            r1.getMax(r11)     // Catch:{ all -> 0x0483 }
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0483 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0483 }
            o.getPerformanceTracker r0 = r0.equals     // Catch:{ all -> 0x0483 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0483 }
            goto L_0x01be
        L_0x01e8:
            r1.setMax = r5     // Catch:{ all -> 0x0483 }
            r1.getMax(r11)     // Catch:{ all -> 0x0483 }
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0483 }
            o.getPerformanceTracker r0 = (o.getPerformanceTracker) r0     // Catch:{ all -> 0x0483 }
            java.lang.String r0 = r0.getDeviceUtdId()     // Catch:{ all -> 0x0483 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0483 }
            goto L_0x01be
        L_0x01fb:
            r1.setMax = r4     // Catch:{ all -> 0x0483 }
            r1.getMax(r11)     // Catch:{ all -> 0x0483 }
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0483 }
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x0483 }
            r1.getMax(r4)     // Catch:{ all -> 0x0483 }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x0483 }
            java.lang.Object[] r13 = new java.lang.Object[r11]     // Catch:{ all -> 0x027b }
            r13[r5] = r4     // Catch:{ all -> 0x027b }
            r13[r7] = r6     // Catch:{ all -> 0x027b }
            byte[] r4 = getMin     // Catch:{ all -> 0x027b }
            r6 = 8
            byte r4 = r4[r6]     // Catch:{ all -> 0x027b }
            byte r4 = (byte) r4     // Catch:{ all -> 0x027b }
            byte[] r6 = getMin     // Catch:{ all -> 0x027b }
            r14 = 89
            byte r6 = r6[r14]     // Catch:{ all -> 0x027b }
            short r6 = (short) r6     // Catch:{ all -> 0x027b }
            r14 = r6 | 2642(0xa52, float:3.702E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x027b }
            java.lang.String r4 = setMax(r4, r6, r14)     // Catch:{ all -> 0x027b }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x027b }
            r6 = 68
            byte r6 = (byte) r6     // Catch:{ all -> 0x027b }
            byte[] r14 = getMin     // Catch:{ all -> 0x027b }
            r15 = 17
            byte r14 = r14[r15]     // Catch:{ all -> 0x027b }
            short r14 = (short) r14     // Catch:{ all -> 0x027b }
            r15 = 1168(0x490, float:1.637E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x027b }
            java.lang.String r6 = setMax(r6, r14, r15)     // Catch:{ all -> 0x027b }
            java.lang.Class[] r14 = new java.lang.Class[r11]     // Catch:{ all -> 0x027b }
            byte[] r15 = getMin     // Catch:{ all -> 0x027b }
            r19 = 8
            byte r15 = r15[r19]     // Catch:{ all -> 0x027b }
            byte r15 = (byte) r15     // Catch:{ all -> 0x027b }
            byte[] r20 = getMin     // Catch:{ all -> 0x027b }
            byte r11 = r20[r5]     // Catch:{ all -> 0x027b }
            short r11 = (short) r11     // Catch:{ all -> 0x027b }
            r12 = 14156(0x374c, float:1.9837E-41)
            short r12 = (short) r12     // Catch:{ all -> 0x027b }
            java.lang.String r11 = setMax(r15, r11, r12)     // Catch:{ all -> 0x027b }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x027b }
            r14[r7] = r11     // Catch:{ all -> 0x027b }
            byte[] r11 = getMin     // Catch:{ all -> 0x027b }
            r15 = 8
            byte r11 = r11[r15]     // Catch:{ all -> 0x027b }
            byte r11 = (byte) r11     // Catch:{ all -> 0x027b }
            byte[] r15 = getMin     // Catch:{ all -> 0x027b }
            byte r15 = r15[r5]     // Catch:{ all -> 0x027b }
            short r15 = (short) r15     // Catch:{ all -> 0x027b }
            java.lang.String r11 = setMax(r11, r15, r12)     // Catch:{ all -> 0x027b }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x027b }
            r14[r5] = r11     // Catch:{ all -> 0x027b }
            java.lang.reflect.Method r4 = r4.getMethod(r6, r14)     // Catch:{ all -> 0x027b }
            java.lang.Object r0 = r4.invoke(r0, r13)     // Catch:{ all -> 0x027b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02f9 }
            goto L_0x02a7
        L_0x027b:
            r0 = move-exception
            java.lang.Throwable r4 = r0.getCause()     // Catch:{ all -> 0x02f9 }
            if (r4 == 0) goto L_0x0283
            throw r4     // Catch:{ all -> 0x02f9 }
        L_0x0283:
            throw r0     // Catch:{ all -> 0x02f9 }
        L_0x0284:
            byte[] r0 = getMin     // Catch:{ all -> 0x02ab }
            byte r0 = r0[r13]     // Catch:{ all -> 0x02ab }
            byte r0 = (byte) r0     // Catch:{ all -> 0x02ab }
            byte[] r4 = getMin     // Catch:{ all -> 0x02ab }
            r6 = 4119(0x1017, float:5.772E-42)
            byte r4 = r4[r6]     // Catch:{ all -> 0x02ab }
            int r4 = -r4
            short r4 = (short) r4     // Catch:{ all -> 0x02ab }
            r6 = 552(0x228, float:7.74E-43)
            short r6 = (short) r6     // Catch:{ all -> 0x02ab }
            java.lang.String r0 = setMax(r0, r4, r6)     // Catch:{ all -> 0x02ab }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x02ab }
            r4 = 0
            java.lang.reflect.Constructor r0 = r0.getDeclaredConstructor(r4)     // Catch:{ all -> 0x02ab }
            java.lang.Object r0 = r0.newInstance(r4)     // Catch:{ all -> 0x02ab }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02f9 }
        L_0x02a7:
            r1.getMax(r8)     // Catch:{ all -> 0x02f9 }
            goto L_0x02d3
        L_0x02ab:
            r0 = move-exception
            java.lang.Throwable r4 = r0.getCause()     // Catch:{ all -> 0x02f9 }
            if (r4 == 0) goto L_0x02b3
            throw r4     // Catch:{ all -> 0x02f9 }
        L_0x02b3:
            throw r0     // Catch:{ all -> 0x02f9 }
        L_0x02b4:
            r0 = 26
            goto L_0x02b9
        L_0x02b7:
            r0 = 119(0x77, float:1.67E-43)
        L_0x02b9:
            r12 = 0
            goto L_0x0126
        L_0x02bc:
            r1.setMax = r5     // Catch:{ all -> 0x02f9 }
            r6 = 2
            r1.getMax(r6)     // Catch:{ all -> 0x02f9 }
            r1.getMax(r4)     // Catch:{ all -> 0x02f9 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02f9 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x02f9 }
            android.content.Context r0 = r0.toIntRange     // Catch:{ all -> 0x02f9 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02f9 }
            goto L_0x02a7
        L_0x02ce:
            java.lang.String r0 = "af_login"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02f9 }
            goto L_0x02a7
        L_0x02d3:
            r11 = 0
            goto L_0x013c
        L_0x02d6:
            o.getActivityByContext r0 = new o.getActivityByContext     // Catch:{ all -> 0x02f9 }
            r1.setMax = r4     // Catch:{ all -> 0x02f9 }
            r6 = 2
            r1.getMax(r6)     // Catch:{ all -> 0x02f9 }
            r1.getMax(r4)     // Catch:{ all -> 0x02f9 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x02f9 }
            android.content.Context r6 = (android.content.Context) r6     // Catch:{ all -> 0x02f9 }
            r1.getMax(r4)     // Catch:{ all -> 0x02f9 }
            java.lang.Object r11 = r1.isInside     // Catch:{ all -> 0x02f9 }
            java.lang.String r11 = (java.lang.String) r11     // Catch:{ all -> 0x02f9 }
            r1.getMax(r4)     // Catch:{ all -> 0x02f9 }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x02f9 }
            android.os.Bundle r4 = (android.os.Bundle) r4     // Catch:{ all -> 0x02f9 }
            r0.<init>(r6, r11, r4)     // Catch:{ all -> 0x02f9 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02f9 }
            goto L_0x02a7
        L_0x02f9:
            r0 = move-exception
            r11 = 0
            goto L_0x0485
        L_0x02fd:
            r0 = 55
            goto L_0x0126
        L_0x0301:
            return
        L_0x0302:
            byte[] r0 = getMin     // Catch:{ all -> 0x032e }
            r4 = 8
            byte r0 = r0[r4]     // Catch:{ all -> 0x032e }
            byte r0 = (byte) r0     // Catch:{ all -> 0x032e }
            byte[] r4 = getMin     // Catch:{ all -> 0x032e }
            r6 = 4119(0x1017, float:5.772E-42)
            byte r4 = r4[r6]     // Catch:{ all -> 0x032e }
            int r4 = -r4
            short r4 = (short) r4     // Catch:{ all -> 0x032e }
            r6 = r4 | 7362(0x1cc2, float:1.0316E-41)
            short r6 = (short) r6     // Catch:{ all -> 0x032e }
            java.lang.String r0 = setMax(r0, r4, r6)     // Catch:{ all -> 0x032e }
            java.lang.Class r0 = java.lang.Class.forName(r0)     // Catch:{ all -> 0x032e }
            r11 = 0
            java.lang.reflect.Constructor r0 = r0.getDeclaredConstructor(r11)     // Catch:{ all -> 0x032c }
            java.lang.Object r0 = r0.newInstance(r11)     // Catch:{ all -> 0x032c }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x03f4 }
        L_0x0327:
            r1.getMax(r8)     // Catch:{ all -> 0x03f4 }
            goto L_0x013c
        L_0x032c:
            r0 = move-exception
            goto L_0x0330
        L_0x032e:
            r0 = move-exception
            r11 = 0
        L_0x0330:
            java.lang.Throwable r4 = r0.getCause()     // Catch:{ all -> 0x03f4 }
            if (r4 == 0) goto L_0x0337
            throw r4     // Catch:{ all -> 0x03f4 }
        L_0x0337:
            throw r0     // Catch:{ all -> 0x03f4 }
        L_0x0338:
            r11 = r12
            r1.setMax = r5     // Catch:{ all -> 0x03f4 }
            r6 = 2
            r1.getMax(r6)     // Catch:{ all -> 0x03f4 }
            r1.getMax(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x03f4 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x03f4 }
            goto L_0x0327
        L_0x0347:
            r11 = r12
            java.lang.String r0 = "UTDID"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x03f4 }
            goto L_0x0327
        L_0x034d:
            r11 = r12
            r0 = 91
            goto L_0x0126
        L_0x0352:
            r11 = r12
            r1.getMax(r15)     // Catch:{ all -> 0x03f4 }
            int r0 = r1.setMin     // Catch:{ all -> 0x03f4 }
            r4 = 45
            if (r0 == r4) goto L_0x0365
            r4 = 78
            if (r0 == r4) goto L_0x0361
            goto L_0x0365
        L_0x0361:
            r0 = 109(0x6d, float:1.53E-43)
            goto L_0x0480
        L_0x0365:
            r0 = 149(0x95, float:2.09E-43)
            goto L_0x0480
        L_0x0369:
            r11 = r12
            r1.setMax = r4     // Catch:{ all -> 0x03f4 }
            r6 = 2
            r1.getMax(r6)     // Catch:{ all -> 0x03f4 }
            r1.getMax(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x03f4 }
            r1.getMax(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x03f4 }
            r1.getMax(r4)     // Catch:{ all -> 0x03f4 }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x03f4 }
            r8 = 2
            java.lang.Object[] r12 = new java.lang.Object[r8]     // Catch:{ all -> 0x03e9 }
            r12[r5] = r4     // Catch:{ all -> 0x03e9 }
            r12[r7] = r6     // Catch:{ all -> 0x03e9 }
            byte[] r4 = getMin     // Catch:{ all -> 0x03e9 }
            byte r4 = r4[r13]     // Catch:{ all -> 0x03e9 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x03e9 }
            byte[] r6 = getMin     // Catch:{ all -> 0x03e9 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r6 = r6[r13]     // Catch:{ all -> 0x03e7 }
            int r6 = -r6
            short r6 = (short) r6     // Catch:{ all -> 0x03e7 }
            r8 = 552(0x228, float:7.74E-43)
            short r8 = (short) r8     // Catch:{ all -> 0x03e7 }
            java.lang.String r4 = setMax(r4, r6, r8)     // Catch:{ all -> 0x03e7 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x03e7 }
            r6 = 68
            byte r6 = (byte) r6     // Catch:{ all -> 0x03e7 }
            byte[] r8 = getMin     // Catch:{ all -> 0x03e7 }
            r14 = 92
            byte r8 = r8[r14]     // Catch:{ all -> 0x03e7 }
            short r8 = (short) r8     // Catch:{ all -> 0x03e7 }
            r14 = 10531(0x2923, float:1.4757E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x03e7 }
            java.lang.String r6 = setMax(r6, r8, r14)     // Catch:{ all -> 0x03e7 }
            r8 = 2
            java.lang.Class[] r14 = new java.lang.Class[r8]     // Catch:{ all -> 0x03e7 }
            byte[] r8 = getMin     // Catch:{ all -> 0x03e7 }
            r15 = 8
            byte r8 = r8[r15]     // Catch:{ all -> 0x03e7 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x03e7 }
            byte[] r15 = getMin     // Catch:{ all -> 0x03e7 }
            byte r15 = r15[r5]     // Catch:{ all -> 0x03e7 }
            short r15 = (short) r15     // Catch:{ all -> 0x03e7 }
            java.lang.String r8 = setMax(r8, r15, r10)     // Catch:{ all -> 0x03e7 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x03e7 }
            r14[r7] = r8     // Catch:{ all -> 0x03e7 }
            byte[] r8 = getMin     // Catch:{ all -> 0x03e7 }
            r15 = 8
            byte r8 = r8[r15]     // Catch:{ all -> 0x03e7 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x03e7 }
            byte[] r15 = getMin     // Catch:{ all -> 0x03e7 }
            byte r15 = r15[r5]     // Catch:{ all -> 0x03e7 }
            short r15 = (short) r15     // Catch:{ all -> 0x03e7 }
            java.lang.String r8 = setMax(r8, r15, r10)     // Catch:{ all -> 0x03e7 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x03e7 }
            r14[r5] = r8     // Catch:{ all -> 0x03e7 }
            java.lang.reflect.Method r4 = r4.getMethod(r6, r14)     // Catch:{ all -> 0x03e7 }
            r4.invoke(r0, r12)     // Catch:{ all -> 0x03e7 }
            goto L_0x047f
        L_0x03e7:
            r0 = move-exception
            goto L_0x03ec
        L_0x03e9:
            r0 = move-exception
            r13 = 4119(0x1017, float:5.772E-42)
        L_0x03ec:
            java.lang.Throwable r4 = r0.getCause()     // Catch:{ all -> 0x0476 }
            if (r4 == 0) goto L_0x03f3
            throw r4     // Catch:{ all -> 0x0476 }
        L_0x03f3:
            throw r0     // Catch:{ all -> 0x0476 }
        L_0x03f4:
            r0 = move-exception
            goto L_0x0485
        L_0x03f7:
            r0 = 153(0x99, float:2.14E-43)
            goto L_0x0126
        L_0x03fb:
            r11 = r12
            r13 = 4119(0x1017, float:5.772E-42)
            r1.getMax(r15)     // Catch:{ all -> 0x0476 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0476 }
            if (r0 == 0) goto L_0x040c
            if (r0 == r5) goto L_0x0408
            goto L_0x040c
        L_0x0408:
            r0 = 129(0x81, float:1.81E-43)
            goto L_0x0480
        L_0x040c:
            r0 = 120(0x78, float:1.68E-43)
            goto L_0x0480
        L_0x0410:
            r11 = r12
            r13 = 4119(0x1017, float:5.772E-42)
            o.AUBubbleDrawable r0 = new o.AUBubbleDrawable     // Catch:{ all -> 0x0476 }
            r1.setMax = r4     // Catch:{ all -> 0x0476 }
            r6 = 2
            r1.getMax(r6)     // Catch:{ all -> 0x0476 }
            r1.getMax(r4)     // Catch:{ all -> 0x0476 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x0476 }
            android.content.Context r6 = (android.content.Context) r6     // Catch:{ all -> 0x0476 }
            r1.getMax(r4)     // Catch:{ all -> 0x0476 }
            java.lang.Object r12 = r1.isInside     // Catch:{ all -> 0x0476 }
            java.lang.String r12 = (java.lang.String) r12     // Catch:{ all -> 0x0476 }
            r1.getMax(r4)     // Catch:{ all -> 0x0476 }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x0476 }
            java.util.Map r4 = (java.util.Map) r4     // Catch:{ all -> 0x0476 }
            r0.<init>(r6, r12, r4)     // Catch:{ all -> 0x0476 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0476 }
        L_0x0435:
            r1.getMax(r8)     // Catch:{ all -> 0x0476 }
            goto L_0x047f
        L_0x0439:
            r0 = 100
            goto L_0x0126
        L_0x043d:
            r11 = r12
            r13 = 4119(0x1017, float:5.772E-42)
            r1.setMax = r5     // Catch:{ all -> 0x0476 }
            r4 = 2
            r1.getMax(r4)     // Catch:{ all -> 0x0476 }
            r1.getMax(r6)     // Catch:{ all -> 0x0476 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0476 }
            o.convertSpToPx[] r0 = new o.convertSpToPx[r0]     // Catch:{ all -> 0x0476 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0476 }
            goto L_0x0435
        L_0x0450:
            r11 = r12
            r13 = 4119(0x1017, float:5.772E-42)
            o.setWidth r0 = new o.setWidth     // Catch:{ all -> 0x0476 }
            r1.setMax = r4     // Catch:{ all -> 0x0476 }
            r6 = 2
            r1.getMax(r6)     // Catch:{ all -> 0x0476 }
            r1.getMax(r4)     // Catch:{ all -> 0x0476 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x0476 }
            android.content.Context r6 = (android.content.Context) r6     // Catch:{ all -> 0x0476 }
            r1.getMax(r4)     // Catch:{ all -> 0x0476 }
            java.lang.Object r12 = r1.isInside     // Catch:{ all -> 0x0476 }
            java.lang.String r12 = (java.lang.String) r12     // Catch:{ all -> 0x0476 }
            r1.getMax(r4)     // Catch:{ all -> 0x0476 }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x0476 }
            java.util.Map r4 = (java.util.Map) r4     // Catch:{ all -> 0x0476 }
            r0.<init>(r6, r12, r4)     // Catch:{ all -> 0x0476 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0476 }
            goto L_0x0435
        L_0x0476:
            r0 = move-exception
            goto L_0x0487
        L_0x0478:
            r11 = r12
            r13 = 4119(0x1017, float:5.772E-42)
            r0 = 137(0x89, float:1.92E-43)
            goto L_0x0126
        L_0x047f:
            r0 = r9
        L_0x0480:
            r12 = r11
            goto L_0x0126
        L_0x0483:
            r0 = move-exception
            r11 = r12
        L_0x0485:
            r13 = 4119(0x1017, float:5.772E-42)
        L_0x0487:
            byte[] r4 = getMin
            r6 = 8
            byte r8 = r4[r6]
            byte r6 = (byte) r8
            r8 = 13
            byte r4 = r4[r8]
            short r4 = (short) r4
            int r12 = length
            r12 = r12 | 7588(0x1da4, float:1.0633E-41)
            short r12 = (short) r12
            java.lang.String r4 = setMax(r6, r4, r12)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            r12 = 146(0x92, float:2.05E-43)
            if (r4 == 0) goto L_0x04b7
            if (r9 < r5) goto L_0x04b7
            r4 = 2
            if (r9 > r4) goto L_0x04b7
        L_0x04ad:
            r4 = 153(0x99, float:2.14E-43)
            r5 = 8
            r12 = 99
        L_0x04b3:
            r15 = 15
            goto L_0x062b
        L_0x04b7:
            byte[] r4 = getMin
            r14 = 8
            byte r15 = r4[r14]
            byte r14 = (byte) r15
            byte r4 = r4[r8]
            short r4 = (short) r4
            int r15 = length
            r15 = r15 | 7588(0x1da4, float:1.0633E-41)
            short r15 = (short) r15
            java.lang.String r4 = setMax(r14, r4, r15)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            r14 = 21
            if (r4 == 0) goto L_0x04e1
            if (r9 < r14) goto L_0x04e1
            r4 = 22
            if (r9 > r4) goto L_0x04e1
        L_0x04dc:
            r4 = 153(0x99, float:2.14E-43)
            r5 = 8
            goto L_0x04b3
        L_0x04e1:
            byte[] r4 = getMin
            r15 = 8
            byte r5 = r4[r15]
            byte r5 = (byte) r5
            byte r4 = r4[r8]
            short r4 = (short) r4
            int r15 = length
            r15 = r15 | 7588(0x1da4, float:1.0633E-41)
            short r15 = (short) r15
            java.lang.String r4 = setMax(r5, r4, r15)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0507
            r4 = 55
            if (r9 < r4) goto L_0x0509
            r5 = 56
            if (r9 > r5) goto L_0x0509
            goto L_0x04dc
        L_0x0507:
            r4 = 55
        L_0x0509:
            byte[] r5 = getMin
            r15 = 8
            byte r4 = r5[r15]
            byte r4 = (byte) r4
            r15 = 1156(0x484, float:1.62E-42)
            byte r5 = r5[r15]
            int r5 = -r5
            short r5 = (short) r5
            r15 = 5857(0x16e1, float:8.207E-42)
            short r15 = (short) r15
            java.lang.String r4 = setMax(r4, r5, r15)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0531
            r4 = 100
            if (r9 < r4) goto L_0x0533
            r5 = 101(0x65, float:1.42E-43)
            if (r9 > r5) goto L_0x0533
            goto L_0x04ad
        L_0x0531:
            r4 = 100
        L_0x0533:
            byte[] r5 = getMin
            r15 = 8
            byte r4 = r5[r15]
            byte r4 = (byte) r4
            r15 = 4868(0x1304, float:6.822E-42)
            byte r6 = r5[r15]
            short r6 = (short) r6
            r18 = 15
            byte r5 = r5[r18]
            short r5 = (short) r5
            java.lang.String r4 = setMax(r4, r6, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x055b
            r4 = 104(0x68, float:1.46E-43)
            if (r9 < r4) goto L_0x055b
            r4 = 109(0x6d, float:1.53E-43)
            if (r9 > r4) goto L_0x055b
            goto L_0x04dc
        L_0x055b:
            byte[] r4 = getMin
            r5 = 8
            byte r6 = r4[r5]
            byte r5 = (byte) r6
            r6 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r6]
            short r4 = (short) r4
            r6 = 10605(0x296d, float:1.4861E-41)
            short r6 = (short) r6
            java.lang.String r4 = setMax(r5, r4, r6)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0582
            r4 = 105(0x69, float:1.47E-43)
            if (r9 < r4) goto L_0x0582
            r4 = 106(0x6a, float:1.49E-43)
            if (r9 > r4) goto L_0x0582
            goto L_0x04dc
        L_0x0582:
            byte[] r4 = getMin
            r5 = 8
            byte r6 = r4[r5]
            byte r5 = (byte) r6
            byte r4 = r4[r15]
            short r4 = (short) r4
            r6 = 10554(0x293a, float:1.479E-41)
            short r6 = (short) r6
            java.lang.String r4 = setMax(r5, r4, r6)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x05a7
            r4 = 130(0x82, float:1.82E-43)
            if (r9 < r4) goto L_0x05a7
            r4 = 131(0x83, float:1.84E-43)
            if (r9 > r4) goto L_0x05a7
            goto L_0x04ad
        L_0x05a7:
            byte[] r4 = getMin
            r5 = 8
            byte r6 = r4[r5]
            byte r5 = (byte) r6
            byte r6 = r4[r15]
            short r6 = (short) r6
            r15 = 15
            byte r4 = r4[r15]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r5, r6, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x05d1
            r4 = 132(0x84, float:1.85E-43)
            if (r9 < r4) goto L_0x05d1
            r4 = 133(0x85, float:1.86E-43)
            if (r9 > r4) goto L_0x05d1
        L_0x05cc:
            r4 = 153(0x99, float:2.14E-43)
            r5 = 8
            goto L_0x062b
        L_0x05d1:
            byte[] r4 = getMin
            r5 = 8
            byte r6 = r4[r5]
            byte r5 = (byte) r6
            byte r4 = r4[r14]
            short r4 = (short) r4
            r6 = 10638(0x298e, float:1.4907E-41)
            short r6 = (short) r6
            java.lang.String r4 = setMax(r5, r4, r6)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x05f5
            r4 = 133(0x85, float:1.86E-43)
            if (r9 < r4) goto L_0x05f5
            r4 = 134(0x86, float:1.88E-43)
            if (r9 > r4) goto L_0x05f5
            goto L_0x05cc
        L_0x05f5:
            byte[] r4 = getMin
            r5 = 8
            byte r6 = r4[r5]
            byte r6 = (byte) r6
            byte r4 = r4[r8]
            short r4 = (short) r4
            int r8 = length
            r8 = r8 | 7588(0x1da4, float:1.0633E-41)
            short r8 = (short) r8
            java.lang.String r4 = setMax(r6, r4, r8)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x061f
            r4 = 134(0x86, float:1.88E-43)
            if (r9 < r4) goto L_0x061f
            r4 = 135(0x87, float:1.89E-43)
            if (r9 > r4) goto L_0x061f
            r4 = 153(0x99, float:2.14E-43)
            r12 = 99
            goto L_0x062b
        L_0x061f:
            r4 = 150(0x96, float:2.1E-43)
            if (r9 < r4) goto L_0x0636
            r4 = 153(0x99, float:2.14E-43)
            if (r9 > r4) goto L_0x0636
            r6 = 86
            r12 = 86
        L_0x062b:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r12
            r5 = 1
            goto L_0x0480
        L_0x0636:
            throw r0
        L_0x0637:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x063f
            throw r1
        L_0x063f:
            goto L_0x0641
        L_0x0640:
            throw r0
        L_0x0641:
            goto L_0x0640
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.toFloatRange():void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:63:0x01e5, code lost:
        if (r11 <= 37) goto L_0x01e7;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static final /* synthetic */ void toFloatRange(o.onValidateSchema r17) {
        /*
            o.TypeConverter r1 = new o.TypeConverter
            r0 = r17
            r1.<init>(r0)
            byte[] r0 = getMin
            r2 = 46
            byte r0 = r0[r2]
            byte r0 = (byte) r0
            r2 = r0 | 216(0xd8, float:3.03E-43)
            short r2 = (short) r2
            r3 = 2437(0x985, float:3.415E-42)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r4 = (short) r2
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r2 = setMax(r2, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x0263 }
            r6 = 0
            r5[r6] = r2     // Catch:{ all -> 0x0263 }
            byte[] r2 = getMin     // Catch:{ all -> 0x0263 }
            r7 = 8
            byte r2 = r2[r7]     // Catch:{ all -> 0x0263 }
            byte r2 = (byte) r2     // Catch:{ all -> 0x0263 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0263 }
            byte r8 = r8[r4]     // Catch:{ all -> 0x0263 }
            short r8 = (short) r8     // Catch:{ all -> 0x0263 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x0263 }
            java.lang.String r2 = setMax(r2, r8, r9)     // Catch:{ all -> 0x0263 }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x0263 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0263 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x0263 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0263 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0263 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x0263 }
            short r10 = (short) r10     // Catch:{ all -> 0x0263 }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x0263 }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x0263 }
            java.lang.Class[] r10 = new java.lang.Class[r4]     // Catch:{ all -> 0x0263 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0263 }
            byte r11 = r11[r7]     // Catch:{ all -> 0x0263 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0263 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0263 }
            byte r12 = r12[r4]     // Catch:{ all -> 0x0263 }
            short r12 = (short) r12     // Catch:{ all -> 0x0263 }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x0263 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0263 }
            r10[r6] = r11     // Catch:{ all -> 0x0263 }
            java.lang.reflect.Method r2 = r2.getMethod(r8, r10)     // Catch:{ all -> 0x0263 }
            java.lang.Object r0 = r2.invoke(r0, r5)     // Catch:{ all -> 0x0263 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0263 }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r5 = 0
        L_0x007d:
            int r8 = r0.length
            r10 = 32
            if (r5 >= r8) goto L_0x011d
            r8 = r0[r5]
            java.lang.Object[] r11 = new java.lang.Object[r4]     // Catch:{ all -> 0x0114 }
            r11[r6] = r8     // Catch:{ all -> 0x0114 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0114 }
            byte r8 = r8[r7]     // Catch:{ all -> 0x0114 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0114 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0114 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0114 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0114 }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0114 }
            java.lang.String r8 = setMax(r8, r12, r14)     // Catch:{ all -> 0x0114 }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x0114 }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x0114 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0114 }
            byte r10 = r15[r10]     // Catch:{ all -> 0x0114 }
            short r10 = (short) r10     // Catch:{ all -> 0x0114 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0114 }
            java.lang.String r10 = setMax(r12, r10, r15)     // Catch:{ all -> 0x0114 }
            java.lang.Class[] r12 = new java.lang.Class[r4]     // Catch:{ all -> 0x0114 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0114 }
            byte r15 = r15[r7]     // Catch:{ all -> 0x0114 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0114 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0114 }
            byte r3 = r16[r4]     // Catch:{ all -> 0x0114 }
            short r3 = (short) r3     // Catch:{ all -> 0x0114 }
            java.lang.String r3 = setMax(r15, r3, r9)     // Catch:{ all -> 0x0114 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0114 }
            r12[r6] = r3     // Catch:{ all -> 0x0114 }
            java.lang.reflect.Method r3 = r8.getMethod(r10, r12)     // Catch:{ all -> 0x0114 }
            r8 = 0
            java.lang.Object r3 = r3.invoke(r8, r11)     // Catch:{ all -> 0x0114 }
            byte[] r10 = getMin     // Catch:{ all -> 0x010b }
            byte r10 = r10[r7]     // Catch:{ all -> 0x010b }
            byte r10 = (byte) r10     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r13]     // Catch:{ all -> 0x010b }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x010b }
            java.lang.String r10 = setMax(r10, r11, r14)     // Catch:{ all -> 0x010b }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x010b }
            byte[] r11 = getMin     // Catch:{ all -> 0x010b }
            byte r11 = r11[r7]     // Catch:{ all -> 0x010b }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x010b }
            byte[] r12 = getMin     // Catch:{ all -> 0x010b }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x010b }
            short r12 = (short) r12     // Catch:{ all -> 0x010b }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x010b }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010b }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r8)     // Catch:{ all -> 0x010b }
            java.lang.Object r3 = r10.invoke(r3, r8)     // Catch:{ all -> 0x010b }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x010b }
            int r3 = r3.intValue()     // Catch:{ all -> 0x010b }
            r2[r5] = r3
            int r5 = r5 + 1
            r3 = 15
            goto L_0x007d
        L_0x010b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0113
            throw r1
        L_0x0113:
            throw r0
        L_0x0114:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011c
            throw r1
        L_0x011c:
            throw r0
        L_0x011d:
            r3 = 11
            r5 = 37
            r8 = 45
            r9 = 2
        L_0x0124:
            int r11 = r6 + 1
            r12 = 9
            r0 = r2[r6]     // Catch:{ all -> 0x01c3 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01c3 }
            r6 = 18
            r13 = 7
            switch(r0) {
                case -18: goto L_0x01bc;
                case -17: goto L_0x01b9;
                case -16: goto L_0x01aa;
                case -15: goto L_0x019d;
                case -14: goto L_0x0198;
                case -13: goto L_0x0197;
                case -12: goto L_0x0194;
                case -11: goto L_0x0186;
                case -10: goto L_0x0179;
                case -9: goto L_0x0171;
                case -8: goto L_0x015e;
                case -7: goto L_0x015b;
                case -6: goto L_0x0149;
                case -5: goto L_0x0146;
                case -4: goto L_0x0143;
                case -3: goto L_0x0140;
                case -2: goto L_0x0138;
                case -1: goto L_0x0136;
                default: goto L_0x0134;
            }     // Catch:{ all -> 0x01c3 }
        L_0x0134:
            goto L_0x01c0
        L_0x0136:
            r6 = 4
            goto L_0x0124
        L_0x0138:
            r1.getMax(r7)     // Catch:{ all -> 0x01c3 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01c3 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01c3 }
            throw r0     // Catch:{ all -> 0x01c3 }
        L_0x0140:
            r6 = 14
            goto L_0x0124
        L_0x0143:
            r6 = 15
            goto L_0x0124
        L_0x0146:
            r6 = 11
            goto L_0x0124
        L_0x0149:
            r1.setMax = r4     // Catch:{ all -> 0x01c3 }
            r1.getMax(r9)     // Catch:{ all -> 0x01c3 }
            r0 = 3
            r1.getMax(r0)     // Catch:{ all -> 0x01c3 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01c3 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01c3 }
            r0.toFloatRange()     // Catch:{ all -> 0x01c3 }
            goto L_0x01c0
        L_0x015b:
            r6 = 45
            goto L_0x0124
        L_0x015e:
            r1.getMax(r12)     // Catch:{ all -> 0x01c3 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01c3 }
            r6 = 41
            if (r0 == r3) goto L_0x0124
            r11 = 97
            if (r0 == r11) goto L_0x016c
            goto L_0x0124
        L_0x016c:
            r0 = 39
            r6 = 39
            goto L_0x0124
        L_0x0171:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01c3 }
            r1.setMax = r0     // Catch:{ all -> 0x01c3 }
        L_0x0175:
            r1.getMax(r6)     // Catch:{ all -> 0x01c3 }
            goto L_0x01c0
        L_0x0179:
            r1.setMax = r4     // Catch:{ all -> 0x01c3 }
            r1.getMax(r9)     // Catch:{ all -> 0x01c3 }
            r1.getMax(r13)     // Catch:{ all -> 0x01c3 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01c3 }
            invoke = r0     // Catch:{ all -> 0x01c3 }
            goto L_0x01c0
        L_0x0186:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01c3 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01c3 }
            if (r0 != 0) goto L_0x01c0
            r0 = 36
            r6 = 36
            goto L_0x0124
        L_0x0194:
            r6 = 10
            goto L_0x0124
        L_0x0197:
            return
        L_0x0198:
            int r0 = invoke     // Catch:{ all -> 0x01c3 }
            r1.setMax = r0     // Catch:{ all -> 0x01c3 }
            goto L_0x0175
        L_0x019d:
            r1.setMax = r4     // Catch:{ all -> 0x01c3 }
            r1.getMax(r9)     // Catch:{ all -> 0x01c3 }
            r1.getMax(r13)     // Catch:{ all -> 0x01c3 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01c3 }
            invokeSuspend = r0     // Catch:{ all -> 0x01c3 }
            goto L_0x01c0
        L_0x01aa:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x01c3 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01c3 }
            if (r0 != 0) goto L_0x01c0
            r0 = 63
            r6 = 63
            goto L_0x0124
        L_0x01b9:
            r6 = 2
            goto L_0x0124
        L_0x01bc:
            r6 = 37
            goto L_0x0124
        L_0x01c0:
            r6 = r11
            goto L_0x0124
        L_0x01c3:
            r0 = move-exception
            byte[] r6 = getMin
            byte r13 = r6[r7]
            byte r13 = (byte) r13
            r14 = 13
            byte r6 = r6[r14]
            short r6 = (short) r6
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r6 = setMax(r13, r6, r14)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x01eb
            r6 = 15
            if (r11 < r6) goto L_0x01ed
            if (r11 > r5) goto L_0x01ed
        L_0x01e7:
            r12 = 8
            goto L_0x0258
        L_0x01eb:
            r6 = 15
        L_0x01ed:
            byte[] r13 = getMin
            byte r14 = r13[r7]
            byte r14 = (byte) r14
            r15 = r14 & 227(0xe3, float:3.18E-43)
            short r15 = (short) r15
            r16 = 4868(0x1304, float:6.822E-42)
            byte r13 = r13[r16]
            short r13 = (short) r13
            java.lang.String r13 = setMax(r14, r15, r13)
            java.lang.Class r13 = java.lang.Class.forName(r13)
            boolean r13 = r13.isInstance(r0)
            if (r13 == 0) goto L_0x020f
            r13 = 31
            if (r11 < r13) goto L_0x020f
            if (r11 > r10) goto L_0x020f
            goto L_0x01e7
        L_0x020f:
            r13 = 42
            if (r11 < r13) goto L_0x0216
            if (r11 > r8) goto L_0x0216
            goto L_0x0258
        L_0x0216:
            byte[] r12 = getMin
            byte r13 = r12[r7]
            byte r13 = (byte) r13
            r14 = 7392(0x1ce0, float:1.0358E-41)
            byte r12 = r12[r14]
            short r12 = (short) r12
            r14 = 10605(0x296d, float:1.4861E-41)
            short r14 = (short) r14
            java.lang.String r12 = setMax(r13, r12, r14)
            java.lang.Class r12 = java.lang.Class.forName(r12)
            boolean r12 = r12.isInstance(r0)
            r13 = 64
            if (r12 == 0) goto L_0x0238
            if (r11 < r8) goto L_0x0238
            if (r11 > r13) goto L_0x0238
            goto L_0x01e7
        L_0x0238:
            byte[] r12 = getMin
            byte r14 = r12[r7]
            byte r14 = (byte) r14
            r15 = r14 & 227(0xe3, float:3.18E-43)
            short r15 = (short) r15
            byte r12 = r12[r16]
            short r12 = (short) r12
            java.lang.String r12 = setMax(r14, r15, r12)
            java.lang.Class r12 = java.lang.Class.forName(r12)
            boolean r12 = r12.isInstance(r0)
            if (r12 == 0) goto L_0x0262
            r12 = 58
            if (r11 < r12) goto L_0x0262
            if (r11 > r13) goto L_0x0262
            r12 = 1
        L_0x0258:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r6 = r12
            goto L_0x0124
        L_0x0262:
            throw r0
        L_0x0263:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x026b
            throw r1
        L_0x026b:
            goto L_0x026d
        L_0x026c:
            throw r0
        L_0x026d:
            goto L_0x026c
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.toFloatRange(o.onValidateSchema):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:100:0x02f0, code lost:
        if (r14 <= 46) goto L_0x02f2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:145:0x03be, code lost:
        if (r14 <= 62) goto L_0x0336;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x0159, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x019a, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x02cc, code lost:
        if (r14 <= 39) goto L_0x02a1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void getMax() {
        /*
            r18 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r18
            r1.<init>(r2)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = r0 | 296(0x128, float:4.15E-43)
            short r4 = (short) r4
            r5 = 5906(0x1712, float:8.276E-42)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r5 = (short) r4
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r4 = setMax(r4, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x03f5 }
            r7 = 0
            r6[r7] = r4     // Catch:{ all -> 0x03f5 }
            byte[] r4 = getMin     // Catch:{ all -> 0x03f5 }
            r8 = 8
            byte r4 = r4[r8]     // Catch:{ all -> 0x03f5 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x03f5 }
            byte[] r9 = getMin     // Catch:{ all -> 0x03f5 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x03f5 }
            short r9 = (short) r9     // Catch:{ all -> 0x03f5 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x03f5 }
            java.lang.String r4 = setMax(r4, r9, r10)     // Catch:{ all -> 0x03f5 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x03f5 }
            byte[] r9 = getMin     // Catch:{ all -> 0x03f5 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x03f5 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x03f5 }
            byte[] r11 = getMin     // Catch:{ all -> 0x03f5 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x03f5 }
            short r11 = (short) r11     // Catch:{ all -> 0x03f5 }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x03f5 }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x03f5 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x03f5 }
            byte[] r12 = getMin     // Catch:{ all -> 0x03f5 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x03f5 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x03f5 }
            byte[] r13 = getMin     // Catch:{ all -> 0x03f5 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x03f5 }
            short r13 = (short) r13     // Catch:{ all -> 0x03f5 }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x03f5 }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x03f5 }
            r11[r7] = r12     // Catch:{ all -> 0x03f5 }
            java.lang.reflect.Method r4 = r4.getMethod(r9, r11)     // Catch:{ all -> 0x03f5 }
            java.lang.Object r0 = r4.invoke(r0, r6)     // Catch:{ all -> 0x03f5 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x03f5 }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r6 = 0
        L_0x007d:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x011f
            r9 = r0[r6]
            java.lang.Object[] r11 = new java.lang.Object[r5]     // Catch:{ all -> 0x0116 }
            r11[r7] = r9     // Catch:{ all -> 0x0116 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0116 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0116 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0116 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0116 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0116 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0116 }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            java.lang.String r9 = setMax(r9, r12, r13)     // Catch:{ all -> 0x0116 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0116 }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x0116 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0116 }
            r15 = 32
            byte r14 = r14[r15]     // Catch:{ all -> 0x0116 }
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r12 = setMax(r12, r14, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r14 = new java.lang.Class[r5]     // Catch:{ all -> 0x0116 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0116 }
            byte r15 = r15[r8]     // Catch:{ all -> 0x0116 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r3 = r16[r5]     // Catch:{ all -> 0x0116 }
            short r3 = (short) r3     // Catch:{ all -> 0x0116 }
            java.lang.String r3 = setMax(r15, r3, r10)     // Catch:{ all -> 0x0116 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0116 }
            r14[r7] = r3     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r3 = r9.getMethod(r12, r14)     // Catch:{ all -> 0x0116 }
            r9 = 0
            java.lang.Object r3 = r3.invoke(r9, r11)     // Catch:{ all -> 0x0116 }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r8]     // Catch:{ all -> 0x010d }
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r14]     // Catch:{ all -> 0x010d }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x010d }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            byte r12 = r12[r8]     // Catch:{ all -> 0x010d }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x010d }
            byte[] r13 = getMin     // Catch:{ all -> 0x010d }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010d }
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010d }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x010d }
            java.lang.Object r3 = r11.invoke(r3, r9)     // Catch:{ all -> 0x010d }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x010d }
            int r3 = r3.intValue()     // Catch:{ all -> 0x010d }
            r4[r6] = r3
            int r6 = r6 + 1
            r3 = 46
            goto L_0x007d
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r3 = 47
            r6 = 16
            r10 = 9
            r13 = 3
        L_0x0126:
            int r14 = r7 + 1
            r15 = 11
            r12 = 2
            r0 = r4[r7]     // Catch:{ all -> 0x0255 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0255 }
            r7 = 7
            r9 = 18
            r11 = 4
            switch(r0) {
                case -27: goto L_0x024e;
                case -26: goto L_0x024a;
                case -25: goto L_0x023b;
                case -24: goto L_0x022e;
                case -23: goto L_0x0228;
                case -22: goto L_0x0216;
                case -21: goto L_0x0204;
                case -20: goto L_0x01f0;
                case -19: goto L_0x01ec;
                case -18: goto L_0x01d7;
                case -17: goto L_0x01c6;
                case -16: goto L_0x01c2;
                case -15: goto L_0x01be;
                case -14: goto L_0x01ba;
                case -13: goto L_0x01ad;
                case -12: goto L_0x019f;
                case -11: goto L_0x0196;
                case -10: goto L_0x0193;
                case -9: goto L_0x0176;
                case -8: goto L_0x0163;
                case -7: goto L_0x015e;
                case -6: goto L_0x014b;
                case -5: goto L_0x0148;
                case -4: goto L_0x0147;
                case -3: goto L_0x0144;
                case -2: goto L_0x013c;
                case -1: goto L_0x013a;
                default: goto L_0x0138;
            }     // Catch:{ all -> 0x0255 }
        L_0x0138:
            goto L_0x0252
        L_0x013a:
            r7 = 3
            goto L_0x0126
        L_0x013c:
            r1.getMax(r8)     // Catch:{ all -> 0x0255 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0255 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0255 }
            throw r0     // Catch:{ all -> 0x0255 }
        L_0x0144:
            r7 = 41
            goto L_0x0126
        L_0x0147:
            return
        L_0x0148:
            r7 = 48
            goto L_0x0126
        L_0x014b:
            r1.setMax = r5     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0255 }
            o.setGlobalUserData r0 = (o.setGlobalUserData) r0     // Catch:{ all -> 0x0255 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0255 }
        L_0x0159:
            r1.getMax(r11)     // Catch:{ all -> 0x0255 }
            goto L_0x0252
        L_0x015e:
            java.lang.String r0 = "forgot_pin"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0255 }
            goto L_0x0159
        L_0x0163:
            r1.setMax = r5     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0255 }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x0255 }
            o.setDatabasePath$length r0 = o.setDatabasePath.length.forParams(r0)     // Catch:{ all -> 0x0255 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0255 }
            goto L_0x0159
        L_0x0176:
            r1.setMax = r13     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0255 }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0255 }
            o.setGlobalUserData r7 = (o.setGlobalUserData) r7     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r9 = r1.isInside     // Catch:{ all -> 0x0255 }
            r0.execute(r7, r9)     // Catch:{ all -> 0x0255 }
            goto L_0x0252
        L_0x0193:
            r7 = 61
            goto L_0x0126
        L_0x0196:
            int r0 = invoke     // Catch:{ all -> 0x0255 }
            r1.setMax = r0     // Catch:{ all -> 0x0255 }
        L_0x019a:
            r1.getMax(r9)     // Catch:{ all -> 0x0255 }
            goto L_0x0252
        L_0x019f:
            r1.setMax = r5     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r7)     // Catch:{ all -> 0x0255 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0255 }
            invokeSuspend = r0     // Catch:{ all -> 0x0255 }
            goto L_0x0252
        L_0x01ad:
            r1.getMax(r3)     // Catch:{ all -> 0x0255 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0255 }
            if (r0 != 0) goto L_0x0252
            r0 = 38
            r7 = 38
            goto L_0x0126
        L_0x01ba:
            r7 = 86
            goto L_0x0126
        L_0x01be:
            r7 = 9
            goto L_0x0126
        L_0x01c2:
            r7 = 47
            goto L_0x0126
        L_0x01c6:
            r1.setMax = r5     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0255 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0255 }
            o.setDatabasePath r0 = r0.toFloatRange     // Catch:{ all -> 0x0255 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0255 }
            goto L_0x0159
        L_0x01d7:
            o.onValidateSchema$getMin r0 = new o.onValidateSchema$getMin     // Catch:{ all -> 0x0255 }
            r1.setMax = r5     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0255 }
            o.onValidateSchema r7 = (o.onValidateSchema) r7     // Catch:{ all -> 0x0255 }
            r0.<init>(r7)     // Catch:{ all -> 0x0255 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0255 }
            goto L_0x0159
        L_0x01ec:
            r7 = 16
            goto L_0x0126
        L_0x01f0:
            r1.getMax(r10)     // Catch:{ all -> 0x0255 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0255 }
            if (r0 == 0) goto L_0x0200
            if (r0 == r5) goto L_0x01fa
            goto L_0x0200
        L_0x01fa:
            r0 = 49
            r7 = 49
            goto L_0x0126
        L_0x0200:
            r0 = 6
            r7 = 6
            goto L_0x0126
        L_0x0204:
            r1.getMax(r10)     // Catch:{ all -> 0x0255 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0255 }
            if (r0 == 0) goto L_0x0212
            if (r0 == r5) goto L_0x020e
            goto L_0x0212
        L_0x020e:
            r7 = 11
            goto L_0x0126
        L_0x0212:
            r7 = 54
            goto L_0x0126
        L_0x0216:
            r1.setMax = r5     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r13)     // Catch:{ all -> 0x0255 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0255 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x0255 }
            r1.setMax = r0     // Catch:{ all -> 0x0255 }
            goto L_0x019a
        L_0x0228:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0255 }
            r1.setMax = r0     // Catch:{ all -> 0x0255 }
            goto L_0x019a
        L_0x022e:
            r1.setMax = r5     // Catch:{ all -> 0x0255 }
            r1.getMax(r12)     // Catch:{ all -> 0x0255 }
            r1.getMax(r7)     // Catch:{ all -> 0x0255 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0255 }
            invoke = r0     // Catch:{ all -> 0x0255 }
            goto L_0x0252
        L_0x023b:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x0255 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0255 }
            if (r0 != 0) goto L_0x0252
            r0 = 83
            r7 = 83
            goto L_0x0126
        L_0x024a:
            r7 = 39
            goto L_0x0126
        L_0x024e:
            r7 = 84
            goto L_0x0126
        L_0x0252:
            r7 = r14
            goto L_0x0126
        L_0x0255:
            r0 = move-exception
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            r11 = 4869(0x1305, float:6.823E-42)
            byte r7 = r7[r11]
            short r7 = (short) r7
            r3 = 1139(0x473, float:1.596E-42)
            short r3 = (short) r3
            java.lang.String r7 = setMax(r9, r7, r3)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x0280
            if (r14 < r15) goto L_0x0280
            r7 = 12
            if (r14 > r7) goto L_0x0280
            r3 = 61
            r5 = 84
            r6 = 46
        L_0x027d:
            r7 = 2
            goto L_0x03e6
        L_0x0280:
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            r15 = 4116(0x1014, float:5.768E-42)
            byte r7 = r7[r15]
            short r7 = (short) r7
            r5 = 4837(0x12e5, float:6.778E-42)
            short r5 = (short) r5
            java.lang.String r7 = setMax(r9, r7, r5)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x02ab
            if (r14 < r6) goto L_0x02ab
            r7 = 39
            if (r14 > r7) goto L_0x02ab
        L_0x02a1:
            r3 = 61
            r5 = 84
            r6 = 46
        L_0x02a7:
            r7 = 46
            goto L_0x03e6
        L_0x02ab:
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            r6 = r9 & 227(0xe3, float:3.18E-43)
            short r6 = (short) r6
            r17 = 4868(0x1304, float:6.822E-42)
            byte r7 = r7[r17]
            short r7 = (short) r7
            java.lang.String r6 = setMax(r9, r6, r7)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x02cf
            r6 = 33
            if (r14 < r6) goto L_0x02cf
            r6 = 39
            if (r14 > r6) goto L_0x02d1
            goto L_0x02a1
        L_0x02cf:
            r6 = 39
        L_0x02d1:
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            r6 = r9 & 227(0xe3, float:3.18E-43)
            short r6 = (short) r6
            byte r7 = r7[r17]
            short r7 = (short) r7
            java.lang.String r6 = setMax(r9, r6, r7)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x02f7
            r6 = 42
            if (r14 < r6) goto L_0x02f7
            r6 = 46
            if (r14 > r6) goto L_0x02f9
        L_0x02f2:
            r3 = 61
        L_0x02f4:
            r5 = 84
            goto L_0x02a7
        L_0x02f7:
            r6 = 46
        L_0x02f9:
            r7 = 50
            if (r14 < r7) goto L_0x0308
            r7 = 54
            if (r14 > r7) goto L_0x0308
            r3 = 61
            r5 = 84
            r7 = 1
            goto L_0x03e6
        L_0x0308:
            r7 = 58
            if (r14 < r7) goto L_0x0318
            r7 = 61
            if (r14 > r7) goto L_0x0318
            r3 = 61
            r5 = 84
            r7 = 8
            goto L_0x03e6
        L_0x0318:
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            byte r7 = r7[r11]
            short r7 = (short) r7
            java.lang.String r3 = setMax(r9, r7, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x033a
            r3 = 54
            if (r14 < r3) goto L_0x033a
            r3 = 61
            if (r14 > r3) goto L_0x033a
        L_0x0336:
            r5 = 84
            goto L_0x027d
        L_0x033a:
            byte[] r3 = getMin
            byte r7 = r3[r8]
            byte r7 = (byte) r7
            r9 = r7 & 227(0xe3, float:3.18E-43)
            short r9 = (short) r9
            byte r3 = r3[r17]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r7, r9, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x035c
            r3 = 55
            if (r14 < r3) goto L_0x035c
            r3 = 61
            if (r14 > r3) goto L_0x035c
            goto L_0x02f4
        L_0x035c:
            byte[] r3 = getMin
            byte r7 = r3[r8]
            byte r7 = (byte) r7
            byte r3 = r3[r15]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r7, r3, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x037c
            r3 = 56
            if (r14 < r3) goto L_0x037c
            r3 = 57
            if (r14 > r3) goto L_0x037c
            goto L_0x02f2
        L_0x037c:
            byte[] r3 = getMin
            byte r7 = r3[r8]
            byte r7 = (byte) r7
            byte r3 = r3[r15]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r7, r3, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x039d
            r3 = 57
            if (r14 < r3) goto L_0x039d
            r3 = 58
            if (r14 > r3) goto L_0x039d
            r3 = 61
            goto L_0x0336
        L_0x039d:
            byte[] r3 = getMin
            byte r5 = r3[r8]
            byte r5 = (byte) r5
            r7 = 21
            byte r3 = r3[r7]
            short r3 = (short) r3
            r7 = 10638(0x298e, float:1.4907E-41)
            short r7 = (short) r7
            java.lang.String r3 = setMax(r5, r3, r7)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x03c2
            r3 = 61
            if (r14 < r3) goto L_0x03c4
            r5 = 62
            if (r14 > r5) goto L_0x03c4
            goto L_0x0336
        L_0x03c2:
            r3 = 61
        L_0x03c4:
            byte[] r5 = getMin
            byte r9 = r5[r8]
            byte r9 = (byte) r9
            r11 = 21
            byte r5 = r5[r11]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r9, r5, r7)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x03f4
            r5 = 79
            if (r14 < r5) goto L_0x03f4
            r5 = 84
            if (r14 > r5) goto L_0x03f4
            goto L_0x027d
        L_0x03e6:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r3 = 47
            r5 = 1
            r6 = 16
            goto L_0x0126
        L_0x03f4:
            throw r0
        L_0x03f5:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x03fd
            throw r1
        L_0x03fd:
            goto L_0x03ff
        L_0x03fe:
            throw r0
        L_0x03ff:
            goto L_0x03fe
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax():void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x014d, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x017c, code lost:
        r1.getMax(4);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void getMax(@org.jetbrains.annotations.NotNull java.lang.String r19, @org.jetbrains.annotations.NotNull java.lang.String r20, boolean r21, @org.jetbrains.annotations.NotNull java.lang.String r22, @org.jetbrains.annotations.NotNull java.lang.String r23) {
        /*
            r18 = this;
            o.TypeConverter r8 = new o.TypeConverter
            r1 = r8
            r2 = r18
            r3 = r19
            r4 = r20
            r5 = r21
            r6 = r22
            r7 = r23
            r1.<init>(r2, r3, r4, r5, r6, r7)
            byte[] r0 = getMin
            r1 = 46
            byte r0 = r0[r1]
            byte r0 = (byte) r0
            r2 = 290(0x122, float:4.06E-43)
            short r2 = (short) r2
            r3 = 4281(0x10b9, float:5.999E-42)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r3 = (short) r2
            r4 = r3 | 4577(0x11e1, float:6.414E-42)
            short r4 = (short) r4
            java.lang.String r2 = setMax(r2, r3, r4)
            r3 = 1
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ all -> 0x03a6 }
            r5 = 0
            r4[r5] = r2     // Catch:{ all -> 0x03a6 }
            byte[] r2 = getMin     // Catch:{ all -> 0x03a6 }
            r6 = 8
            byte r2 = r2[r6]     // Catch:{ all -> 0x03a6 }
            byte r2 = (byte) r2     // Catch:{ all -> 0x03a6 }
            byte[] r7 = getMin     // Catch:{ all -> 0x03a6 }
            byte r7 = r7[r3]     // Catch:{ all -> 0x03a6 }
            short r7 = (short) r7     // Catch:{ all -> 0x03a6 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x03a6 }
            java.lang.String r2 = setMax(r2, r7, r9)     // Catch:{ all -> 0x03a6 }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x03a6 }
            byte[] r7 = getMin     // Catch:{ all -> 0x03a6 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r7 = r7[r10]     // Catch:{ all -> 0x03a6 }
            byte r7 = (byte) r7     // Catch:{ all -> 0x03a6 }
            byte[] r10 = getMin     // Catch:{ all -> 0x03a6 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x03a6 }
            short r10 = (short) r10     // Catch:{ all -> 0x03a6 }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x03a6 }
            java.lang.String r7 = setMax(r7, r10, r12)     // Catch:{ all -> 0x03a6 }
            java.lang.Class[] r10 = new java.lang.Class[r3]     // Catch:{ all -> 0x03a6 }
            byte[] r12 = getMin     // Catch:{ all -> 0x03a6 }
            byte r12 = r12[r6]     // Catch:{ all -> 0x03a6 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x03a6 }
            byte[] r13 = getMin     // Catch:{ all -> 0x03a6 }
            byte r13 = r13[r3]     // Catch:{ all -> 0x03a6 }
            short r13 = (short) r13     // Catch:{ all -> 0x03a6 }
            java.lang.String r12 = setMax(r12, r13, r9)     // Catch:{ all -> 0x03a6 }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x03a6 }
            r10[r5] = r12     // Catch:{ all -> 0x03a6 }
            java.lang.reflect.Method r2 = r2.getMethod(r7, r10)     // Catch:{ all -> 0x03a6 }
            java.lang.Object r0 = r2.invoke(r0, r4)     // Catch:{ all -> 0x03a6 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x03a6 }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r4 = 0
        L_0x0088:
            int r7 = r0.length
            r10 = 74
            if (r4 >= r7) goto L_0x012a
            r7 = r0[r4]
            java.lang.Object[] r12 = new java.lang.Object[r3]     // Catch:{ all -> 0x0121 }
            r12[r5] = r7     // Catch:{ all -> 0x0121 }
            byte[] r7 = getMin     // Catch:{ all -> 0x0121 }
            byte r7 = r7[r6]     // Catch:{ all -> 0x0121 }
            byte r7 = (byte) r7     // Catch:{ all -> 0x0121 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0121 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0121 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0121 }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0121 }
            java.lang.String r7 = setMax(r7, r13, r14)     // Catch:{ all -> 0x0121 }
            java.lang.Class r7 = java.lang.Class.forName(r7)     // Catch:{ all -> 0x0121 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0121 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0121 }
            r15 = 32
            byte r13 = r13[r15]     // Catch:{ all -> 0x0121 }
            short r13 = (short) r13     // Catch:{ all -> 0x0121 }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x0121 }
            java.lang.String r10 = setMax(r10, r13, r15)     // Catch:{ all -> 0x0121 }
            java.lang.Class[] r13 = new java.lang.Class[r3]     // Catch:{ all -> 0x0121 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0121 }
            byte r15 = r15[r6]     // Catch:{ all -> 0x0121 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0121 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0121 }
            byte r1 = r16[r3]     // Catch:{ all -> 0x0121 }
            short r1 = (short) r1     // Catch:{ all -> 0x0121 }
            java.lang.String r1 = setMax(r15, r1, r9)     // Catch:{ all -> 0x0121 }
            java.lang.Class r1 = java.lang.Class.forName(r1)     // Catch:{ all -> 0x0121 }
            r13[r5] = r1     // Catch:{ all -> 0x0121 }
            java.lang.reflect.Method r1 = r7.getMethod(r10, r13)     // Catch:{ all -> 0x0121 }
            r7 = 0
            java.lang.Object r1 = r1.invoke(r7, r12)     // Catch:{ all -> 0x0121 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0118 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x0118 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0118 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0118 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0118 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0118 }
            java.lang.String r10 = setMax(r10, r12, r14)     // Catch:{ all -> 0x0118 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0118 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0118 }
            byte r12 = r12[r6]     // Catch:{ all -> 0x0118 }
            int r12 = r12 - r3
            byte r12 = (byte) r12     // Catch:{ all -> 0x0118 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0118 }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x0118 }
            short r13 = (short) r13     // Catch:{ all -> 0x0118 }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0118 }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x0118 }
            java.lang.reflect.Method r10 = r10.getMethod(r12, r7)     // Catch:{ all -> 0x0118 }
            java.lang.Object r1 = r10.invoke(r1, r7)     // Catch:{ all -> 0x0118 }
            java.lang.Integer r1 = (java.lang.Integer) r1     // Catch:{ all -> 0x0118 }
            int r1 = r1.intValue()     // Catch:{ all -> 0x0118 }
            r2[r4] = r1
            int r4 = r4 + 1
            r1 = 46
            goto L_0x0088
        L_0x0118:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0120
            throw r1
        L_0x0120:
            throw r0
        L_0x0121:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0129
            throw r1
        L_0x0129:
            throw r0
        L_0x012a:
            r4 = 29
        L_0x012c:
            int r7 = r5 + 1
            r9 = 64
            r13 = 24
            r14 = 17
            r15 = 18
            r12 = 2
            r0 = r2[r5]     // Catch:{ all -> 0x020f }
            int r0 = r8.getMax(r0)     // Catch:{ all -> 0x020f }
            r5 = 9
            r10 = 4
            switch(r0) {
                case -25: goto L_0x0207;
                case -24: goto L_0x01f6;
                case -23: goto L_0x01e2;
                case -22: goto L_0x01df;
                case -21: goto L_0x01da;
                case -20: goto L_0x01d5;
                case -19: goto L_0x01d2;
                case -18: goto L_0x01d0;
                case -17: goto L_0x01cd;
                case -16: goto L_0x01ca;
                case -15: goto L_0x01be;
                case -14: goto L_0x01b0;
                case -13: goto L_0x01ab;
                case -12: goto L_0x01a3;
                case -11: goto L_0x01a2;
                case -10: goto L_0x019e;
                case -9: goto L_0x0199;
                case -8: goto L_0x0181;
                case -7: goto L_0x0178;
                case -6: goto L_0x0174;
                case -5: goto L_0x0170;
                case -4: goto L_0x0161;
                case -3: goto L_0x0152;
                case -2: goto L_0x0149;
                case -1: goto L_0x0145;
                default: goto L_0x0143;
            }     // Catch:{ all -> 0x020f }
        L_0x0143:
            goto L_0x020a
        L_0x0145:
            r5 = 50
            goto L_0x020b
        L_0x0149:
            int r0 = invokeSuspend     // Catch:{ all -> 0x020f }
            r8.setMax = r0     // Catch:{ all -> 0x020f }
        L_0x014d:
            r8.getMax(r15)     // Catch:{ all -> 0x020f }
            goto L_0x020a
        L_0x0152:
            r8.setMax = r3     // Catch:{ all -> 0x020f }
            r8.getMax(r12)     // Catch:{ all -> 0x020f }
            r0 = 7
            r8.getMax(r0)     // Catch:{ all -> 0x020f }
            int r0 = r8.setMin     // Catch:{ all -> 0x020f }
            invoke = r0     // Catch:{ all -> 0x020f }
            goto L_0x020a
        L_0x0161:
            r0 = 34
            r8.getMax(r0)     // Catch:{ all -> 0x020f }
            int r0 = r8.setMin     // Catch:{ all -> 0x020f }
            if (r0 != 0) goto L_0x020a
            r0 = 16
            r5 = 16
            goto L_0x020b
        L_0x0170:
            r5 = 76
            goto L_0x020b
        L_0x0174:
            r5 = 56
            goto L_0x020b
        L_0x0178:
            java.lang.String r0 = "inputPin"
            r8.IsOverlapping = r0     // Catch:{ all -> 0x020f }
        L_0x017c:
            r8.getMax(r10)     // Catch:{ all -> 0x020f }
            goto L_0x020a
        L_0x0181:
            r8.setMax = r12     // Catch:{ all -> 0x020f }
            r8.getMax(r12)     // Catch:{ all -> 0x020f }
            r0 = 3
            r8.getMax(r0)     // Catch:{ all -> 0x020f }
            java.lang.Object r0 = r8.isInside     // Catch:{ all -> 0x020f }
            r5 = 3
            r8.getMax(r5)     // Catch:{ all -> 0x020f }
            java.lang.Object r5 = r8.isInside     // Catch:{ all -> 0x020f }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ all -> 0x020f }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r5)     // Catch:{ all -> 0x020f }
            goto L_0x020a
        L_0x0199:
            java.lang.String r0 = "authType"
            r8.IsOverlapping = r0     // Catch:{ all -> 0x020f }
            goto L_0x017c
        L_0x019e:
            r5 = 67
            goto L_0x020b
        L_0x01a2:
            return
        L_0x01a3:
            r8.getMax(r6)     // Catch:{ all -> 0x020f }
            java.lang.Object r0 = r8.isInside     // Catch:{ all -> 0x020f }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x020f }
            throw r0     // Catch:{ all -> 0x020f }
        L_0x01ab:
            int r0 = invoke     // Catch:{ all -> 0x020f }
            r8.setMax = r0     // Catch:{ all -> 0x020f }
            goto L_0x014d
        L_0x01b0:
            r8.setMax = r3     // Catch:{ all -> 0x020f }
            r8.getMax(r12)     // Catch:{ all -> 0x020f }
            r0 = 7
            r8.getMax(r0)     // Catch:{ all -> 0x020f }
            int r0 = r8.setMin     // Catch:{ all -> 0x020f }
            invokeSuspend = r0     // Catch:{ all -> 0x020f }
            goto L_0x020a
        L_0x01be:
            r0 = 47
            r8.getMax(r0)     // Catch:{ all -> 0x020f }
            int r0 = r8.setMin     // Catch:{ all -> 0x020f }
            if (r0 != 0) goto L_0x020a
            r5 = 49
            goto L_0x020b
        L_0x01ca:
            r5 = 82
            goto L_0x020b
        L_0x01cd:
            r5 = 80
            goto L_0x020b
        L_0x01d0:
            r5 = 1
            goto L_0x020b
        L_0x01d2:
            r5 = 75
            goto L_0x020b
        L_0x01d5:
            java.lang.String r0 = "pubKey"
            r8.IsOverlapping = r0     // Catch:{ all -> 0x020f }
            goto L_0x017c
        L_0x01da:
            java.lang.String r0 = "securityId"
            r8.IsOverlapping = r0     // Catch:{ all -> 0x020f }
            goto L_0x017c
        L_0x01df:
            r5 = 29
            goto L_0x020b
        L_0x01e2:
            r8.getMax(r5)     // Catch:{ all -> 0x020f }
            int r0 = r8.setMin     // Catch:{ all -> 0x020f }
            if (r0 == r9) goto L_0x01f3
            r5 = 89
            if (r0 == r5) goto L_0x01ee
            goto L_0x01f3
        L_0x01ee:
            r0 = 58
            r5 = 58
            goto L_0x020b
        L_0x01f3:
            r5 = 17
            goto L_0x020b
        L_0x01f6:
            r8.getMax(r5)     // Catch:{ all -> 0x020f }
            int r0 = r8.setMin     // Catch:{ all -> 0x020f }
            if (r0 == r6) goto L_0x0204
            r5 = 41
            r0 = 54
            r5 = 54
            goto L_0x020b
        L_0x0204:
            r5 = 24
            goto L_0x020b
        L_0x0207:
            r5 = 78
            goto L_0x020b
        L_0x020a:
            r5 = r7
        L_0x020b:
            r10 = 74
            goto L_0x012c
        L_0x020f:
            r0 = move-exception
            byte[] r5 = getMin
            byte r10 = r5[r6]
            byte r10 = (byte) r10
            r16 = 4868(0x1304, float:6.822E-42)
            byte r5 = r5[r16]
            short r5 = (short) r5
            r1 = 10554(0x293a, float:1.479E-41)
            short r1 = (short) r1
            java.lang.String r5 = setMax(r10, r5, r1)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            r10 = 28
            if (r5 == 0) goto L_0x0239
            if (r7 < r3) goto L_0x0239
            if (r7 > r12) goto L_0x0239
        L_0x0231:
            r1 = 74
            r5 = 46
        L_0x0235:
            r9 = 67
            goto L_0x039a
        L_0x0239:
            byte[] r5 = getMin
            byte r12 = r5[r6]
            byte r12 = (byte) r12
            r17 = 4869(0x1305, float:6.823E-42)
            byte r5 = r5[r17]
            short r5 = (short) r5
            r3 = 1139(0x473, float:1.596E-42)
            short r3 = (short) r3
            java.lang.String r5 = setMax(r12, r5, r3)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0264
            r5 = 11
            if (r7 < r5) goto L_0x0264
            if (r7 > r14) goto L_0x0264
        L_0x025a:
            r1 = 74
            r5 = 46
            r9 = 67
        L_0x0260:
            r10 = 74
            goto L_0x039a
        L_0x0264:
            byte[] r5 = getMin
            byte r12 = r5[r6]
            byte r12 = (byte) r12
            r14 = 13
            byte r5 = r5[r14]
            short r5 = (short) r5
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r5 = setMax(r12, r5, r14)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0286
            if (r7 < r15) goto L_0x0286
            if (r7 > r13) goto L_0x0286
            goto L_0x025a
        L_0x0286:
            byte[] r5 = getMin
            byte r12 = r5[r6]
            byte r12 = (byte) r12
            r14 = 7392(0x1ce0, float:1.0358E-41)
            byte r5 = r5[r14]
            short r5 = (short) r5
            r14 = 10605(0x296d, float:1.4861E-41)
            short r14 = (short) r14
            java.lang.String r5 = setMax(r12, r5, r14)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02a8
            r5 = 19
            if (r7 < r5) goto L_0x02a8
            if (r7 > r13) goto L_0x02a8
            goto L_0x0231
        L_0x02a8:
            r5 = 25
            if (r7 < r5) goto L_0x02ba
            if (r7 > r10) goto L_0x02ba
            r1 = 79
            r1 = 74
            r5 = 46
            r9 = 67
            r10 = 79
            goto L_0x039a
        L_0x02ba:
            byte[] r5 = getMin
            byte r12 = r5[r6]
            byte r12 = (byte) r12
            r13 = r12 & 227(0xe3, float:3.18E-43)
            short r13 = (short) r13
            byte r5 = r5[r16]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r12, r13, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02d9
            if (r7 < r4) goto L_0x02d9
            if (r7 > r11) goto L_0x02d9
            goto L_0x0231
        L_0x02d9:
            byte[] r5 = getMin
            byte r12 = r5[r6]
            byte r12 = (byte) r12
            r13 = r12 & 227(0xe3, float:3.18E-43)
            short r13 = (short) r13
            byte r5 = r5[r16]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r12, r13, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02fe
            r5 = 45
            if (r7 < r5) goto L_0x02fe
            r5 = 46
            if (r7 > r5) goto L_0x0300
            r1 = 74
            goto L_0x0235
        L_0x02fe:
            r5 = 46
        L_0x0300:
            if (r7 < r9) goto L_0x030e
            r9 = 67
            if (r7 > r9) goto L_0x0310
            r1 = 84
            r1 = 74
            r10 = 84
            goto L_0x039a
        L_0x030e:
            r9 = 67
        L_0x0310:
            byte[] r12 = getMin
            byte r13 = r12[r6]
            byte r13 = (byte) r13
            byte r12 = r12[r16]
            short r12 = (short) r12
            java.lang.String r1 = setMax(r13, r12, r1)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x032f
            r1 = 68
            if (r7 < r1) goto L_0x032f
            r1 = 74
            if (r7 > r1) goto L_0x032f
            goto L_0x039a
        L_0x032f:
            byte[] r1 = getMin
            byte r12 = r1[r6]
            byte r12 = (byte) r12
            r13 = 13
            byte r1 = r1[r13]
            short r1 = (short) r1
            int r13 = length
            r13 = r13 | 7588(0x1da4, float:1.0633E-41)
            short r13 = (short) r13
            java.lang.String r1 = setMax(r12, r1, r13)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x0355
            r1 = 69
            if (r7 < r1) goto L_0x0355
            r1 = 74
            if (r7 > r1) goto L_0x0355
            goto L_0x039a
        L_0x0355:
            byte[] r1 = getMin
            byte r12 = r1[r6]
            byte r12 = (byte) r12
            r13 = 49
            byte r1 = r1[r13]
            short r1 = (short) r1
            r13 = 9600(0x2580, float:1.3452E-41)
            short r13 = (short) r13
            java.lang.String r1 = setMax(r12, r1, r13)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x037c
            r1 = 71
            if (r7 < r1) goto L_0x037c
            r1 = 74
            if (r7 > r1) goto L_0x037c
            r1 = 74
            goto L_0x0260
        L_0x037c:
            byte[] r1 = getMin
            byte r12 = r1[r6]
            byte r12 = (byte) r12
            byte r1 = r1[r17]
            short r1 = (short) r1
            java.lang.String r1 = setMax(r12, r1, r3)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x03a5
            r1 = 72
            if (r7 < r1) goto L_0x03a5
            r1 = 74
            if (r7 > r1) goto L_0x03a5
        L_0x039a:
            r8.IsOverlapping = r0
            r3 = 49
            r8.getMax(r3)
            r5 = r10
            r3 = 1
            goto L_0x020b
        L_0x03a5:
            throw r0
        L_0x03a6:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x03ae
            throw r1
        L_0x03ae:
            goto L_0x03b0
        L_0x03af:
            throw r0
        L_0x03b0:
            goto L_0x03af
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:142:0x03d1, code lost:
        if (r10 <= 73) goto L_0x0324;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:149:0x03f8, code lost:
        if (r10 <= 76) goto L_0x02b7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0157, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:0x0240, code lost:
        r1.getMax(18);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void getMax(@org.jetbrains.annotations.NotNull java.lang.String r22, boolean r23) {
        /*
            r21 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r21
            r0 = r22
            r3 = r23
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0, (int) r3)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = 340(0x154, float:4.76E-43)
            short r3 = (short) r3
            r4 = 11886(0x2e6e, float:1.6656E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x0430 }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x0430 }
            byte[] r3 = getMin     // Catch:{ all -> 0x0430 }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x0430 }
            byte r3 = (byte) r3     // Catch:{ all -> 0x0430 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0430 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x0430 }
            short r9 = (short) r9     // Catch:{ all -> 0x0430 }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x0430 }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x0430 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0430 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0430 }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x0430 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0430 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0430 }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x0430 }
            short r11 = (short) r11     // Catch:{ all -> 0x0430 }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x0430 }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x0430 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x0430 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0430 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x0430 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x0430 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0430 }
            byte r13 = r13[r5]     // Catch:{ all -> 0x0430 }
            short r13 = (short) r13     // Catch:{ all -> 0x0430 }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x0430 }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x0430 }
            r11[r7] = r12     // Catch:{ all -> 0x0430 }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x0430 }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x0430 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0430 }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x0081:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x0123
            r9 = r0[r6]
            java.lang.Object[] r12 = new java.lang.Object[r5]     // Catch:{ all -> 0x011a }
            r12[r7] = r9     // Catch:{ all -> 0x011a }
            byte[] r9 = getMin     // Catch:{ all -> 0x011a }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011a }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011a }
            byte[] r13 = getMin     // Catch:{ all -> 0x011a }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x011a }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x011a }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x011a }
            java.lang.String r9 = setMax(r9, r13, r15)     // Catch:{ all -> 0x011a }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011a }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x011a }
            byte[] r16 = getMin     // Catch:{ all -> 0x011a }
            r17 = 32
            byte r4 = r16[r17]     // Catch:{ all -> 0x011a }
            short r4 = (short) r4     // Catch:{ all -> 0x011a }
            r11 = 10257(0x2811, float:1.4373E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x011a }
            java.lang.String r4 = setMax(r13, r4, r11)     // Catch:{ all -> 0x011a }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x011a }
            byte[] r13 = getMin     // Catch:{ all -> 0x011a }
            byte r13 = r13[r8]     // Catch:{ all -> 0x011a }
            byte r13 = (byte) r13     // Catch:{ all -> 0x011a }
            byte[] r16 = getMin     // Catch:{ all -> 0x011a }
            byte r14 = r16[r5]     // Catch:{ all -> 0x011a }
            short r14 = (short) r14     // Catch:{ all -> 0x011a }
            java.lang.String r13 = setMax(r13, r14, r10)     // Catch:{ all -> 0x011a }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x011a }
            r11[r7] = r13     // Catch:{ all -> 0x011a }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r11)     // Catch:{ all -> 0x011a }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r12)     // Catch:{ all -> 0x011a }
            byte[] r11 = getMin     // Catch:{ all -> 0x0111 }
            byte r11 = r11[r8]     // Catch:{ all -> 0x0111 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0111 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0111 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0111 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0111 }
            java.lang.String r11 = setMax(r11, r12, r15)     // Catch:{ all -> 0x0111 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0111 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0111 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x0111 }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x0111 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0111 }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x0111 }
            short r13 = (short) r13     // Catch:{ all -> 0x0111 }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0111 }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x0111 }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x0111 }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x0111 }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x0111 }
            int r4 = r4.intValue()     // Catch:{ all -> 0x0111 }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            goto L_0x0081
        L_0x0111:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0119
            throw r1
        L_0x0119:
            throw r0
        L_0x011a:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0122
            throw r1
        L_0x0122:
            throw r0
        L_0x0123:
            r6 = 42
            r9 = 3
            r0 = 0
        L_0x0127:
            int r10 = r0 + 1
            r11 = 97
            r12 = 34
            r13 = 9
            r14 = 4
            r0 = r3[r0]     // Catch:{ all -> 0x028b }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x028b }
            r15 = 18
            r7 = 7
            r4 = 2
            switch(r0) {
                case -30: goto L_0x0284;
                case -29: goto L_0x0282;
                case -28: goto L_0x027f;
                case -27: goto L_0x0273;
                case -26: goto L_0x0266;
                case -25: goto L_0x0261;
                case -24: goto L_0x025e;
                case -23: goto L_0x025b;
                case -22: goto L_0x0251;
                case -21: goto L_0x0244;
                case -20: goto L_0x023c;
                case -19: goto L_0x022c;
                case -18: goto L_0x0229;
                case -17: goto L_0x0218;
                case -16: goto L_0x0206;
                case -15: goto L_0x01f0;
                case -14: goto L_0x01ea;
                case -13: goto L_0x01e9;
                case -12: goto L_0x01e5;
                case -11: goto L_0x01c8;
                case -10: goto L_0x01ab;
                case -9: goto L_0x019c;
                case -8: goto L_0x0198;
                case -7: goto L_0x0186;
                case -6: goto L_0x017e;
                case -5: goto L_0x017a;
                case -4: goto L_0x015c;
                case -3: goto L_0x0147;
                case -2: goto L_0x0143;
                case -1: goto L_0x013f;
                default: goto L_0x013d;
            }     // Catch:{ all -> 0x028b }
        L_0x013d:
            goto L_0x0287
        L_0x013f:
            r0 = 102(0x66, float:1.43E-43)
            goto L_0x0288
        L_0x0143:
            r0 = 42
            goto L_0x0288
        L_0x0147:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.DebugMonitor r0 = r0.setMin     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
        L_0x0157:
            r1.getMax(r14)     // Catch:{ all -> 0x028b }
            goto L_0x0287
        L_0x015c:
            o.onValidateSchema$toIntRange r0 = new o.onValidateSchema$toIntRange     // Catch:{ all -> 0x028b }
            r1.setMax = r4     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r4 = (o.onValidateSchema) r4     // Catch:{ all -> 0x028b }
            r1.getMax(r7)     // Catch:{ all -> 0x028b }
            int r7 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r7 == 0) goto L_0x0173
            r7 = 1
            goto L_0x0174
        L_0x0173:
            r7 = 0
        L_0x0174:
            r0.<init>(r4, r7)     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x0157
        L_0x017a:
            r0 = 43
            goto L_0x0288
        L_0x017e:
            r1.getMax(r8)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x028b }
            throw r0     // Catch:{ all -> 0x028b }
        L_0x0186:
            r1.getMax(r13)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 == 0) goto L_0x0194
            if (r0 == r5) goto L_0x0190
            goto L_0x0194
        L_0x0190:
            r0 = 27
            goto L_0x0288
        L_0x0194:
            r0 = 16
            goto L_0x0288
        L_0x0198:
            r0 = 10
            goto L_0x0288
        L_0x019c:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.setGlobalUserData r0 = (o.setGlobalUserData) r0     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x0157
        L_0x01ab:
            r1.setMax = r4     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x028b }
            r1.getMax(r7)     // Catch:{ all -> 0x028b }
            int r4 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r4 == 0) goto L_0x01c0
            r4 = 1
            goto L_0x01c1
        L_0x01c0:
            r4 = 0
        L_0x01c1:
            o.DebugMonitor$setMin r0 = o.DebugMonitor.setMin.forLogin(r0, r4)     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x0157
        L_0x01c8:
            r1.setMax = r9     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x028b }
            o.setGlobalUserData r4 = (o.setGlobalUserData) r4     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x028b }
            r0.execute(r4, r7)     // Catch:{ all -> 0x028b }
            goto L_0x0287
        L_0x01e5:
            r0 = 25
            goto L_0x0288
        L_0x01e9:
            return
        L_0x01ea:
            java.lang.String r0 = "inputPin"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x0157
        L_0x01f0:
            r1.setMax = r4     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r4 = r1.isInside     // Catch:{ all -> 0x028b }
            java.lang.String r4 = (java.lang.String) r4     // Catch:{ all -> 0x028b }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r4)     // Catch:{ all -> 0x028b }
            goto L_0x0287
        L_0x0206:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.isMainThread$getMin r0 = r0.getMax     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x0157
        L_0x0218:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.isMainThread$getMin r0 = (o.isMainThread.getMin) r0     // Catch:{ all -> 0x028b }
            r0.showProgress()     // Catch:{ all -> 0x028b }
            goto L_0x0287
        L_0x0229:
            r0 = 3
            goto L_0x0288
        L_0x022c:
            r1.getMax(r13)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 == r7) goto L_0x0239
            if (r0 == r11) goto L_0x0236
            goto L_0x0239
        L_0x0236:
            r0 = 33
            goto L_0x0288
        L_0x0239:
            r0 = 66
            goto L_0x0288
        L_0x023c:
            int r0 = invokeSuspend     // Catch:{ all -> 0x028b }
            r1.setMax = r0     // Catch:{ all -> 0x028b }
        L_0x0240:
            r1.getMax(r15)     // Catch:{ all -> 0x028b }
            goto L_0x0287
        L_0x0244:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r7)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            invoke = r0     // Catch:{ all -> 0x028b }
            goto L_0x0287
        L_0x0251:
            r1.getMax(r12)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 != 0) goto L_0x0287
            r0 = 65
            goto L_0x0288
        L_0x025b:
            r0 = 14
            goto L_0x0288
        L_0x025e:
            r0 = 12
            goto L_0x0288
        L_0x0261:
            int r0 = invoke     // Catch:{ all -> 0x028b }
            r1.setMax = r0     // Catch:{ all -> 0x028b }
            goto L_0x0240
        L_0x0266:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            r1.getMax(r7)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            invokeSuspend = r0     // Catch:{ all -> 0x028b }
            goto L_0x0287
        L_0x0273:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 != 0) goto L_0x0287
            r0 = 100
            goto L_0x0288
        L_0x027f:
            r0 = 73
            goto L_0x0288
        L_0x0282:
            r0 = 1
            goto L_0x0288
        L_0x0284:
            r0 = 75
            goto L_0x0288
        L_0x0287:
            r0 = r10
        L_0x0288:
            r7 = 0
            goto L_0x0127
        L_0x028b:
            r0 = move-exception
            byte[] r4 = getMin
            byte r7 = r4[r8]
            byte r7 = (byte) r7
            r15 = 4116(0x1014, float:5.768E-42)
            byte r4 = r4[r15]
            short r4 = (short) r4
            r5 = 4837(0x12e5, float:6.778E-42)
            short r5 = (short) r5
            java.lang.String r4 = setMax(r7, r4, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            r7 = 49
            r18 = 101(0x65, float:1.42E-43)
            r9 = 24
            if (r4 == 0) goto L_0x02bb
            if (r10 < r14) goto L_0x02bb
            if (r10 > r13) goto L_0x02bb
        L_0x02b1:
            r4 = 73
        L_0x02b3:
            r5 = 75
            r13 = 15
        L_0x02b7:
            r19 = 24
            goto L_0x0423
        L_0x02bb:
            r4 = 21
            if (r10 < r4) goto L_0x02cb
            if (r10 > r9) goto L_0x02cb
            r4 = 73
            r5 = 75
            r13 = 15
            r19 = 9
            goto L_0x0423
        L_0x02cb:
            r4 = 39
            if (r10 < r4) goto L_0x02dd
            if (r10 > r6) goto L_0x02dd
            r4 = 11
            r4 = 73
            r5 = 75
            r13 = 15
            r19 = 11
            goto L_0x0423
        L_0x02dd:
            byte[] r4 = getMin
            byte r13 = r4[r8]
            byte r13 = (byte) r13
            r14 = 4868(0x1304, float:6.822E-42)
            byte r9 = r4[r14]
            short r9 = (short) r9
            r20 = 15
            byte r4 = r4[r20]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r13, r9, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0301
            if (r10 < r12) goto L_0x0301
            r4 = 35
            if (r10 > r4) goto L_0x0301
            goto L_0x02b1
        L_0x0301:
            byte[] r4 = getMin
            byte r9 = r4[r8]
            byte r9 = (byte) r9
            r12 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r12]
            short r4 = (short) r4
            r12 = 10605(0x296d, float:1.4861E-41)
            short r12 = (short) r12
            java.lang.String r4 = setMax(r9, r4, r12)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x032c
            r4 = 35
            if (r10 < r4) goto L_0x032c
            if (r10 > r6) goto L_0x032c
            r4 = 73
        L_0x0324:
            r5 = 75
            r13 = 15
        L_0x0328:
            r19 = 101(0x65, float:1.42E-43)
            goto L_0x0423
        L_0x032c:
            byte[] r4 = getMin
            byte r9 = r4[r8]
            byte r9 = (byte) r9
            byte r4 = r4[r14]
            short r4 = (short) r4
            r12 = 10554(0x293a, float:1.479E-41)
            short r12 = (short) r12
            java.lang.String r4 = setMax(r9, r4, r12)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x034d
            r4 = 37
            if (r10 < r4) goto L_0x034d
            if (r10 > r6) goto L_0x034d
            goto L_0x02b1
        L_0x034d:
            byte[] r4 = getMin
            byte r9 = r4[r8]
            byte r9 = (byte) r9
            byte r4 = r4[r7]
            short r4 = (short) r4
            r12 = 9600(0x2580, float:1.3452E-41)
            short r12 = (short) r12
            java.lang.String r4 = setMax(r9, r4, r12)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0370
            r4 = 67
            if (r10 < r4) goto L_0x0370
            r4 = 68
            if (r10 > r4) goto L_0x0370
            goto L_0x02b1
        L_0x0370:
            byte[] r4 = getMin
            byte r9 = r4[r8]
            byte r9 = (byte) r9
            byte r4 = r4[r15]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r9, r4, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0390
            r4 = 68
            if (r10 < r4) goto L_0x0390
            r4 = 69
            if (r10 > r4) goto L_0x0390
            goto L_0x02b1
        L_0x0390:
            byte[] r4 = getMin
            byte r9 = r4[r8]
            byte r9 = (byte) r9
            byte r12 = r4[r14]
            short r12 = (short) r12
            r13 = 15
            byte r4 = r4[r13]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r9, r12, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x03b5
            r4 = 70
            if (r10 < r4) goto L_0x03b5
            r4 = 73
            if (r10 > r4) goto L_0x03b5
            goto L_0x02b3
        L_0x03b5:
            byte[] r4 = getMin
            byte r9 = r4[r8]
            byte r9 = (byte) r9
            byte r4 = r4[r15]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r9, r4, r5)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x03d5
            r4 = 71
            if (r10 < r4) goto L_0x03d5
            r4 = 73
            if (r10 > r4) goto L_0x03d7
            goto L_0x0324
        L_0x03d5:
            r4 = 73
        L_0x03d7:
            byte[] r5 = getMin
            byte r9 = r5[r8]
            byte r9 = (byte) r9
            byte r12 = r5[r14]
            short r12 = (short) r12
            r13 = 15
            byte r5 = r5[r13]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r9, r12, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x03fc
            r5 = 75
            if (r10 < r5) goto L_0x03fe
            r9 = 76
            if (r10 > r9) goto L_0x03fe
            goto L_0x02b7
        L_0x03fc:
            r5 = 75
        L_0x03fe:
            byte[] r9 = getMin
            byte r12 = r9[r8]
            byte r12 = (byte) r12
            r14 = 13
            byte r9 = r9[r14]
            short r9 = (short) r9
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r9 = setMax(r12, r9, r14)
            java.lang.Class r9 = java.lang.Class.forName(r9)
            boolean r9 = r9.isInstance(r0)
            if (r9 == 0) goto L_0x042f
            r9 = 96
            if (r10 < r9) goto L_0x042f
            if (r10 > r11) goto L_0x042f
            goto L_0x0328
        L_0x0423:
            r1.IsOverlapping = r0
            r1.getMax(r7)
            r0 = r19
            r5 = 1
            r7 = 0
            r9 = 3
            goto L_0x0127
        L_0x042f:
            throw r0
        L_0x0430:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0438
            throw r1
        L_0x0438:
            goto L_0x043a
        L_0x0439:
            throw r0
        L_0x043a:
            goto L_0x0439
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMax(java.lang.String, boolean):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x02f3, code lost:
        if (r14 <= 19) goto L_0x02a1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x0319, code lost:
        if (r14 <= 40) goto L_0x0279;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x033e, code lost:
        if (r14 <= 46) goto L_0x02a5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x014e, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x01a7, code lost:
        r1.getMax(r10);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void getMin() {
        /*
            r21 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r21
            r1.<init>(r2)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = 256(0x100, float:3.59E-43)
            short r4 = (short) r4
            r5 = 1181(0x49d, float:1.655E-42)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r6 = (short) r4
            r7 = r6 | 4577(0x11e1, float:6.414E-42)
            short r7 = (short) r7
            java.lang.String r4 = setMax(r4, r6, r7)
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ all -> 0x03b7 }
            r8 = 0
            r7[r8] = r4     // Catch:{ all -> 0x03b7 }
            byte[] r4 = getMin     // Catch:{ all -> 0x03b7 }
            r9 = 8
            byte r4 = r4[r9]     // Catch:{ all -> 0x03b7 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x03b7 }
            byte[] r10 = getMin     // Catch:{ all -> 0x03b7 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x03b7 }
            short r10 = (short) r10     // Catch:{ all -> 0x03b7 }
            r11 = 9395(0x24b3, float:1.3165E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x03b7 }
            java.lang.String r4 = setMax(r4, r10, r11)     // Catch:{ all -> 0x03b7 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x03b7 }
            byte[] r10 = getMin     // Catch:{ all -> 0x03b7 }
            r12 = 2662(0xa66, float:3.73E-42)
            byte r10 = r10[r12]     // Catch:{ all -> 0x03b7 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x03b7 }
            byte[] r12 = getMin     // Catch:{ all -> 0x03b7 }
            r13 = 30
            byte r12 = r12[r13]     // Catch:{ all -> 0x03b7 }
            short r12 = (short) r12     // Catch:{ all -> 0x03b7 }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x03b7 }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x03b7 }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x03b7 }
            byte[] r13 = getMin     // Catch:{ all -> 0x03b7 }
            byte r13 = r13[r9]     // Catch:{ all -> 0x03b7 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x03b7 }
            byte[] r14 = getMin     // Catch:{ all -> 0x03b7 }
            byte r14 = r14[r6]     // Catch:{ all -> 0x03b7 }
            short r14 = (short) r14     // Catch:{ all -> 0x03b7 }
            java.lang.String r13 = setMax(r13, r14, r11)     // Catch:{ all -> 0x03b7 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x03b7 }
            r12[r8] = r13     // Catch:{ all -> 0x03b7 }
            java.lang.reflect.Method r4 = r4.getMethod(r10, r12)     // Catch:{ all -> 0x03b7 }
            java.lang.Object r0 = r4.invoke(r0, r7)     // Catch:{ all -> 0x03b7 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x03b7 }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r7 = 0
        L_0x007d:
            int r10 = r0.length
            r12 = 74
            if (r7 >= r10) goto L_0x0121
            r10 = r0[r7]
            java.lang.Object[] r14 = new java.lang.Object[r6]     // Catch:{ all -> 0x0118 }
            r14[r8] = r10     // Catch:{ all -> 0x0118 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0118 }
            byte r10 = r10[r9]     // Catch:{ all -> 0x0118 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0118 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0118 }
            r16 = 4119(0x1017, float:5.772E-42)
            byte r15 = r15[r16]     // Catch:{ all -> 0x0118 }
            int r15 = -r15
            short r15 = (short) r15     // Catch:{ all -> 0x0118 }
            r3 = 1123(0x463, float:1.574E-42)
            short r3 = (short) r3     // Catch:{ all -> 0x0118 }
            java.lang.String r10 = setMax(r10, r15, r3)     // Catch:{ all -> 0x0118 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0118 }
            byte r12 = (byte) r12     // Catch:{ all -> 0x0118 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0118 }
            r17 = 32
            byte r15 = r15[r17]     // Catch:{ all -> 0x0118 }
            short r15 = (short) r15     // Catch:{ all -> 0x0118 }
            r5 = 10257(0x2811, float:1.4373E-41)
            short r5 = (short) r5     // Catch:{ all -> 0x0118 }
            java.lang.String r5 = setMax(r12, r15, r5)     // Catch:{ all -> 0x0118 }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x0118 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0118 }
            byte r15 = r15[r9]     // Catch:{ all -> 0x0118 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0118 }
            byte[] r18 = getMin     // Catch:{ all -> 0x0118 }
            byte r13 = r18[r6]     // Catch:{ all -> 0x0118 }
            short r13 = (short) r13     // Catch:{ all -> 0x0118 }
            java.lang.String r13 = setMax(r15, r13, r11)     // Catch:{ all -> 0x0118 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0118 }
            r12[r8] = r13     // Catch:{ all -> 0x0118 }
            java.lang.reflect.Method r5 = r10.getMethod(r5, r12)     // Catch:{ all -> 0x0118 }
            r10 = 0
            java.lang.Object r5 = r5.invoke(r10, r14)     // Catch:{ all -> 0x0118 }
            byte[] r12 = getMin     // Catch:{ all -> 0x010f }
            byte r12 = r12[r9]     // Catch:{ all -> 0x010f }
            byte r12 = (byte) r12     // Catch:{ all -> 0x010f }
            byte[] r13 = getMin     // Catch:{ all -> 0x010f }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x010f }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x010f }
            java.lang.String r3 = setMax(r12, r13, r3)     // Catch:{ all -> 0x010f }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x010f }
            byte[] r12 = getMin     // Catch:{ all -> 0x010f }
            byte r12 = r12[r9]     // Catch:{ all -> 0x010f }
            int r12 = r12 - r6
            byte r12 = (byte) r12     // Catch:{ all -> 0x010f }
            byte[] r13 = getMin     // Catch:{ all -> 0x010f }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010f }
            short r13 = (short) r13     // Catch:{ all -> 0x010f }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010f }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010f }
            java.lang.reflect.Method r3 = r3.getMethod(r12, r10)     // Catch:{ all -> 0x010f }
            java.lang.Object r3 = r3.invoke(r5, r10)     // Catch:{ all -> 0x010f }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x010f }
            int r3 = r3.intValue()     // Catch:{ all -> 0x010f }
            r4[r7] = r3
            int r7 = r7 + 1
            r3 = 46
            r5 = 15
            goto L_0x007d
        L_0x010f:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0117
            throw r1
        L_0x0117:
            throw r0
        L_0x0118:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0120
            throw r1
        L_0x0120:
            throw r0
        L_0x0121:
            r5 = 9
            r7 = 49
            r10 = 18
            r11 = 2
        L_0x0128:
            r13 = 4
        L_0x0129:
            int r14 = r8 + 1
            r15 = 7
            r0 = r4[r8]     // Catch:{ all -> 0x0226 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0226 }
            r8 = 3
            switch(r0) {
                case -24: goto L_0x021e;
                case -23: goto L_0x021b;
                case -22: goto L_0x020d;
                case -21: goto L_0x0200;
                case -20: goto L_0x01fb;
                case -19: goto L_0x01f7;
                case -18: goto L_0x01e2;
                case -17: goto L_0x01dc;
                case -16: goto L_0x01ca;
                case -15: goto L_0x01c7;
                case -14: goto L_0x01b9;
                case -13: goto L_0x01ac;
                case -12: goto L_0x01a3;
                case -11: goto L_0x01a0;
                case -10: goto L_0x0198;
                case -9: goto L_0x0197;
                case -8: goto L_0x017f;
                case -7: goto L_0x017c;
                case -6: goto L_0x0158;
                case -5: goto L_0x0153;
                case -4: goto L_0x0140;
                case -3: goto L_0x013d;
                case -2: goto L_0x013b;
                case -1: goto L_0x0138;
                default: goto L_0x0136;
            }     // Catch:{ all -> 0x0226 }
        L_0x0136:
            goto L_0x0221
        L_0x0138:
            r8 = 14
            goto L_0x0129
        L_0x013b:
            r8 = 4
            goto L_0x0129
        L_0x013d:
            r8 = 9
            goto L_0x0129
        L_0x0140:
            r1.setMax = r6     // Catch:{ all -> 0x0226 }
            r1.getMax(r11)     // Catch:{ all -> 0x0226 }
            r1.getMax(r8)     // Catch:{ all -> 0x0226 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0226 }
            kotlin.jvm.functions.Function1 r0 = (kotlin.jvm.functions.Function1) r0     // Catch:{ all -> 0x0226 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0226 }
        L_0x014e:
            r1.getMax(r13)     // Catch:{ all -> 0x0226 }
            goto L_0x0221
        L_0x0153:
            o.onValidateSchema$setMax r0 = o.onValidateSchema.setMax.INSTANCE     // Catch:{ all -> 0x0226 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0226 }
            goto L_0x014e
        L_0x0158:
            r1.setMax = r13     // Catch:{ all -> 0x0226 }
            r1.getMax(r11)     // Catch:{ all -> 0x0226 }
            r1.getMax(r8)     // Catch:{ all -> 0x0226 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0226 }
            o.APWebChromeClient r0 = (o.APWebChromeClient) r0     // Catch:{ all -> 0x0226 }
            r1.getMax(r8)     // Catch:{ all -> 0x0226 }
            java.lang.Object r12 = r1.isInside     // Catch:{ all -> 0x0226 }
            r1.getMax(r8)     // Catch:{ all -> 0x0226 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x0226 }
            kotlin.jvm.functions.Function1 r3 = (kotlin.jvm.functions.Function1) r3     // Catch:{ all -> 0x0226 }
            r1.getMax(r8)     // Catch:{ all -> 0x0226 }
            java.lang.Object r8 = r1.isInside     // Catch:{ all -> 0x0226 }
            kotlin.jvm.functions.Function1 r8 = (kotlin.jvm.functions.Function1) r8     // Catch:{ all -> 0x0226 }
            r0.execute(r12, r3, r8)     // Catch:{ all -> 0x0226 }
            goto L_0x0221
        L_0x017c:
            r8 = 49
            goto L_0x0129
        L_0x017f:
            r1.getMax(r5)     // Catch:{ all -> 0x0226 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0226 }
            r3 = 23
            if (r0 == r3) goto L_0x0193
            r3 = 94
            if (r0 == r3) goto L_0x018d
            goto L_0x0193
        L_0x018d:
            r0 = 10
            r8 = 10
            goto L_0x0222
        L_0x0193:
            r8 = 46
            goto L_0x0222
        L_0x0197:
            return
        L_0x0198:
            r1.getMax(r9)     // Catch:{ all -> 0x0226 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0226 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0226 }
            throw r0     // Catch:{ all -> 0x0226 }
        L_0x01a0:
            r8 = 40
            goto L_0x0129
        L_0x01a3:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0226 }
            r1.setMax = r0     // Catch:{ all -> 0x0226 }
        L_0x01a7:
            r1.getMax(r10)     // Catch:{ all -> 0x0226 }
            goto L_0x0221
        L_0x01ac:
            r1.setMax = r6     // Catch:{ all -> 0x0226 }
            r1.getMax(r11)     // Catch:{ all -> 0x0226 }
            r1.getMax(r15)     // Catch:{ all -> 0x0226 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0226 }
            invoke = r0     // Catch:{ all -> 0x0226 }
            goto L_0x0221
        L_0x01b9:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x0226 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0226 }
            if (r0 != 0) goto L_0x0221
            r0 = 39
            r8 = 39
            goto L_0x0222
        L_0x01c7:
            r8 = 1
            goto L_0x0129
        L_0x01ca:
            r1.setMax = r6     // Catch:{ all -> 0x0226 }
            r1.getMax(r11)     // Catch:{ all -> 0x0226 }
            r1.getMax(r8)     // Catch:{ all -> 0x0226 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0226 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0226 }
            o.setDomStorageEnabled r0 = r0.hashCode     // Catch:{ all -> 0x0226 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0226 }
            goto L_0x014e
        L_0x01dc:
            kotlin.Unit r0 = kotlin.Unit.INSTANCE     // Catch:{ all -> 0x0226 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0226 }
            goto L_0x014e
        L_0x01e2:
            o.onValidateSchema$setMin r0 = new o.onValidateSchema$setMin     // Catch:{ all -> 0x0226 }
            r1.setMax = r6     // Catch:{ all -> 0x0226 }
            r1.getMax(r11)     // Catch:{ all -> 0x0226 }
            r1.getMax(r8)     // Catch:{ all -> 0x0226 }
            java.lang.Object r3 = r1.isInside     // Catch:{ all -> 0x0226 }
            o.onValidateSchema r3 = (o.onValidateSchema) r3     // Catch:{ all -> 0x0226 }
            r0.<init>(r3)     // Catch:{ all -> 0x0226 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0226 }
            goto L_0x014e
        L_0x01f7:
            r8 = 18
            goto L_0x0129
        L_0x01fb:
            int r0 = invoke     // Catch:{ all -> 0x0226 }
            r1.setMax = r0     // Catch:{ all -> 0x0226 }
            goto L_0x01a7
        L_0x0200:
            r1.setMax = r6     // Catch:{ all -> 0x0226 }
            r1.getMax(r11)     // Catch:{ all -> 0x0226 }
            r1.getMax(r15)     // Catch:{ all -> 0x0226 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0226 }
            invokeSuspend = r0     // Catch:{ all -> 0x0226 }
            goto L_0x0221
        L_0x020d:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x0226 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0226 }
            if (r0 != 0) goto L_0x0221
            r0 = 72
            r8 = 72
            goto L_0x0222
        L_0x021b:
            r8 = 2
            goto L_0x0129
        L_0x021e:
            r8 = 74
            goto L_0x0222
        L_0x0221:
            r8 = r14
        L_0x0222:
            r12 = 74
            goto L_0x0129
        L_0x0226:
            r0 = move-exception
            byte[] r3 = getMin
            byte r8 = r3[r9]
            byte r8 = (byte) r8
            r12 = 4869(0x1305, float:6.823E-42)
            byte r3 = r3[r12]
            short r3 = (short) r3
            r6 = 1139(0x473, float:1.596E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r8, r3, r6)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            r8 = 5
            r11 = 13
            r19 = 48
            if (r3 == 0) goto L_0x0255
            if (r14 < r13) goto L_0x0255
            if (r14 > r8) goto L_0x0255
            r6 = 40
            r8 = 46
            r10 = 73
            r17 = 15
            goto L_0x03a7
        L_0x0255:
            byte[] r3 = getMin
            byte r13 = r3[r9]
            byte r13 = (byte) r13
            r20 = 4868(0x1304, float:6.822E-42)
            byte r10 = r3[r20]
            short r10 = (short) r10
            r17 = 15
            byte r3 = r3[r17]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r13, r10, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0281
            if (r14 < r8) goto L_0x0281
            r3 = 6
            if (r14 > r3) goto L_0x0281
        L_0x0277:
            r6 = 40
        L_0x0279:
            r8 = 46
            r10 = 73
        L_0x027d:
            r19 = 13
            goto L_0x03a7
        L_0x0281:
            byte[] r3 = getMin
            byte r8 = r3[r9]
            byte r8 = (byte) r8
            r10 = 7392(0x1ce0, float:1.0358E-41)
            byte r3 = r3[r10]
            short r3 = (short) r3
            r10 = 10605(0x296d, float:1.4861E-41)
            short r10 = (short) r10
            java.lang.String r3 = setMax(r8, r3, r10)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x02a9
            r3 = 6
            if (r14 < r3) goto L_0x02a9
            if (r14 > r15) goto L_0x02a9
        L_0x02a1:
            r6 = 40
            r8 = 46
        L_0x02a5:
            r10 = 73
            goto L_0x03a7
        L_0x02a9:
            byte[] r3 = getMin
            byte r8 = r3[r9]
            byte r8 = (byte) r8
            byte r3 = r3[r12]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r8, r3, r6)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x02c4
            if (r14 < r15) goto L_0x02c4
            if (r14 > r5) goto L_0x02c4
            goto L_0x0277
        L_0x02c4:
            r3 = 11
            if (r14 < r3) goto L_0x02d4
            if (r14 > r11) goto L_0x02d4
            r6 = 40
            r8 = 46
            r10 = 73
            r19 = 73
            goto L_0x03a7
        L_0x02d4:
            byte[] r3 = getMin
            byte r6 = r3[r9]
            byte r6 = (byte) r6
            byte r3 = r3[r7]
            short r3 = (short) r3
            r8 = 9600(0x2580, float:1.3452E-41)
            short r8 = (short) r8
            java.lang.String r3 = setMax(r6, r3, r8)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x02f6
            r3 = 18
            if (r14 < r3) goto L_0x02f8
            r6 = 19
            if (r14 > r6) goto L_0x02f8
            goto L_0x02a1
        L_0x02f6:
            r3 = 18
        L_0x02f8:
            byte[] r6 = getMin
            byte r8 = r6[r9]
            byte r8 = (byte) r8
            r10 = 4116(0x1014, float:5.768E-42)
            byte r6 = r6[r10]
            short r6 = (short) r6
            r10 = 4837(0x12e5, float:6.778E-42)
            short r10 = (short) r10
            java.lang.String r6 = setMax(r8, r6, r10)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x031d
            r6 = 35
            if (r14 < r6) goto L_0x031d
            r6 = 40
            if (r14 > r6) goto L_0x031f
            goto L_0x0279
        L_0x031d:
            r6 = 40
        L_0x031f:
            byte[] r8 = getMin
            byte r10 = r8[r9]
            byte r10 = (byte) r10
            byte r8 = r8[r20]
            short r8 = (short) r8
            r12 = 10554(0x293a, float:1.479E-41)
            short r12 = (short) r12
            java.lang.String r8 = setMax(r10, r8, r12)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x0342
            r8 = 41
            if (r14 < r8) goto L_0x0342
            r8 = 46
            if (r14 > r8) goto L_0x0344
        L_0x0340:
            goto L_0x02a5
        L_0x0342:
            r8 = 46
        L_0x0344:
            byte[] r10 = getMin
            byte r12 = r10[r9]
            byte r12 = (byte) r12
            r13 = 21
            byte r10 = r10[r13]
            short r10 = (short) r10
            r15 = 10638(0x298e, float:1.4907E-41)
            short r15 = (short) r15
            java.lang.String r10 = setMax(r12, r10, r15)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r0)
            if (r10 == 0) goto L_0x0368
            r10 = 42
            if (r14 < r10) goto L_0x0368
            r10 = 43
            if (r14 > r10) goto L_0x0368
            goto L_0x0340
        L_0x0368:
            byte[] r10 = getMin
            byte r12 = r10[r9]
            byte r12 = (byte) r12
            byte r10 = r10[r13]
            short r10 = (short) r10
            java.lang.String r10 = setMax(r12, r10, r15)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r0)
            if (r10 == 0) goto L_0x0385
            if (r14 < r7) goto L_0x0385
            r10 = 73
            if (r14 > r10) goto L_0x0387
            goto L_0x03a7
        L_0x0385:
            r10 = 73
        L_0x0387:
            byte[] r12 = getMin
            byte r3 = r12[r9]
            byte r3 = (byte) r3
            byte r12 = r12[r13]
            short r12 = (short) r12
            java.lang.String r3 = setMax(r3, r12, r15)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x03b6
            r3 = 68
            if (r14 < r3) goto L_0x03b6
            r3 = 69
            if (r14 > r3) goto L_0x03b6
            goto L_0x027d
        L_0x03a7:
            r1.IsOverlapping = r0
            r1.getMax(r7)
            r8 = r19
            r6 = 1
            r10 = 18
            r11 = 2
            r12 = 74
            goto L_0x0128
        L_0x03b6:
            throw r0
        L_0x03b7:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x03bf
            throw r1
        L_0x03bf:
            goto L_0x03c1
        L_0x03c0:
            throw r0
        L_0x03c1:
            goto L_0x03c0
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMin():void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x02fa, code lost:
        if (r12 <= 65) goto L_0x02b3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x014b, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:59:0x01cc, code lost:
        r0 = r12;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:0x01cd, code lost:
        r8 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:64:0x01d9, code lost:
        r8 = r12;
     */
    /* JADX WARNING: Removed duplicated region for block: B:108:0x02f8  */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x02fd  */
    /* JADX WARNING: Removed duplicated region for block: B:115:0x0307  */
    /* JADX WARNING: Removed duplicated region for block: B:117:0x0313  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void getMin(@org.jetbrains.annotations.NotNull java.lang.String r21, @org.jetbrains.annotations.NotNull android.os.Bundle r22) {
        /*
            r20 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r20
            r0 = r21
            r3 = r22
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0, (java.lang.Object) r3)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r4 = 230(0xe6, float:3.22E-43)
            short r4 = (short) r4
            int r5 = length
            r5 = r5 | 805(0x325, float:1.128E-42)
            short r5 = (short) r5
            java.lang.String r0 = setMax(r0, r4, r5)
            byte[] r4 = getMin
            r5 = 15
            byte r4 = r4[r5]
            byte r4 = (byte) r4
            short r6 = (short) r4
            r7 = r6 | 4577(0x11e1, float:6.414E-42)
            short r7 = (short) r7
            java.lang.String r4 = setMax(r4, r6, r7)
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ all -> 0x0314 }
            r8 = 0
            r7[r8] = r4     // Catch:{ all -> 0x0314 }
            byte[] r4 = getMin     // Catch:{ all -> 0x0314 }
            r9 = 8
            byte r4 = r4[r9]     // Catch:{ all -> 0x0314 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x0314 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0314 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x0314 }
            short r10 = (short) r10     // Catch:{ all -> 0x0314 }
            r11 = 9395(0x24b3, float:1.3165E-41)
            short r11 = (short) r11     // Catch:{ all -> 0x0314 }
            java.lang.String r4 = setMax(r4, r10, r11)     // Catch:{ all -> 0x0314 }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x0314 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0314 }
            r12 = 2662(0xa66, float:3.73E-42)
            byte r10 = r10[r12]     // Catch:{ all -> 0x0314 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0314 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0314 }
            r13 = 30
            byte r12 = r12[r13]     // Catch:{ all -> 0x0314 }
            short r12 = (short) r12     // Catch:{ all -> 0x0314 }
            r13 = 1177(0x499, float:1.65E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x0314 }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x0314 }
            java.lang.Class[] r12 = new java.lang.Class[r6]     // Catch:{ all -> 0x0314 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0314 }
            byte r13 = r13[r9]     // Catch:{ all -> 0x0314 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0314 }
            byte[] r14 = getMin     // Catch:{ all -> 0x0314 }
            byte r14 = r14[r6]     // Catch:{ all -> 0x0314 }
            short r14 = (short) r14     // Catch:{ all -> 0x0314 }
            java.lang.String r13 = setMax(r13, r14, r11)     // Catch:{ all -> 0x0314 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0314 }
            r12[r8] = r13     // Catch:{ all -> 0x0314 }
            java.lang.reflect.Method r4 = r4.getMethod(r10, r12)     // Catch:{ all -> 0x0314 }
            java.lang.Object r0 = r4.invoke(r0, r7)     // Catch:{ all -> 0x0314 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0314 }
            int r4 = r0.length
            int[] r4 = new int[r4]
            r7 = 0
        L_0x0083:
            int r10 = r0.length
            if (r7 >= r10) goto L_0x0127
            r10 = r0[r7]
            java.lang.Object[] r12 = new java.lang.Object[r6]     // Catch:{ all -> 0x011e }
            r12[r8] = r10     // Catch:{ all -> 0x011e }
            byte[] r10 = getMin     // Catch:{ all -> 0x011e }
            byte r10 = r10[r9]     // Catch:{ all -> 0x011e }
            byte r10 = (byte) r10     // Catch:{ all -> 0x011e }
            byte[] r13 = getMin     // Catch:{ all -> 0x011e }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x011e }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x011e }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x011e }
            java.lang.String r10 = setMax(r10, r13, r15)     // Catch:{ all -> 0x011e }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x011e }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x011e }
            byte[] r16 = getMin     // Catch:{ all -> 0x011e }
            r17 = 32
            byte r5 = r16[r17]     // Catch:{ all -> 0x011e }
            short r5 = (short) r5     // Catch:{ all -> 0x011e }
            r3 = 10257(0x2811, float:1.4373E-41)
            short r3 = (short) r3     // Catch:{ all -> 0x011e }
            java.lang.String r3 = setMax(r13, r5, r3)     // Catch:{ all -> 0x011e }
            java.lang.Class[] r5 = new java.lang.Class[r6]     // Catch:{ all -> 0x011e }
            byte[] r13 = getMin     // Catch:{ all -> 0x011e }
            byte r13 = r13[r9]     // Catch:{ all -> 0x011e }
            byte r13 = (byte) r13     // Catch:{ all -> 0x011e }
            byte[] r16 = getMin     // Catch:{ all -> 0x011e }
            byte r14 = r16[r6]     // Catch:{ all -> 0x011e }
            short r14 = (short) r14     // Catch:{ all -> 0x011e }
            java.lang.String r13 = setMax(r13, r14, r11)     // Catch:{ all -> 0x011e }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x011e }
            r5[r8] = r13     // Catch:{ all -> 0x011e }
            java.lang.reflect.Method r3 = r10.getMethod(r3, r5)     // Catch:{ all -> 0x011e }
            r5 = 0
            java.lang.Object r3 = r3.invoke(r5, r12)     // Catch:{ all -> 0x011e }
            byte[] r10 = getMin     // Catch:{ all -> 0x0115 }
            byte r10 = r10[r9]     // Catch:{ all -> 0x0115 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0115 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0115 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0115 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0115 }
            java.lang.String r10 = setMax(r10, r12, r15)     // Catch:{ all -> 0x0115 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0115 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0115 }
            byte r12 = r12[r9]     // Catch:{ all -> 0x0115 }
            int r12 = r12 - r6
            byte r12 = (byte) r12     // Catch:{ all -> 0x0115 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0115 }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x0115 }
            short r13 = (short) r13     // Catch:{ all -> 0x0115 }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0115 }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x0115 }
            java.lang.reflect.Method r10 = r10.getMethod(r12, r5)     // Catch:{ all -> 0x0115 }
            java.lang.Object r3 = r10.invoke(r3, r5)     // Catch:{ all -> 0x0115 }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ all -> 0x0115 }
            int r3 = r3.intValue()     // Catch:{ all -> 0x0115 }
            r4[r7] = r3
            int r7 = r7 + 1
            r3 = 46
            r5 = 15
            goto L_0x0083
        L_0x0115:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011d
            throw r1
        L_0x011d:
            throw r0
        L_0x011e:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0126
            throw r1
        L_0x0126:
            throw r0
        L_0x0127:
            r3 = 20
            r5 = 50
            r7 = 18
            r10 = 9
        L_0x012f:
            int r12 = r8 + 1
            r13 = 7
            r14 = 3
            r15 = 2
            r0 = r4[r8]     // Catch:{ all -> 0x01dc }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01dc }
            r8 = 4
            r11 = 47
            switch(r0) {
                case -18: goto L_0x01d6;
                case -17: goto L_0x01d2;
                case -16: goto L_0x01c0;
                case -15: goto L_0x01bc;
                case -14: goto L_0x01b8;
                case -13: goto L_0x01ac;
                case -12: goto L_0x019d;
                case -11: goto L_0x0193;
                case -10: goto L_0x0192;
                case -9: goto L_0x018f;
                case -8: goto L_0x0185;
                case -7: goto L_0x0182;
                case -6: goto L_0x016c;
                case -5: goto L_0x0169;
                case -4: goto L_0x0164;
                case -3: goto L_0x014f;
                case -2: goto L_0x0147;
                case -1: goto L_0x0144;
                default: goto L_0x0140;
            }     // Catch:{ all -> 0x01dc }
        L_0x0140:
            r8 = 46
            goto L_0x01d9
        L_0x0144:
            r8 = 12
            goto L_0x012f
        L_0x0147:
            java.lang.String r0 = "inputPin"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01dc }
        L_0x014b:
            r1.getMax(r8)     // Catch:{ all -> 0x01dc }
            goto L_0x0140
        L_0x014f:
            r1.setMax = r15     // Catch:{ all -> 0x01dc }
            r1.getMax(r15)     // Catch:{ all -> 0x01dc }
            r1.getMax(r14)     // Catch:{ all -> 0x01dc }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01dc }
            r1.getMax(r14)     // Catch:{ all -> 0x01dc }
            java.lang.Object r8 = r1.isInside     // Catch:{ all -> 0x01dc }
            java.lang.String r8 = (java.lang.String) r8     // Catch:{ all -> 0x01dc }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r8)     // Catch:{ all -> 0x01dc }
            goto L_0x0140
        L_0x0164:
            java.lang.String r0 = "data"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01dc }
            goto L_0x014b
        L_0x0169:
            r8 = 20
            goto L_0x012f
        L_0x016c:
            r1.getMax(r10)     // Catch:{ all -> 0x01dc }
            int r0 = r1.setMin     // Catch:{ all -> 0x01dc }
            r8 = 33
            if (r0 == r8) goto L_0x017d
            r8 = 46
            if (r0 == r8) goto L_0x017a
            goto L_0x017f
        L_0x017a:
            r0 = 66
            goto L_0x01cd
        L_0x017d:
            r8 = 46
        L_0x017f:
            r0 = 16
            goto L_0x01cd
        L_0x0182:
            r8 = 8
            goto L_0x012f
        L_0x0185:
            r8 = 46
            r1.getMax(r9)     // Catch:{ all -> 0x01d0 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01d0 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01d0 }
            throw r0     // Catch:{ all -> 0x01d0 }
        L_0x018f:
            r8 = 50
            goto L_0x012f
        L_0x0192:
            return
        L_0x0193:
            r8 = 46
            int r0 = invoke     // Catch:{ all -> 0x01d0 }
            r1.setMax = r0     // Catch:{ all -> 0x01d0 }
            r1.getMax(r7)     // Catch:{ all -> 0x01d0 }
            goto L_0x01d9
        L_0x019d:
            r8 = 46
            r1.setMax = r6     // Catch:{ all -> 0x01d0 }
            r1.getMax(r15)     // Catch:{ all -> 0x01d0 }
            r1.getMax(r13)     // Catch:{ all -> 0x01d0 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d0 }
            invokeSuspend = r0     // Catch:{ all -> 0x01d0 }
            goto L_0x01d9
        L_0x01ac:
            r8 = 46
            r1.getMax(r11)     // Catch:{ all -> 0x01d0 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d0 }
            if (r0 != 0) goto L_0x01cc
            r0 = 48
            goto L_0x01cd
        L_0x01b8:
            r8 = 18
            goto L_0x012f
        L_0x01bc:
            r8 = 9
            goto L_0x012f
        L_0x01c0:
            r8 = 46
            r1.getMax(r11)     // Catch:{ all -> 0x01d0 }
            int r0 = r1.setMin     // Catch:{ all -> 0x01d0 }
            if (r0 != 0) goto L_0x01cc
            r0 = 64
            goto L_0x01cd
        L_0x01cc:
            r0 = r12
        L_0x01cd:
            r8 = r0
            goto L_0x012f
        L_0x01d0:
            r0 = move-exception
            goto L_0x01df
        L_0x01d2:
            r8 = 65
            goto L_0x012f
        L_0x01d6:
            r8 = 1
            goto L_0x012f
        L_0x01d9:
            r8 = r12
            goto L_0x012f
        L_0x01dc:
            r0 = move-exception
            r8 = 46
        L_0x01df:
            byte[] r11 = getMin
            byte r6 = r11[r9]
            byte r6 = (byte) r6
            r17 = 4116(0x1014, float:5.768E-42)
            byte r11 = r11[r17]
            short r11 = (short) r11
            r7 = 4837(0x12e5, float:6.778E-42)
            short r7 = (short) r7
            java.lang.String r6 = setMax(r6, r11, r7)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r11 = 49
            r18 = 11
            if (r6 == 0) goto L_0x020a
            if (r12 < r15) goto L_0x020a
            if (r12 > r9) goto L_0x020a
        L_0x0202:
            r6 = 65
            r8 = 11
        L_0x0206:
            r13 = 15
            goto L_0x0309
        L_0x020a:
            byte[] r6 = getMin
            byte r15 = r6[r9]
            byte r15 = (byte) r15
            byte r6 = r6[r17]
            short r6 = (short) r6
            java.lang.String r6 = setMax(r15, r6, r7)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0225
            if (r12 < r14) goto L_0x0225
            if (r12 > r9) goto L_0x0225
            goto L_0x0202
        L_0x0225:
            byte[] r6 = getMin
            byte r7 = r6[r9]
            byte r7 = (byte) r7
            r14 = 4868(0x1304, float:6.822E-42)
            byte r6 = r6[r14]
            short r6 = (short) r6
            r15 = 10554(0x293a, float:1.479E-41)
            short r15 = (short) r15
            java.lang.String r6 = setMax(r7, r6, r15)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r7 = 6
            if (r6 == 0) goto L_0x0247
            r6 = 5
            if (r12 < r6) goto L_0x0247
            if (r12 > r7) goto L_0x0247
            goto L_0x0202
        L_0x0247:
            byte[] r6 = getMin
            byte r15 = r6[r9]
            byte r15 = (byte) r15
            byte r8 = r6[r14]
            short r8 = (short) r8
            r19 = 15
            byte r6 = r6[r19]
            short r6 = (short) r6
            java.lang.String r6 = setMax(r15, r8, r6)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x026d
            if (r12 < r7) goto L_0x026d
            if (r12 > r13) goto L_0x026d
            r6 = 72
            r6 = 65
            r8 = 72
            goto L_0x0206
        L_0x026d:
            byte[] r6 = getMin
            byte r7 = r6[r9]
            byte r7 = (byte) r7
            r8 = 21
            byte r6 = r6[r8]
            short r6 = (short) r6
            r8 = 10638(0x298e, float:1.4907E-41)
            short r8 = (short) r8
            java.lang.String r6 = setMax(r7, r6, r8)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x028e
            if (r12 < r3) goto L_0x028e
            if (r12 > r11) goto L_0x028e
            goto L_0x0202
        L_0x028e:
            byte[] r6 = getMin
            byte r7 = r6[r9]
            byte r7 = (byte) r7
            byte r8 = r6[r14]
            short r8 = (short) r8
            r13 = 15
            byte r6 = r6[r13]
            short r6 = (short) r6
            java.lang.String r6 = setMax(r7, r8, r6)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x02b6
            r6 = 43
            if (r12 < r6) goto L_0x02b6
            r6 = 44
            if (r12 > r6) goto L_0x02b6
        L_0x02b1:
            r6 = 65
        L_0x02b3:
            r8 = 11
            goto L_0x0309
        L_0x02b6:
            byte[] r6 = getMin
            byte r7 = r6[r9]
            byte r7 = (byte) r7
            r8 = 1156(0x484, float:1.62E-42)
            byte r6 = r6[r8]
            int r6 = -r6
            short r6 = (short) r6
            r8 = 5857(0x16e1, float:8.207E-42)
            short r8 = (short) r8
            java.lang.String r6 = setMax(r7, r6, r8)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x02d9
            if (r12 < r5) goto L_0x02d9
            r6 = 51
            if (r12 > r6) goto L_0x02d9
            goto L_0x02b1
        L_0x02d9:
            byte[] r6 = getMin
            byte r7 = r6[r9]
            byte r7 = (byte) r7
            r8 = 7392(0x1ce0, float:1.0358E-41)
            byte r6 = r6[r8]
            short r6 = (short) r6
            r8 = 10605(0x296d, float:1.4861E-41)
            short r8 = (short) r8
            java.lang.String r6 = setMax(r7, r6, r8)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x02fd
            r6 = 59
            if (r12 < r6) goto L_0x02fd
            r6 = 65
            if (r12 > r6) goto L_0x02ff
            goto L_0x02b3
        L_0x02fd:
            r6 = 65
        L_0x02ff:
            r7 = 67
            if (r12 < r7) goto L_0x0313
            r7 = 72
            if (r12 > r7) goto L_0x0313
            r8 = 49
        L_0x0309:
            r1.IsOverlapping = r0
            r1.getMax(r11)
            r6 = 1
            r7 = 18
            goto L_0x012f
        L_0x0313:
            throw r0
        L_0x0314:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x031c
            throw r1
        L_0x031c:
            goto L_0x031e
        L_0x031d:
            throw r0
        L_0x031e:
            goto L_0x031d
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMin(java.lang.String, android.os.Bundle):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:119:0x0370, code lost:
        if (r12 <= 82) goto L_0x0320;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:126:0x0393, code lost:
        if (r12 <= 85) goto L_0x02fc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x0151, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x01d4, code lost:
        r1.getMax(r10);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void getMin(@org.jetbrains.annotations.NotNull java.lang.String r20, @org.jetbrains.annotations.NotNull java.lang.String r21, boolean r22) {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r0 = r20
            r3 = r21
            r4 = r22
            r1.<init>(r2, r0, r3, r4)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = r0 | 366(0x16e, float:5.13E-43)
            short r3 = (short) r3
            r4 = 8371(0x20b3, float:1.173E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x043d }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x043d }
            byte[] r3 = getMin     // Catch:{ all -> 0x043d }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x043d }
            byte r3 = (byte) r3     // Catch:{ all -> 0x043d }
            byte[] r9 = getMin     // Catch:{ all -> 0x043d }
            byte r9 = r9[r5]     // Catch:{ all -> 0x043d }
            short r9 = (short) r9     // Catch:{ all -> 0x043d }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x043d }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x043d }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x043d }
            byte[] r9 = getMin     // Catch:{ all -> 0x043d }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x043d }
            byte r9 = (byte) r9     // Catch:{ all -> 0x043d }
            byte[] r11 = getMin     // Catch:{ all -> 0x043d }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x043d }
            short r11 = (short) r11     // Catch:{ all -> 0x043d }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x043d }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x043d }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x043d }
            byte[] r12 = getMin     // Catch:{ all -> 0x043d }
            byte r12 = r12[r8]     // Catch:{ all -> 0x043d }
            byte r12 = (byte) r12     // Catch:{ all -> 0x043d }
            byte[] r13 = getMin     // Catch:{ all -> 0x043d }
            byte r13 = r13[r5]     // Catch:{ all -> 0x043d }
            short r13 = (short) r13     // Catch:{ all -> 0x043d }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x043d }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x043d }
            r11[r7] = r12     // Catch:{ all -> 0x043d }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x043d }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x043d }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x043d }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x0083:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x0125
            r9 = r0[r6]
            java.lang.Object[] r11 = new java.lang.Object[r5]     // Catch:{ all -> 0x011c }
            r11[r7] = r9     // Catch:{ all -> 0x011c }
            byte[] r9 = getMin     // Catch:{ all -> 0x011c }
            byte r9 = r9[r8]     // Catch:{ all -> 0x011c }
            byte r9 = (byte) r9     // Catch:{ all -> 0x011c }
            byte[] r12 = getMin     // Catch:{ all -> 0x011c }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x011c }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x011c }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x011c }
            java.lang.String r9 = setMax(r9, r12, r14)     // Catch:{ all -> 0x011c }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011c }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x011c }
            byte[] r15 = getMin     // Catch:{ all -> 0x011c }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x011c }
            short r15 = (short) r15     // Catch:{ all -> 0x011c }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x011c }
            java.lang.String r4 = setMax(r12, r15, r4)     // Catch:{ all -> 0x011c }
            java.lang.Class[] r12 = new java.lang.Class[r5]     // Catch:{ all -> 0x011c }
            byte[] r15 = getMin     // Catch:{ all -> 0x011c }
            byte r15 = r15[r8]     // Catch:{ all -> 0x011c }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011c }
            byte[] r16 = getMin     // Catch:{ all -> 0x011c }
            byte r13 = r16[r5]     // Catch:{ all -> 0x011c }
            short r13 = (short) r13     // Catch:{ all -> 0x011c }
            java.lang.String r13 = setMax(r15, r13, r10)     // Catch:{ all -> 0x011c }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x011c }
            r12[r7] = r13     // Catch:{ all -> 0x011c }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r12)     // Catch:{ all -> 0x011c }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r11)     // Catch:{ all -> 0x011c }
            byte[] r11 = getMin     // Catch:{ all -> 0x0113 }
            byte r11 = r11[r8]     // Catch:{ all -> 0x0113 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0113 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0113 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0113 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0113 }
            java.lang.String r11 = setMax(r11, r12, r14)     // Catch:{ all -> 0x0113 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0113 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0113 }
            byte r12 = r12[r8]     // Catch:{ all -> 0x0113 }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x0113 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0113 }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x0113 }
            short r13 = (short) r13     // Catch:{ all -> 0x0113 }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0113 }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x0113 }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x0113 }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x0113 }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x0113 }
            int r4 = r4.intValue()     // Catch:{ all -> 0x0113 }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            goto L_0x0083
        L_0x0113:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011b
            throw r1
        L_0x011b:
            throw r0
        L_0x011c:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0124
            throw r1
        L_0x0124:
            throw r0
        L_0x0125:
            r4 = 56
            r10 = 18
            r11 = 21
            r0 = 0
        L_0x012c:
            int r12 = r0 + 1
            r15 = 7
            r7 = 4
            r14 = 2
            r0 = r3[r0]     // Catch:{ all -> 0x02a7 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x02a7 }
            r13 = 9
            r6 = 3
            switch(r0) {
                case -31: goto L_0x02a0;
                case -30: goto L_0x028e;
                case -29: goto L_0x0288;
                case -28: goto L_0x0273;
                case -27: goto L_0x026d;
                case -26: goto L_0x026a;
                case -25: goto L_0x024b;
                case -24: goto L_0x0239;
                case -23: goto L_0x0229;
                case -22: goto L_0x0228;
                case -21: goto L_0x0224;
                case -20: goto L_0x0220;
                case -19: goto L_0x0213;
                case -18: goto L_0x0205;
                case -17: goto L_0x0200;
                case -16: goto L_0x01fc;
                case -15: goto L_0x01f8;
                case -14: goto L_0x01f4;
                case -13: goto L_0x01e7;
                case -12: goto L_0x01d9;
                case -11: goto L_0x01d0;
                case -10: goto L_0x01cc;
                case -9: goto L_0x01b8;
                case -8: goto L_0x01b4;
                case -7: goto L_0x01a3;
                case -6: goto L_0x019b;
                case -5: goto L_0x0197;
                case -4: goto L_0x017a;
                case -3: goto L_0x0156;
                case -2: goto L_0x0143;
                case -1: goto L_0x013f;
                default: goto L_0x013d;
            }     // Catch:{ all -> 0x02a7 }
        L_0x013d:
            goto L_0x02a3
        L_0x013f:
            r0 = 53
            goto L_0x02a4
        L_0x0143:
            r1.setMax = r5     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            o.setGlobalUserData r0 = (o.setGlobalUserData) r0     // Catch:{ all -> 0x02a7 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a7 }
        L_0x0151:
            r1.getMax(r7)     // Catch:{ all -> 0x02a7 }
            goto L_0x02a3
        L_0x0156:
            r1.setMax = r6     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x02a7 }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x02a7 }
            r1.getMax(r15)     // Catch:{ all -> 0x02a7 }
            int r13 = r1.setMin     // Catch:{ all -> 0x02a7 }
            if (r13 == 0) goto L_0x0172
            r13 = 1
            goto L_0x0173
        L_0x0172:
            r13 = 0
        L_0x0173:
            o.GriverMonitorAnalyticsConfigManager$length r0 = o.GriverMonitorAnalyticsConfigManager.length.forLogin(r0, r6, r13)     // Catch:{ all -> 0x02a7 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x0151
        L_0x017a:
            r1.setMax = r6     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r13 = r1.isInside     // Catch:{ all -> 0x02a7 }
            o.setGlobalUserData r13 = (o.setGlobalUserData) r13     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x02a7 }
            r0.execute(r13, r6)     // Catch:{ all -> 0x02a7 }
            goto L_0x02a3
        L_0x0197:
            r0 = 82
            goto L_0x02a4
        L_0x019b:
            r1.getMax(r8)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x02a7 }
            throw r0     // Catch:{ all -> 0x02a7 }
        L_0x01a3:
            r1.getMax(r13)     // Catch:{ all -> 0x02a7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a7 }
            if (r0 == 0) goto L_0x01b0
            if (r0 == r5) goto L_0x01ad
            goto L_0x01b0
        L_0x01ad:
            r0 = 1
            goto L_0x02a4
        L_0x01b0:
            r0 = 8
            goto L_0x02a4
        L_0x01b4:
            r0 = 20
            goto L_0x02a4
        L_0x01b8:
            r1.getMax(r13)     // Catch:{ all -> 0x02a7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a7 }
            if (r0 == r6) goto L_0x01c8
            r6 = 69
            if (r0 == r6) goto L_0x01c4
            goto L_0x01c8
        L_0x01c4:
            r0 = 90
            goto L_0x02a4
        L_0x01c8:
            r0 = 100
            goto L_0x02a4
        L_0x01cc:
            r0 = 17
            goto L_0x02a4
        L_0x01d0:
            int r0 = invokeSuspend     // Catch:{ all -> 0x02a7 }
            r1.setMax = r0     // Catch:{ all -> 0x02a7 }
        L_0x01d4:
            r1.getMax(r10)     // Catch:{ all -> 0x02a7 }
            goto L_0x02a3
        L_0x01d9:
            r1.setMax = r5     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r15)     // Catch:{ all -> 0x02a7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a7 }
            invoke = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x02a3
        L_0x01e7:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x02a7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a7 }
            if (r0 != 0) goto L_0x02a3
            r0 = 52
            goto L_0x02a4
        L_0x01f4:
            r0 = 21
            goto L_0x02a4
        L_0x01f8:
            r0 = 111(0x6f, float:1.56E-43)
            goto L_0x02a4
        L_0x01fc:
            r0 = 56
            goto L_0x02a4
        L_0x0200:
            int r0 = invoke     // Catch:{ all -> 0x02a7 }
            r1.setMax = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x01d4
        L_0x0205:
            r1.setMax = r5     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r15)     // Catch:{ all -> 0x02a7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a7 }
            invokeSuspend = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x02a3
        L_0x0213:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x02a7 }
            int r0 = r1.setMin     // Catch:{ all -> 0x02a7 }
            if (r0 != 0) goto L_0x02a3
            r0 = 81
            goto L_0x02a4
        L_0x0220:
            r0 = 18
            goto L_0x02a4
        L_0x0224:
            r0 = 109(0x6d, float:1.53E-43)
            goto L_0x02a4
        L_0x0228:
            return
        L_0x0229:
            r1.setMax = r5     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            o.isMainThread$getMin r0 = (o.isMainThread.getMin) r0     // Catch:{ all -> 0x02a7 }
            r0.showProgress()     // Catch:{ all -> 0x02a7 }
            goto L_0x02a3
        L_0x0239:
            r1.setMax = r5     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x02a7 }
            o.GriverMonitorAnalyticsConfigManager r0 = r0.IsOverlapping     // Catch:{ all -> 0x02a7 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x0151
        L_0x024b:
            o.onValidateSchema$isInside r0 = new o.onValidateSchema$isInside     // Catch:{ all -> 0x02a7 }
            r1.setMax = r14     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x02a7 }
            o.onValidateSchema r6 = (o.onValidateSchema) r6     // Catch:{ all -> 0x02a7 }
            r1.getMax(r15)     // Catch:{ all -> 0x02a7 }
            int r13 = r1.setMin     // Catch:{ all -> 0x02a7 }
            if (r13 == 0) goto L_0x0262
            r13 = 1
            goto L_0x0263
        L_0x0262:
            r13 = 0
        L_0x0263:
            r0.<init>(r6, r13)     // Catch:{ all -> 0x02a7 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x0151
        L_0x026a:
            r0 = 24
            goto L_0x02a4
        L_0x026d:
            java.lang.String r0 = "inputPin"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x0151
        L_0x0273:
            r1.setMax = r14     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r6 = r1.isInside     // Catch:{ all -> 0x02a7 }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x02a7 }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r6)     // Catch:{ all -> 0x02a7 }
            goto L_0x02a3
        L_0x0288:
            java.lang.String r0 = "securityId"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x0151
        L_0x028e:
            r1.setMax = r5     // Catch:{ all -> 0x02a7 }
            r1.getMax(r14)     // Catch:{ all -> 0x02a7 }
            r1.getMax(r6)     // Catch:{ all -> 0x02a7 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x02a7 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x02a7 }
            o.isMainThread$getMin r0 = r0.getMax     // Catch:{ all -> 0x02a7 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x02a7 }
            goto L_0x0151
        L_0x02a0:
            r0 = 84
            goto L_0x02a4
        L_0x02a3:
            r0 = r12
        L_0x02a4:
            r7 = 0
            goto L_0x012c
        L_0x02a7:
            r0 = move-exception
            byte[] r6 = getMin
            byte r13 = r6[r8]
            byte r13 = (byte) r13
            r10 = 13
            byte r6 = r6[r10]
            short r6 = (short) r6
            int r9 = length
            r9 = r9 | 7588(0x1da4, float:1.0633E-41)
            short r9 = (short) r9
            java.lang.String r6 = setMax(r13, r6, r9)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r9 = 113(0x71, float:1.58E-43)
            r13 = 16
            if (r6 == 0) goto L_0x02d7
            if (r12 < r5) goto L_0x02d7
            if (r12 > r14) goto L_0x02d7
            r5 = 82
            r6 = 84
            r13 = 113(0x71, float:1.58E-43)
            r18 = 15
            goto L_0x042e
        L_0x02d7:
            byte[] r6 = getMin
            byte r14 = r6[r8]
            byte r14 = (byte) r14
            r17 = 4868(0x1304, float:6.822E-42)
            byte r5 = r6[r17]
            short r5 = (short) r5
            r18 = 15
            byte r6 = r6[r18]
            short r6 = (short) r6
            java.lang.String r5 = setMax(r14, r5, r6)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0300
            if (r12 < r7) goto L_0x0300
            if (r12 > r15) goto L_0x0300
            r5 = 82
            r6 = 84
        L_0x02fc:
            r13 = 113(0x71, float:1.58E-43)
            goto L_0x042e
        L_0x0300:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            byte r5 = r5[r17]
            short r5 = (short) r5
            r7 = 10554(0x293a, float:1.479E-41)
            short r7 = (short) r7
            java.lang.String r5 = setMax(r6, r5, r7)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0324
            r5 = 5
            if (r12 < r5) goto L_0x0324
            if (r12 > r15) goto L_0x0324
            r5 = 82
        L_0x0320:
            r6 = 84
            goto L_0x042e
        L_0x0324:
            if (r12 < r10) goto L_0x032f
            if (r12 > r13) goto L_0x032f
            r5 = 82
            r6 = 84
            r13 = 7
            goto L_0x042e
        L_0x032f:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            byte r5 = r5[r11]
            short r5 = (short) r5
            r7 = 10638(0x298e, float:1.4907E-41)
            short r7 = (short) r7
            java.lang.String r5 = setMax(r6, r5, r7)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x034f
            if (r12 < r4) goto L_0x034f
            r5 = 82
            if (r12 > r5) goto L_0x034f
        L_0x034e:
            goto L_0x0320
        L_0x034f:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            r10 = 4869(0x1305, float:6.823E-42)
            byte r5 = r5[r10]
            short r5 = (short) r5
            r10 = 1139(0x473, float:1.596E-42)
            short r10 = (short) r10
            java.lang.String r5 = setMax(r6, r5, r10)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0373
            r5 = 77
            if (r12 < r5) goto L_0x0373
            r5 = 82
            if (r12 > r5) goto L_0x0375
            goto L_0x034e
        L_0x0373:
            r5 = 82
        L_0x0375:
            byte[] r6 = getMin
            byte r14 = r6[r8]
            byte r14 = (byte) r14
            r15 = 4869(0x1305, float:6.823E-42)
            byte r6 = r6[r15]
            short r6 = (short) r6
            java.lang.String r6 = setMax(r14, r6, r10)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0397
            r6 = 84
            if (r12 < r6) goto L_0x0399
            r10 = 85
            if (r12 > r10) goto L_0x0399
        L_0x0395:
            goto L_0x02fc
        L_0x0397:
            r6 = 84
        L_0x0399:
            byte[] r10 = getMin
            byte r14 = r10[r8]
            byte r14 = (byte) r14
            r15 = 1156(0x484, float:1.62E-42)
            byte r10 = r10[r15]
            int r10 = -r10
            short r10 = (short) r10
            r15 = 5857(0x16e1, float:8.207E-42)
            short r15 = (short) r15
            java.lang.String r10 = setMax(r14, r10, r15)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r0)
            if (r10 == 0) goto L_0x03bf
            r10 = 86
            if (r12 < r10) goto L_0x03bf
            r10 = 90
            if (r12 > r10) goto L_0x03bf
            goto L_0x042e
        L_0x03bf:
            r10 = 98
            if (r12 < r10) goto L_0x03cc
            r10 = 100
            if (r12 > r10) goto L_0x03cc
            r7 = 23
            r13 = 23
            goto L_0x042e
        L_0x03cc:
            byte[] r10 = getMin
            byte r14 = r10[r8]
            byte r14 = (byte) r14
            byte r10 = r10[r11]
            short r10 = (short) r10
            java.lang.String r10 = setMax(r14, r10, r7)
            java.lang.Class r10 = java.lang.Class.forName(r10)
            boolean r10 = r10.isInstance(r0)
            if (r10 == 0) goto L_0x03eb
            r10 = 91
            if (r12 < r10) goto L_0x03eb
            r10 = 92
            if (r12 > r10) goto L_0x03eb
        L_0x03ea:
            goto L_0x0395
        L_0x03eb:
            byte[] r10 = getMin
            byte r14 = r10[r8]
            byte r14 = (byte) r14
            byte r10 = r10[r11]
            short r10 = (short) r10
            java.lang.String r7 = setMax(r14, r10, r7)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x040a
            r7 = 92
            if (r12 < r7) goto L_0x040a
            r7 = 93
            if (r12 > r7) goto L_0x040a
            goto L_0x042e
        L_0x040a:
            byte[] r7 = getMin
            byte r10 = r7[r8]
            byte r10 = (byte) r10
            r13 = 7392(0x1ce0, float:1.0358E-41)
            byte r7 = r7[r13]
            short r7 = (short) r7
            r13 = 10605(0x296d, float:1.4861E-41)
            short r13 = (short) r13
            java.lang.String r7 = setMax(r10, r7, r13)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x043c
            r7 = 94
            if (r12 < r7) goto L_0x043c
            r7 = 95
            if (r12 > r7) goto L_0x043c
            goto L_0x03ea
        L_0x042e:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r0 = r13
            r5 = 1
            r7 = 0
            r10 = 18
            goto L_0x012c
        L_0x043c:
            throw r0
        L_0x043d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0445
            throw r1
        L_0x0445:
            goto L_0x0447
        L_0x0446:
            throw r0
        L_0x0447:
            goto L_0x0446
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.getMin(java.lang.String, java.lang.String, boolean):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x0149, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:37:0x0170, code lost:
        r1.getMax(18);
     */
    @androidx.annotation.VisibleForTesting
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void length() {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r1.<init>(r2)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = r0 | 192(0xc0, float:2.69E-43)
            short r3 = (short) r3
            r4 = 13963(0x368b, float:1.9566E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x02ea }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x02ea }
            byte[] r3 = getMin     // Catch:{ all -> 0x02ea }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x02ea }
            byte r3 = (byte) r3     // Catch:{ all -> 0x02ea }
            byte[] r9 = getMin     // Catch:{ all -> 0x02ea }
            byte r9 = r9[r5]     // Catch:{ all -> 0x02ea }
            short r9 = (short) r9     // Catch:{ all -> 0x02ea }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x02ea }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x02ea }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x02ea }
            byte[] r9 = getMin     // Catch:{ all -> 0x02ea }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x02ea }
            byte r9 = (byte) r9     // Catch:{ all -> 0x02ea }
            byte[] r11 = getMin     // Catch:{ all -> 0x02ea }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x02ea }
            short r11 = (short) r11     // Catch:{ all -> 0x02ea }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x02ea }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x02ea }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x02ea }
            byte[] r12 = getMin     // Catch:{ all -> 0x02ea }
            byte r12 = r12[r8]     // Catch:{ all -> 0x02ea }
            byte r12 = (byte) r12     // Catch:{ all -> 0x02ea }
            byte[] r13 = getMin     // Catch:{ all -> 0x02ea }
            byte r13 = r13[r5]     // Catch:{ all -> 0x02ea }
            short r13 = (short) r13     // Catch:{ all -> 0x02ea }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x02ea }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x02ea }
            r11[r7] = r12     // Catch:{ all -> 0x02ea }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x02ea }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x02ea }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x02ea }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x007d:
            int r9 = r0.length
            r11 = 32
            if (r6 >= r9) goto L_0x011f
            r9 = r0[r6]
            java.lang.Object[] r12 = new java.lang.Object[r5]     // Catch:{ all -> 0x0116 }
            r12[r7] = r9     // Catch:{ all -> 0x0116 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0116 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0116 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0116 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r9 = setMax(r9, r13, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0116 }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r11 = r16[r11]     // Catch:{ all -> 0x0116 }
            short r11 = (short) r11     // Catch:{ all -> 0x0116 }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x0116 }
            java.lang.String r4 = setMax(r13, r11, r4)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            byte r13 = r13[r8]     // Catch:{ all -> 0x0116 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r17 = getMin     // Catch:{ all -> 0x0116 }
            byte r14 = r17[r5]     // Catch:{ all -> 0x0116 }
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            java.lang.String r13 = setMax(r13, r14, r10)     // Catch:{ all -> 0x0116 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0116 }
            r11[r7] = r13     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r11)     // Catch:{ all -> 0x0116 }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r12)     // Catch:{ all -> 0x0116 }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r8]     // Catch:{ all -> 0x010d }
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r15)     // Catch:{ all -> 0x010d }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            byte r12 = r12[r8]     // Catch:{ all -> 0x010d }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x010d }
            byte[] r13 = getMin     // Catch:{ all -> 0x010d }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010d }
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010d }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x010d }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x010d }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x010d }
            int r4 = r4.intValue()     // Catch:{ all -> 0x010d }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            goto L_0x007d
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r4 = 33
            r6 = 10
            r9 = 7
            r10 = 4
        L_0x0125:
            int r12 = r7 + 1
            r0 = r3[r7]     // Catch:{ all -> 0x01ee }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01ee }
            r7 = 18
            r13 = 3
            r14 = 2
            switch(r0) {
                case -20: goto L_0x01e7;
                case -19: goto L_0x01d8;
                case -18: goto L_0x01cb;
                case -17: goto L_0x01c6;
                case -16: goto L_0x01be;
                case -15: goto L_0x01ba;
                case -14: goto L_0x01a6;
                case -13: goto L_0x0195;
                case -12: goto L_0x0193;
                case -11: goto L_0x0190;
                case -10: goto L_0x0182;
                case -9: goto L_0x0175;
                case -8: goto L_0x016c;
                case -7: goto L_0x016a;
                case -6: goto L_0x0169;
                case -5: goto L_0x0166;
                case -4: goto L_0x014e;
                case -3: goto L_0x013b;
                case -2: goto L_0x0138;
                case -1: goto L_0x0136;
                default: goto L_0x0134;
            }     // Catch:{ all -> 0x01ee }
        L_0x0134:
            goto L_0x01eb
        L_0x0136:
            r7 = 1
            goto L_0x0125
        L_0x0138:
            r7 = 27
            goto L_0x0125
        L_0x013b:
            r1.setMax = r5     // Catch:{ all -> 0x01ee }
            r1.getMax(r14)     // Catch:{ all -> 0x01ee }
            r1.getMax(r13)     // Catch:{ all -> 0x01ee }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01ee }
            o.setGlobalUserData r0 = (o.setGlobalUserData) r0     // Catch:{ all -> 0x01ee }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01ee }
        L_0x0149:
            r1.getMax(r10)     // Catch:{ all -> 0x01ee }
            goto L_0x01eb
        L_0x014e:
            r1.setMax = r14     // Catch:{ all -> 0x01ee }
            r1.getMax(r14)     // Catch:{ all -> 0x01ee }
            r1.getMax(r13)     // Catch:{ all -> 0x01ee }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01ee }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x01ee }
            r1.getMax(r13)     // Catch:{ all -> 0x01ee }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x01ee }
            o.setGlobalUserData r7 = (o.setGlobalUserData) r7     // Catch:{ all -> 0x01ee }
            r0.execute(r7)     // Catch:{ all -> 0x01ee }
            goto L_0x01eb
        L_0x0166:
            r7 = 33
            goto L_0x0125
        L_0x0169:
            return
        L_0x016a:
            r7 = 7
            goto L_0x0125
        L_0x016c:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01ee }
            r1.setMax = r0     // Catch:{ all -> 0x01ee }
        L_0x0170:
            r1.getMax(r7)     // Catch:{ all -> 0x01ee }
            goto L_0x01eb
        L_0x0175:
            r1.setMax = r5     // Catch:{ all -> 0x01ee }
            r1.getMax(r14)     // Catch:{ all -> 0x01ee }
            r1.getMax(r9)     // Catch:{ all -> 0x01ee }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ee }
            invoke = r0     // Catch:{ all -> 0x01ee }
            goto L_0x01eb
        L_0x0182:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01ee }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ee }
            if (r0 != 0) goto L_0x01eb
            r0 = 25
            r7 = 25
            goto L_0x0125
        L_0x0190:
            r7 = 26
            goto L_0x0125
        L_0x0193:
            r7 = 4
            goto L_0x0125
        L_0x0195:
            r1.setMax = r5     // Catch:{ all -> 0x01ee }
            r1.getMax(r14)     // Catch:{ all -> 0x01ee }
            r1.getMax(r13)     // Catch:{ all -> 0x01ee }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01ee }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01ee }
            o.sendData r0 = r0.values     // Catch:{ all -> 0x01ee }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01ee }
            goto L_0x0149
        L_0x01a6:
            o.onValidateSchema$equals r0 = new o.onValidateSchema$equals     // Catch:{ all -> 0x01ee }
            r1.setMax = r5     // Catch:{ all -> 0x01ee }
            r1.getMax(r14)     // Catch:{ all -> 0x01ee }
            r1.getMax(r13)     // Catch:{ all -> 0x01ee }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x01ee }
            o.onValidateSchema r7 = (o.onValidateSchema) r7     // Catch:{ all -> 0x01ee }
            r0.<init>(r7)     // Catch:{ all -> 0x01ee }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01ee }
            goto L_0x0149
        L_0x01ba:
            r7 = 10
            goto L_0x0125
        L_0x01be:
            r1.getMax(r8)     // Catch:{ all -> 0x01ee }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01ee }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01ee }
            throw r0     // Catch:{ all -> 0x01ee }
        L_0x01c6:
            int r0 = invoke     // Catch:{ all -> 0x01ee }
            r1.setMax = r0     // Catch:{ all -> 0x01ee }
            goto L_0x0170
        L_0x01cb:
            r1.setMax = r5     // Catch:{ all -> 0x01ee }
            r1.getMax(r14)     // Catch:{ all -> 0x01ee }
            r1.getMax(r9)     // Catch:{ all -> 0x01ee }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ee }
            invokeSuspend = r0     // Catch:{ all -> 0x01ee }
            goto L_0x01eb
        L_0x01d8:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x01ee }
            int r0 = r1.setMin     // Catch:{ all -> 0x01ee }
            if (r0 != 0) goto L_0x01eb
            r0 = 55
            r7 = 55
            goto L_0x0125
        L_0x01e7:
            r7 = 9
            goto L_0x0125
        L_0x01eb:
            r7 = r12
            goto L_0x0125
        L_0x01ee:
            r0 = move-exception
            byte[] r7 = getMin
            byte r13 = r7[r8]
            byte r13 = (byte) r13
            r14 = r13 & 227(0xe3, float:3.18E-43)
            short r14 = (short) r14
            r15 = 4868(0x1304, float:6.822E-42)
            byte r7 = r7[r15]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r13, r14, r7)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            r13 = 5
            r14 = 56
            if (r7 == 0) goto L_0x0217
            if (r12 < r10) goto L_0x0217
            if (r12 > r13) goto L_0x0217
        L_0x0211:
            r7 = 56
        L_0x0213:
            r16 = 15
            goto L_0x02de
        L_0x0217:
            byte[] r7 = getMin
            byte r5 = r7[r8]
            byte r5 = (byte) r5
            r18 = 4116(0x1014, float:5.768E-42)
            byte r7 = r7[r18]
            short r7 = (short) r7
            r9 = 4837(0x12e5, float:6.778E-42)
            short r9 = (short) r9
            java.lang.String r5 = setMax(r5, r7, r9)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x023a
            if (r12 < r13) goto L_0x023a
            r5 = 6
            if (r12 > r5) goto L_0x023a
            r7 = 32
            goto L_0x0213
        L_0x023a:
            byte[] r5 = getMin
            byte r7 = r5[r8]
            byte r7 = (byte) r7
            byte r5 = r5[r18]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r7, r5, r9)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0257
            if (r12 < r6) goto L_0x0257
            r5 = 11
            if (r12 > r5) goto L_0x0257
            goto L_0x0211
        L_0x0257:
            byte[] r5 = getMin
            byte r7 = r5[r8]
            byte r7 = (byte) r7
            byte r13 = r5[r15]
            short r13 = (short) r13
            r16 = 15
            byte r5 = r5[r16]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r7, r13, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x027d
            r5 = 21
            if (r12 < r5) goto L_0x027d
            r5 = 22
            if (r12 > r5) goto L_0x027d
        L_0x027a:
            r7 = 56
            goto L_0x02de
        L_0x027d:
            byte[] r5 = getMin
            byte r7 = r5[r8]
            byte r7 = (byte) r7
            byte r5 = r5[r15]
            short r5 = (short) r5
            r13 = 10554(0x293a, float:1.479E-41)
            short r13 = (short) r13
            java.lang.String r5 = setMax(r7, r5, r13)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x029d
            r5 = 28
            if (r12 < r5) goto L_0x029d
            if (r12 > r11) goto L_0x029d
        L_0x029c:
            goto L_0x027a
        L_0x029d:
            byte[] r5 = getMin
            byte r7 = r5[r8]
            byte r7 = (byte) r7
            r13 = 13
            byte r5 = r5[r13]
            short r5 = (short) r5
            int r13 = length
            r13 = r13 | 7588(0x1da4, float:1.0633E-41)
            short r13 = (short) r13
            java.lang.String r5 = setMax(r7, r5, r13)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02bf
            if (r12 < r4) goto L_0x02bf
            if (r12 > r14) goto L_0x02bf
            goto L_0x029c
        L_0x02bf:
            byte[] r5 = getMin
            byte r7 = r5[r8]
            byte r7 = (byte) r7
            byte r5 = r5[r18]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r7, r5, r9)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02e9
            r5 = 51
            if (r12 < r5) goto L_0x02e9
            r5 = 52
            if (r12 > r5) goto L_0x02e9
            goto L_0x027a
        L_0x02de:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            r5 = 1
            r9 = 7
            goto L_0x0125
        L_0x02e9:
            throw r0
        L_0x02ea:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x02f2
            throw r1
        L_0x02f2:
            goto L_0x02f4
        L_0x02f3:
            throw r0
        L_0x02f4:
            goto L_0x02f3
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length():void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x02e6, code lost:
        if (r13 <= 32) goto L_0x029c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:0x0307, code lost:
        if (r13 <= 60) goto L_0x0278;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x01a9, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Removed duplicated region for block: B:107:0x02e4  */
    /* JADX WARNING: Removed duplicated region for block: B:109:0x02e9  */
    /* JADX WARNING: Removed duplicated region for block: B:112:0x0301  */
    /* JADX WARNING: Removed duplicated region for block: B:115:0x030b  */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x01b9 A[Catch:{ all -> 0x01ae, all -> 0x022b }] */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x01ba A[Catch:{ all -> 0x01ae, all -> 0x022b }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final /* synthetic */ void length(java.lang.String r19, java.lang.String r20, java.lang.String r21, java.lang.Boolean r22) {
        /*
            r18 = this;
            o.TypeConverter r7 = new o.TypeConverter
            r1 = r7
            r2 = r18
            r3 = r19
            r4 = r20
            r5 = r21
            r6 = r22
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r3, (java.lang.Object) r4, (java.lang.Object) r5, (java.lang.Object) r6)
            byte[] r0 = getMin
            r1 = 46
            byte r0 = r0[r1]
            byte r0 = (byte) r0
            r1 = r0 | 202(0xca, float:2.83E-43)
            short r1 = (short) r1
            r2 = 3142(0xc46, float:4.403E-42)
            short r2 = (short) r2
            java.lang.String r0 = setMax(r0, r1, r2)
            byte[] r1 = getMin
            r2 = 15
            byte r1 = r1[r2]
            byte r1 = (byte) r1
            short r2 = (short) r1
            r3 = r2 | 4577(0x11e1, float:6.414E-42)
            short r3 = (short) r3
            java.lang.String r1 = setMax(r1, r2, r3)
            r2 = 1
            java.lang.Object[] r3 = new java.lang.Object[r2]     // Catch:{ all -> 0x0341 }
            r4 = 0
            r3[r4] = r1     // Catch:{ all -> 0x0341 }
            byte[] r1 = getMin     // Catch:{ all -> 0x0341 }
            r5 = 8
            byte r1 = r1[r5]     // Catch:{ all -> 0x0341 }
            byte r1 = (byte) r1     // Catch:{ all -> 0x0341 }
            byte[] r6 = getMin     // Catch:{ all -> 0x0341 }
            byte r6 = r6[r2]     // Catch:{ all -> 0x0341 }
            short r6 = (short) r6     // Catch:{ all -> 0x0341 }
            r8 = 9395(0x24b3, float:1.3165E-41)
            short r8 = (short) r8     // Catch:{ all -> 0x0341 }
            java.lang.String r1 = setMax(r1, r6, r8)     // Catch:{ all -> 0x0341 }
            java.lang.Class r1 = java.lang.Class.forName(r1)     // Catch:{ all -> 0x0341 }
            byte[] r6 = getMin     // Catch:{ all -> 0x0341 }
            r9 = 2662(0xa66, float:3.73E-42)
            byte r6 = r6[r9]     // Catch:{ all -> 0x0341 }
            byte r6 = (byte) r6     // Catch:{ all -> 0x0341 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0341 }
            r10 = 30
            byte r9 = r9[r10]     // Catch:{ all -> 0x0341 }
            short r9 = (short) r9     // Catch:{ all -> 0x0341 }
            r10 = 1177(0x499, float:1.65E-42)
            short r10 = (short) r10     // Catch:{ all -> 0x0341 }
            java.lang.String r6 = setMax(r6, r9, r10)     // Catch:{ all -> 0x0341 }
            java.lang.Class[] r9 = new java.lang.Class[r2]     // Catch:{ all -> 0x0341 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0341 }
            byte r10 = r10[r5]     // Catch:{ all -> 0x0341 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0341 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0341 }
            byte r11 = r11[r2]     // Catch:{ all -> 0x0341 }
            short r11 = (short) r11     // Catch:{ all -> 0x0341 }
            java.lang.String r10 = setMax(r10, r11, r8)     // Catch:{ all -> 0x0341 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0341 }
            r9[r4] = r10     // Catch:{ all -> 0x0341 }
            java.lang.reflect.Method r1 = r1.getMethod(r6, r9)     // Catch:{ all -> 0x0341 }
            java.lang.Object r0 = r1.invoke(r0, r3)     // Catch:{ all -> 0x0341 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0341 }
            int r1 = r0.length
            int[] r1 = new int[r1]
            r3 = 0
        L_0x0086:
            int r6 = r0.length
            r9 = 4119(0x1017, float:5.772E-42)
            r10 = 32
            r11 = 0
            if (r3 >= r6) goto L_0x0126
            r6 = r0[r3]
            java.lang.Object[] r12 = new java.lang.Object[r2]     // Catch:{ all -> 0x011d }
            r12[r4] = r6     // Catch:{ all -> 0x011d }
            byte[] r6 = getMin     // Catch:{ all -> 0x011d }
            byte r6 = r6[r5]     // Catch:{ all -> 0x011d }
            byte r6 = (byte) r6     // Catch:{ all -> 0x011d }
            byte[] r13 = getMin     // Catch:{ all -> 0x011d }
            byte r13 = r13[r9]     // Catch:{ all -> 0x011d }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x011d }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x011d }
            java.lang.String r6 = setMax(r6, r13, r14)     // Catch:{ all -> 0x011d }
            java.lang.Class r6 = java.lang.Class.forName(r6)     // Catch:{ all -> 0x011d }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x011d }
            byte[] r15 = getMin     // Catch:{ all -> 0x011d }
            byte r10 = r15[r10]     // Catch:{ all -> 0x011d }
            short r10 = (short) r10     // Catch:{ all -> 0x011d }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x011d }
            java.lang.String r10 = setMax(r13, r10, r15)     // Catch:{ all -> 0x011d }
            java.lang.Class[] r13 = new java.lang.Class[r2]     // Catch:{ all -> 0x011d }
            byte[] r15 = getMin     // Catch:{ all -> 0x011d }
            byte r15 = r15[r5]     // Catch:{ all -> 0x011d }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011d }
            byte[] r16 = getMin     // Catch:{ all -> 0x011d }
            byte r9 = r16[r2]     // Catch:{ all -> 0x011d }
            short r9 = (short) r9     // Catch:{ all -> 0x011d }
            java.lang.String r9 = setMax(r15, r9, r8)     // Catch:{ all -> 0x011d }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x011d }
            r13[r4] = r9     // Catch:{ all -> 0x011d }
            java.lang.reflect.Method r6 = r6.getMethod(r10, r13)     // Catch:{ all -> 0x011d }
            java.lang.Object r6 = r6.invoke(r11, r12)     // Catch:{ all -> 0x011d }
            byte[] r9 = getMin     // Catch:{ all -> 0x0114 }
            byte r9 = r9[r5]     // Catch:{ all -> 0x0114 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0114 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0114 }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r10 = r10[r12]     // Catch:{ all -> 0x0114 }
            int r10 = -r10
            short r10 = (short) r10     // Catch:{ all -> 0x0114 }
            java.lang.String r9 = setMax(r9, r10, r14)     // Catch:{ all -> 0x0114 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0114 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0114 }
            byte r10 = r10[r5]     // Catch:{ all -> 0x0114 }
            int r10 = r10 - r2
            byte r10 = (byte) r10     // Catch:{ all -> 0x0114 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0114 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0114 }
            short r12 = (short) r12     // Catch:{ all -> 0x0114 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0114 }
            java.lang.String r10 = setMax(r10, r12, r13)     // Catch:{ all -> 0x0114 }
            java.lang.reflect.Method r9 = r9.getMethod(r10, r11)     // Catch:{ all -> 0x0114 }
            java.lang.Object r6 = r9.invoke(r6, r11)     // Catch:{ all -> 0x0114 }
            java.lang.Integer r6 = (java.lang.Integer) r6     // Catch:{ all -> 0x0114 }
            int r6 = r6.intValue()     // Catch:{ all -> 0x0114 }
            r1[r3] = r6
            int r3 = r3 + 1
            goto L_0x0086
        L_0x0114:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011c
            throw r1
        L_0x011c:
            throw r0
        L_0x011d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0125
            throw r1
        L_0x0125:
            throw r0
        L_0x0126:
            r3 = 14
            r9 = 19
            r12 = 7
            r0 = 0
        L_0x012c:
            int r13 = r0 + 1
            r14 = 3
            r0 = r1[r0]     // Catch:{ all -> 0x023b }
            int r0 = r7.getMax(r0)     // Catch:{ all -> 0x023b }
            r15 = 18
            r4 = 47
            r8 = 2
            switch(r0) {
                case -17: goto L_0x0230;
                case -16: goto L_0x022d;
                case -15: goto L_0x021f;
                case -14: goto L_0x021a;
                case -13: goto L_0x0217;
                case -12: goto L_0x0214;
                case -11: goto L_0x0208;
                case -10: goto L_0x01f9;
                case -9: goto L_0x01f2;
                case -8: goto L_0x01f0;
                case -7: goto L_0x01ed;
                case -6: goto L_0x01bb;
                case -5: goto L_0x0163;
                case -4: goto L_0x014e;
                case -3: goto L_0x014d;
                case -2: goto L_0x0145;
                case -1: goto L_0x0141;
                default: goto L_0x013d;
            }     // Catch:{ all -> 0x023b }
        L_0x013d:
            r16 = 4119(0x1017, float:5.772E-42)
            goto L_0x0235
        L_0x0141:
            r0 = 34
            goto L_0x0232
        L_0x0145:
            r7.getMax(r5)     // Catch:{ all -> 0x023b }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x023b }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x023b }
            throw r0     // Catch:{ all -> 0x023b }
        L_0x014d:
            return
        L_0x014e:
            r0 = 9
            r7.getMax(r0)     // Catch:{ all -> 0x023b }
            int r0 = r7.setMin     // Catch:{ all -> 0x023b }
            r4 = 17
            if (r0 == 0) goto L_0x015f
            if (r0 == r2) goto L_0x015c
            goto L_0x015f
        L_0x015c:
            r0 = 2
            goto L_0x0232
        L_0x015f:
            r0 = 17
            goto L_0x0232
        L_0x0163:
            r7.setMax = r2     // Catch:{ all -> 0x023b }
            r7.getMax(r8)     // Catch:{ all -> 0x023b }
            r7.getMax(r14)     // Catch:{ all -> 0x023b }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x023b }
            byte[] r4 = getMin     // Catch:{ all -> 0x01b0 }
            byte r4 = r4[r5]     // Catch:{ all -> 0x01b0 }
            byte r4 = (byte) r4     // Catch:{ all -> 0x01b0 }
            byte[] r8 = getMin     // Catch:{ all -> 0x01b0 }
            r16 = 4119(0x1017, float:5.772E-42)
            byte r8 = r8[r16]     // Catch:{ all -> 0x01ae }
            int r8 = -r8
            short r8 = (short) r8     // Catch:{ all -> 0x01ae }
            r6 = r8 | 9131(0x23ab, float:1.2795E-41)
            short r6 = (short) r6     // Catch:{ all -> 0x01ae }
            java.lang.String r4 = setMax(r4, r8, r6)     // Catch:{ all -> 0x01ae }
            java.lang.Class r4 = java.lang.Class.forName(r4)     // Catch:{ all -> 0x01ae }
            byte[] r6 = getMin     // Catch:{ all -> 0x01ae }
            r8 = 562(0x232, float:7.88E-43)
            byte r6 = r6[r8]     // Catch:{ all -> 0x01ae }
            int r6 = -r6
            byte r6 = (byte) r6     // Catch:{ all -> 0x01ae }
            byte[] r8 = getMin     // Catch:{ all -> 0x01ae }
            byte r8 = r8[r9]     // Catch:{ all -> 0x01ae }
            short r8 = (short) r8     // Catch:{ all -> 0x01ae }
            r10 = 5038(0x13ae, float:7.06E-42)
            short r10 = (short) r10     // Catch:{ all -> 0x01ae }
            java.lang.String r6 = setMax(r6, r8, r10)     // Catch:{ all -> 0x01ae }
            java.lang.reflect.Method r4 = r4.getMethod(r6, r11)     // Catch:{ all -> 0x01ae }
            java.lang.Object r0 = r4.invoke(r0, r11)     // Catch:{ all -> 0x01ae }
            java.lang.Boolean r0 = (java.lang.Boolean) r0     // Catch:{ all -> 0x01ae }
            boolean r0 = r0.booleanValue()     // Catch:{ all -> 0x01ae }
            r7.setMax = r0     // Catch:{ all -> 0x022b }
        L_0x01a9:
            r7.getMax(r15)     // Catch:{ all -> 0x022b }
            goto L_0x0235
        L_0x01ae:
            r0 = move-exception
            goto L_0x01b3
        L_0x01b0:
            r0 = move-exception
            r16 = 4119(0x1017, float:5.772E-42)
        L_0x01b3:
            java.lang.Throwable r4 = r0.getCause()     // Catch:{ all -> 0x022b }
            if (r4 == 0) goto L_0x01ba
            throw r4     // Catch:{ all -> 0x022b }
        L_0x01ba:
            throw r0     // Catch:{ all -> 0x022b }
        L_0x01bb:
            r16 = 4119(0x1017, float:5.772E-42)
            r0 = 5
            r7.setMax = r0     // Catch:{ all -> 0x022b }
            r7.getMax(r8)     // Catch:{ all -> 0x022b }
            r7.getMax(r14)     // Catch:{ all -> 0x022b }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x022b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x022b }
            r7.getMax(r14)     // Catch:{ all -> 0x022b }
            java.lang.Object r4 = r7.isInside     // Catch:{ all -> 0x022b }
            java.lang.String r4 = (java.lang.String) r4     // Catch:{ all -> 0x022b }
            r7.getMax(r14)     // Catch:{ all -> 0x022b }
            java.lang.Object r6 = r7.isInside     // Catch:{ all -> 0x022b }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x022b }
            r7.getMax(r14)     // Catch:{ all -> 0x022b }
            java.lang.Object r8 = r7.isInside     // Catch:{ all -> 0x022b }
            java.lang.String r8 = (java.lang.String) r8     // Catch:{ all -> 0x022b }
            r7.getMax(r12)     // Catch:{ all -> 0x022b }
            int r10 = r7.setMin     // Catch:{ all -> 0x022b }
            if (r10 == 0) goto L_0x01e8
            r10 = 1
            goto L_0x01e9
        L_0x01e8:
            r10 = 0
        L_0x01e9:
            r0.setMin(r4, r6, r8, r10)     // Catch:{ all -> 0x022b }
            goto L_0x0235
        L_0x01ed:
            r0 = 19
            goto L_0x0232
        L_0x01f0:
            r0 = 7
            goto L_0x0232
        L_0x01f2:
            r16 = 4119(0x1017, float:5.772E-42)
            int r0 = invoke     // Catch:{ all -> 0x022b }
            r7.setMax = r0     // Catch:{ all -> 0x022b }
            goto L_0x01a9
        L_0x01f9:
            r16 = 4119(0x1017, float:5.772E-42)
            r7.setMax = r2     // Catch:{ all -> 0x022b }
            r7.getMax(r8)     // Catch:{ all -> 0x022b }
            r7.getMax(r12)     // Catch:{ all -> 0x022b }
            int r0 = r7.setMin     // Catch:{ all -> 0x022b }
            invokeSuspend = r0     // Catch:{ all -> 0x022b }
            goto L_0x0235
        L_0x0208:
            r16 = 4119(0x1017, float:5.772E-42)
            r7.getMax(r4)     // Catch:{ all -> 0x022b }
            int r0 = r7.setMin     // Catch:{ all -> 0x022b }
            if (r0 != 0) goto L_0x0235
            r0 = 31
            goto L_0x0236
        L_0x0214:
            r0 = 32
            goto L_0x0236
        L_0x0217:
            r0 = 14
            goto L_0x0232
        L_0x021a:
            r16 = 4119(0x1017, float:5.772E-42)
            r0 = 37
            goto L_0x0232
        L_0x021f:
            r16 = 4119(0x1017, float:5.772E-42)
            r7.getMax(r4)     // Catch:{ all -> 0x022b }
            int r0 = r7.setMin     // Catch:{ all -> 0x022b }
            if (r0 != 0) goto L_0x0235
            r0 = 59
            goto L_0x0236
        L_0x022b:
            r0 = move-exception
            goto L_0x023e
        L_0x022d:
            r0 = 60
            goto L_0x0232
        L_0x0230:
            r0 = 8
        L_0x0232:
            r4 = 0
            goto L_0x012c
        L_0x0235:
            r0 = r13
        L_0x0236:
            r4 = 0
            r10 = 32
            goto L_0x012c
        L_0x023b:
            r0 = move-exception
            r16 = 4119(0x1017, float:5.772E-42)
        L_0x023e:
            r4 = 6
            if (r13 < r14) goto L_0x024f
            if (r13 > r4) goto L_0x024f
            r4 = 16
            r2 = 32
            r4 = 37
            r6 = 60
            r8 = 16
            goto L_0x0335
        L_0x024f:
            byte[] r6 = getMin
            byte r8 = r6[r5]
            byte r8 = (byte) r8
            r10 = 4869(0x1305, float:6.823E-42)
            byte r6 = r6[r10]
            short r6 = (short) r6
            r14 = 1139(0x473, float:1.596E-42)
            short r14 = (short) r14
            java.lang.String r6 = setMax(r8, r6, r14)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            r8 = 12
            if (r6 == 0) goto L_0x027b
            r6 = 11
            if (r13 < r6) goto L_0x027b
            if (r13 > r8) goto L_0x027b
            r2 = 32
            r4 = 37
            r6 = 60
        L_0x0278:
            r8 = 1
            goto L_0x0335
        L_0x027b:
            byte[] r6 = getMin
            byte r15 = r6[r5]
            byte r15 = (byte) r15
            r17 = 4868(0x1304, float:6.822E-42)
            byte r6 = r6[r17]
            short r6 = (short) r6
            r2 = 10554(0x293a, float:1.479E-41)
            short r2 = (short) r2
            java.lang.String r2 = setMax(r15, r6, r2)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x02a3
            if (r13 < r8) goto L_0x02a3
            if (r13 > r3) goto L_0x02a3
            r2 = 32
        L_0x029c:
            r4 = 37
            r6 = 60
            r8 = 6
            goto L_0x0335
        L_0x02a3:
            byte[] r2 = getMin
            byte r6 = r2[r5]
            byte r6 = (byte) r6
            r8 = 21
            byte r2 = r2[r8]
            short r2 = (short) r2
            r8 = 10638(0x298e, float:1.4907E-41)
            short r8 = (short) r8
            java.lang.String r2 = setMax(r6, r2, r8)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x02c5
            if (r13 < r9) goto L_0x02c5
            r2 = 32
            if (r13 > r2) goto L_0x02c5
        L_0x02c4:
            goto L_0x029c
        L_0x02c5:
            byte[] r2 = getMin
            byte r6 = r2[r5]
            byte r6 = (byte) r6
            r8 = 7392(0x1ce0, float:1.0358E-41)
            byte r2 = r2[r8]
            short r2 = (short) r2
            r8 = 10605(0x296d, float:1.4861E-41)
            short r8 = (short) r8
            java.lang.String r2 = setMax(r6, r2, r8)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x02e9
            r2 = 27
            if (r13 < r2) goto L_0x02e9
            r2 = 32
            if (r13 > r2) goto L_0x02eb
            goto L_0x02c4
        L_0x02e9:
            r2 = 32
        L_0x02eb:
            byte[] r4 = getMin
            byte r6 = r4[r5]
            byte r6 = (byte) r6
            byte r4 = r4[r10]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r6, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x030b
            r4 = 37
            r6 = 60
            if (r13 < r4) goto L_0x030f
            if (r13 > r6) goto L_0x030f
        L_0x0309:
            goto L_0x0278
        L_0x030b:
            r4 = 37
            r6 = 60
        L_0x030f:
            byte[] r8 = getMin
            byte r10 = r8[r5]
            byte r10 = (byte) r10
            r14 = 13
            byte r8 = r8[r14]
            short r8 = (short) r8
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r8 = setMax(r10, r8, r14)
            java.lang.Class r8 = java.lang.Class.forName(r8)
            boolean r8 = r8.isInstance(r0)
            if (r8 == 0) goto L_0x0340
            r8 = 55
            if (r13 < r8) goto L_0x0340
            r8 = 56
            if (r13 > r8) goto L_0x0340
            goto L_0x0309
        L_0x0335:
            r7.IsOverlapping = r0
            r0 = 49
            r7.getMax(r0)
            r0 = r8
            r2 = 1
            goto L_0x0236
        L_0x0340:
            throw r0
        L_0x0341:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0349
            throw r1
        L_0x0349:
            goto L_0x034b
        L_0x034a:
            throw r0
        L_0x034b:
            goto L_0x034a
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.length(java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:100:0x0319, code lost:
        if (r12 <= 16) goto L_0x02b6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x033d, code lost:
        if (r12 <= 26) goto L_0x02b8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:126:0x038f, code lost:
        if (r12 <= 73) goto L_0x0361;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:139:0x03d6, code lost:
        if (r12 <= 106) goto L_0x03fe;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x014e, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x01c9, code lost:
        r1.getMax(18);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void setMax() {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r1.<init>(r2)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = 470(0x1d6, float:6.59E-43)
            short r3 = (short) r3
            r4 = 2672(0xa70, float:3.744E-42)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x040a }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x040a }
            byte[] r3 = getMin     // Catch:{ all -> 0x040a }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x040a }
            byte r3 = (byte) r3     // Catch:{ all -> 0x040a }
            byte[] r9 = getMin     // Catch:{ all -> 0x040a }
            byte r9 = r9[r5]     // Catch:{ all -> 0x040a }
            short r9 = (short) r9     // Catch:{ all -> 0x040a }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x040a }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x040a }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x040a }
            byte[] r9 = getMin     // Catch:{ all -> 0x040a }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x040a }
            byte r9 = (byte) r9     // Catch:{ all -> 0x040a }
            byte[] r11 = getMin     // Catch:{ all -> 0x040a }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x040a }
            short r11 = (short) r11     // Catch:{ all -> 0x040a }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x040a }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x040a }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x040a }
            byte[] r12 = getMin     // Catch:{ all -> 0x040a }
            byte r12 = r12[r8]     // Catch:{ all -> 0x040a }
            byte r12 = (byte) r12     // Catch:{ all -> 0x040a }
            byte[] r13 = getMin     // Catch:{ all -> 0x040a }
            byte r13 = r13[r5]     // Catch:{ all -> 0x040a }
            short r13 = (short) r13     // Catch:{ all -> 0x040a }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x040a }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x040a }
            r11[r7] = r12     // Catch:{ all -> 0x040a }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x040a }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x040a }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x040a }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x007d:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x011f
            r9 = r0[r6]
            java.lang.Object[] r12 = new java.lang.Object[r5]     // Catch:{ all -> 0x0116 }
            r12[r7] = r9     // Catch:{ all -> 0x0116 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0116 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0116 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0116 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            java.lang.String r9 = setMax(r9, r13, r14)     // Catch:{ all -> 0x0116 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0116 }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0116 }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x0116 }
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x0116 }
            java.lang.String r4 = setMax(r13, r15, r4)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r13 = new java.lang.Class[r5]     // Catch:{ all -> 0x0116 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0116 }
            byte r15 = r15[r8]     // Catch:{ all -> 0x0116 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0116 }
            byte[] r17 = getMin     // Catch:{ all -> 0x0116 }
            byte r11 = r17[r5]     // Catch:{ all -> 0x0116 }
            short r11 = (short) r11     // Catch:{ all -> 0x0116 }
            java.lang.String r11 = setMax(r15, r11, r10)     // Catch:{ all -> 0x0116 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0116 }
            r13[r7] = r11     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r13)     // Catch:{ all -> 0x0116 }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r12)     // Catch:{ all -> 0x0116 }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r8]     // Catch:{ all -> 0x010d }
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r14)     // Catch:{ all -> 0x010d }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            byte r12 = r12[r8]     // Catch:{ all -> 0x010d }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x010d }
            byte[] r13 = getMin     // Catch:{ all -> 0x010d }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010d }
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010d }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x010d }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x010d }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x010d }
            int r4 = r4.intValue()     // Catch:{ all -> 0x010d }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            goto L_0x007d
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r9 = 9
            r10 = 17
            r11 = 18
        L_0x0125:
            int r12 = r7 + 1
            r13 = 49
            r0 = r3[r7]     // Catch:{ all -> 0x028b }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x028b }
            r7 = 34
            r14 = 47
            r15 = 4
            r4 = 3
            r6 = 2
            switch(r0) {
                case -34: goto L_0x0284;
                case -33: goto L_0x0277;
                case -32: goto L_0x0273;
                case -31: goto L_0x0266;
                case -30: goto L_0x0262;
                case -29: goto L_0x0252;
                case -28: goto L_0x0240;
                case -27: goto L_0x022e;
                case -26: goto L_0x022a;
                case -25: goto L_0x021d;
                case -24: goto L_0x020f;
                case -23: goto L_0x020a;
                case -22: goto L_0x0202;
                case -21: goto L_0x0201;
                case -20: goto L_0x01f0;
                case -19: goto L_0x01ec;
                case -18: goto L_0x01e8;
                case -17: goto L_0x01dd;
                case -16: goto L_0x01ce;
                case -15: goto L_0x01c5;
                case -14: goto L_0x01c1;
                case -13: goto L_0x01bd;
                case -12: goto L_0x01ba;
                case -11: goto L_0x01b6;
                case -10: goto L_0x01b2;
                case -9: goto L_0x01a1;
                case -8: goto L_0x0190;
                case -7: goto L_0x018d;
                case -6: goto L_0x0178;
                case -5: goto L_0x0175;
                case -4: goto L_0x0164;
                case -3: goto L_0x0153;
                case -2: goto L_0x013e;
                case -1: goto L_0x013b;
                default: goto L_0x0139;
            }     // Catch:{ all -> 0x028b }
        L_0x0139:
            goto L_0x0288
        L_0x013b:
            r7 = 19
            goto L_0x0125
        L_0x013e:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.clearCache r0 = r0.isInside     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
        L_0x014e:
            r1.getMax(r15)     // Catch:{ all -> 0x028b }
            goto L_0x0288
        L_0x0153:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x028b }
            r0.dispose()     // Catch:{ all -> 0x028b }
            goto L_0x0288
        L_0x0164:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.setDatabasePath r0 = r0.toFloatRange     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x014e
        L_0x0175:
            r7 = 105(0x69, float:1.47E-43)
            goto L_0x0125
        L_0x0178:
            r1.getMax(r9)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            r4 = 21
            if (r0 == r4) goto L_0x0188
            r4 = 29
            r0 = 137(0x89, float:1.92E-43)
            r7 = 137(0x89, float:1.92E-43)
            goto L_0x0125
        L_0x0188:
            r0 = 50
            r7 = 50
            goto L_0x0125
        L_0x018d:
            r7 = 66
            goto L_0x0125
        L_0x0190:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.sendData r0 = r0.values     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x014e
        L_0x01a1:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.GriverCreateDialogParam r0 = r0.toDoubleRange     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x014e
        L_0x01b2:
            r7 = 56
            goto L_0x0125
        L_0x01b6:
            r7 = 10
            goto L_0x0125
        L_0x01ba:
            r7 = 1
            goto L_0x0125
        L_0x01bd:
            r7 = 75
            goto L_0x0125
        L_0x01c1:
            r7 = 8
            goto L_0x0125
        L_0x01c5:
            int r0 = invokeSuspend     // Catch:{ all -> 0x028b }
            r1.setMax = r0     // Catch:{ all -> 0x028b }
        L_0x01c9:
            r1.getMax(r11)     // Catch:{ all -> 0x028b }
            goto L_0x0288
        L_0x01ce:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            invoke = r0     // Catch:{ all -> 0x028b }
            goto L_0x0288
        L_0x01dd:
            r1.getMax(r7)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 != 0) goto L_0x0288
            r7 = 49
            goto L_0x0125
        L_0x01e8:
            r7 = 73
            goto L_0x0125
        L_0x01ec:
            r7 = 23
            goto L_0x0125
        L_0x01f0:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            int r0 = super.hashCode()     // Catch:{ all -> 0x028b }
            r1.setMax = r0     // Catch:{ all -> 0x028b }
            goto L_0x01c9
        L_0x0201:
            return
        L_0x0202:
            r1.getMax(r8)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x028b }
            throw r0     // Catch:{ all -> 0x028b }
        L_0x020a:
            int r0 = invoke     // Catch:{ all -> 0x028b }
            r1.setMax = r0     // Catch:{ all -> 0x028b }
            goto L_0x01c9
        L_0x020f:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r0 = 7
            r1.getMax(r0)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            invokeSuspend = r0     // Catch:{ all -> 0x028b }
            goto L_0x0288
        L_0x021d:
            r1.getMax(r14)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 != 0) goto L_0x0288
            r0 = 65
            r7 = 65
            goto L_0x0125
        L_0x022a:
            r7 = 18
            goto L_0x0125
        L_0x022e:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.DebugMonitor r0 = r0.setMin     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x014e
        L_0x0240:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x028b }
            o.setDomStorageEnabled r0 = r0.hashCode     // Catch:{ all -> 0x028b }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x028b }
            goto L_0x014e
        L_0x0252:
            r1.setMax = r5     // Catch:{ all -> 0x028b }
            r1.getMax(r6)     // Catch:{ all -> 0x028b }
            r1.getMax(r4)     // Catch:{ all -> 0x028b }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x028b }
            o.APWebChromeClient r0 = (o.APWebChromeClient) r0     // Catch:{ all -> 0x028b }
            r0.dispose()     // Catch:{ all -> 0x028b }
            goto L_0x0288
        L_0x0262:
            r7 = 25
            goto L_0x0125
        L_0x0266:
            r1.getMax(r7)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 != 0) goto L_0x0288
            r0 = 103(0x67, float:1.44E-43)
            r7 = 103(0x67, float:1.44E-43)
            goto L_0x0125
        L_0x0273:
            r7 = 17
            goto L_0x0125
        L_0x0277:
            r1.getMax(r14)     // Catch:{ all -> 0x028b }
            int r0 = r1.setMin     // Catch:{ all -> 0x028b }
            if (r0 != 0) goto L_0x0288
            r0 = 135(0x87, float:1.89E-43)
            r7 = 135(0x87, float:1.89E-43)
            goto L_0x0125
        L_0x0284:
            r7 = 9
            goto L_0x0125
        L_0x0288:
            r7 = r12
            goto L_0x0125
        L_0x028b:
            r0 = move-exception
            byte[] r4 = getMin
            byte r6 = r4[r8]
            byte r6 = (byte) r6
            r7 = 1156(0x484, float:1.62E-42)
            byte r4 = r4[r7]
            int r4 = -r4
            short r4 = (short) r4
            r14 = 5857(0x16e1, float:8.207E-42)
            short r14 = (short) r14
            java.lang.String r4 = setMax(r6, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            r6 = 12
            r15 = 104(0x68, float:1.46E-43)
            r5 = 136(0x88, float:1.9E-43)
            if (r4 == 0) goto L_0x02bc
            r4 = 11
            if (r12 < r4) goto L_0x02bc
            if (r12 > r6) goto L_0x02bc
            r5 = 104(0x68, float:1.46E-43)
        L_0x02b6:
            r6 = 25
        L_0x02b8:
            r7 = 105(0x69, float:1.47E-43)
            goto L_0x03fe
        L_0x02bc:
            byte[] r4 = getMin
            byte r9 = r4[r8]
            byte r9 = (byte) r9
            byte r4 = r4[r7]
            int r4 = -r4
            short r4 = (short) r4
            java.lang.String r4 = setMax(r9, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x02d8
            if (r12 < r6) goto L_0x02d8
            if (r12 > r10) goto L_0x02d8
        L_0x02d7:
            goto L_0x02b6
        L_0x02d8:
            byte[] r4 = getMin
            byte r6 = r4[r8]
            byte r6 = (byte) r6
            r7 = r6 & 227(0xe3, float:3.18E-43)
            short r7 = (short) r7
            r9 = 4868(0x1304, float:6.822E-42)
            byte r4 = r4[r9]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r6, r7, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x02fa
            r4 = 14
            if (r12 < r4) goto L_0x02fa
            if (r12 > r10) goto L_0x02fa
            goto L_0x02d7
        L_0x02fa:
            byte[] r4 = getMin
            byte r6 = r4[r8]
            byte r6 = (byte) r6
            byte r4 = r4[r13]
            short r4 = (short) r4
            r7 = 9600(0x2580, float:1.3452E-41)
            short r7 = (short) r7
            java.lang.String r4 = setMax(r6, r4, r7)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x031c
            r4 = 15
            if (r12 < r4) goto L_0x031e
            r6 = 16
            if (r12 > r6) goto L_0x031e
            goto L_0x02d7
        L_0x031c:
            r4 = 15
        L_0x031e:
            byte[] r6 = getMin
            byte r7 = r6[r8]
            byte r7 = (byte) r7
            byte r6 = r6[r9]
            short r6 = (short) r6
            r14 = 10554(0x293a, float:1.479E-41)
            short r14 = (short) r14
            java.lang.String r6 = setMax(r7, r6, r14)
            java.lang.Class r6 = java.lang.Class.forName(r6)
            boolean r6 = r6.isInstance(r0)
            if (r6 == 0) goto L_0x0341
            r6 = 25
            if (r12 < r6) goto L_0x0343
            r7 = 26
            if (r12 > r7) goto L_0x0343
        L_0x033f:
            goto L_0x02b8
        L_0x0341:
            r6 = 25
        L_0x0343:
            byte[] r7 = getMin
            byte r4 = r7[r8]
            byte r4 = (byte) r4
            byte r7 = r7[r9]
            short r7 = (short) r7
            java.lang.String r4 = setMax(r4, r7, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0365
            r4 = 44
            if (r12 < r4) goto L_0x0365
            r4 = 50
            if (r12 > r4) goto L_0x0365
        L_0x0361:
            r5 = 104(0x68, float:1.46E-43)
            goto L_0x02b8
        L_0x0365:
            r4 = 51
            if (r12 < r4) goto L_0x0373
            r4 = 55
            if (r12 > r4) goto L_0x0373
            r4 = 55
            r5 = 55
            goto L_0x02b8
        L_0x0373:
            byte[] r4 = getMin
            byte r7 = r4[r8]
            byte r7 = (byte) r7
            byte r4 = r4[r9]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r7, r4, r14)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0392
            r4 = 67
            if (r12 < r4) goto L_0x0392
            r4 = 73
            if (r12 > r4) goto L_0x0394
            goto L_0x0361
        L_0x0392:
            r4 = 73
        L_0x0394:
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            r14 = 4869(0x1305, float:6.823E-42)
            byte r7 = r7[r14]
            short r7 = (short) r7
            r14 = 1139(0x473, float:1.596E-42)
            short r14 = (short) r14
            java.lang.String r7 = setMax(r9, r7, r14)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x03b8
            r7 = 68
            if (r12 < r7) goto L_0x03b8
            r7 = 69
            if (r12 > r7) goto L_0x03b8
            goto L_0x033f
        L_0x03b8:
            byte[] r7 = getMin
            byte r9 = r7[r8]
            byte r9 = (byte) r9
            r18 = 4869(0x1305, float:6.823E-42)
            byte r7 = r7[r18]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r9, r7, r14)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x03d9
            r7 = 105(0x69, float:1.47E-43)
            if (r12 < r7) goto L_0x03db
            r9 = 106(0x6a, float:1.49E-43)
            if (r12 > r9) goto L_0x03db
            goto L_0x03fe
        L_0x03d9:
            r7 = 105(0x69, float:1.47E-43)
        L_0x03db:
            byte[] r9 = getMin
            byte r14 = r9[r8]
            byte r14 = (byte) r14
            r17 = 4116(0x1014, float:5.768E-42)
            byte r9 = r9[r17]
            short r9 = (short) r9
            r4 = 4837(0x12e5, float:6.778E-42)
            short r4 = (short) r4
            java.lang.String r4 = setMax(r14, r9, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x0409
            r4 = 130(0x82, float:1.82E-43)
            if (r12 < r4) goto L_0x0409
            if (r12 > r5) goto L_0x0409
            r5 = 104(0x68, float:1.46E-43)
        L_0x03fe:
            r1.IsOverlapping = r0
            r1.getMax(r13)
            r7 = r5
            r5 = 1
            r9 = 9
            goto L_0x0125
        L_0x0409:
            throw r0
        L_0x040a:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0412
            throw r1
        L_0x0412:
            goto L_0x0414
        L_0x0413:
            throw r0
        L_0x0414:
            goto L_0x0413
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMax():void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x014c, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x0184, code lost:
        r1.getMax(18);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void setMax(@org.jetbrains.annotations.NotNull java.lang.String r18, @org.jetbrains.annotations.NotNull java.lang.String r19, @org.jetbrains.annotations.NotNull java.lang.String r20, @org.jetbrains.annotations.NotNull java.lang.String r21) {
        /*
            r17 = this;
            o.TypeConverter r7 = new o.TypeConverter
            r1 = r7
            r2 = r17
            r3 = r18
            r4 = r19
            r5 = r20
            r6 = r21
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r3, (java.lang.Object) r4, (java.lang.Object) r5, (java.lang.Object) r6)
            byte[] r0 = getMin
            r1 = 46
            byte r0 = r0[r1]
            byte r0 = (byte) r0
            r2 = 302(0x12e, float:4.23E-43)
            short r2 = (short) r2
            int r3 = length
            r3 = r3 | 162(0xa2, float:2.27E-43)
            short r3 = (short) r3
            java.lang.String r0 = setMax(r0, r2, r3)
            byte[] r2 = getMin
            r3 = 15
            byte r2 = r2[r3]
            byte r2 = (byte) r2
            short r4 = (short) r2
            r5 = r4 | 4577(0x11e1, float:6.414E-42)
            short r5 = (short) r5
            java.lang.String r2 = setMax(r2, r4, r5)
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ all -> 0x036b }
            r6 = 0
            r5[r6] = r2     // Catch:{ all -> 0x036b }
            byte[] r2 = getMin     // Catch:{ all -> 0x036b }
            r8 = 8
            byte r2 = r2[r8]     // Catch:{ all -> 0x036b }
            byte r2 = (byte) r2     // Catch:{ all -> 0x036b }
            byte[] r9 = getMin     // Catch:{ all -> 0x036b }
            byte r9 = r9[r4]     // Catch:{ all -> 0x036b }
            short r9 = (short) r9     // Catch:{ all -> 0x036b }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x036b }
            java.lang.String r2 = setMax(r2, r9, r10)     // Catch:{ all -> 0x036b }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x036b }
            byte[] r9 = getMin     // Catch:{ all -> 0x036b }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x036b }
            byte r9 = (byte) r9     // Catch:{ all -> 0x036b }
            byte[] r11 = getMin     // Catch:{ all -> 0x036b }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x036b }
            short r11 = (short) r11     // Catch:{ all -> 0x036b }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x036b }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x036b }
            java.lang.Class[] r11 = new java.lang.Class[r4]     // Catch:{ all -> 0x036b }
            byte[] r12 = getMin     // Catch:{ all -> 0x036b }
            byte r12 = r12[r8]     // Catch:{ all -> 0x036b }
            byte r12 = (byte) r12     // Catch:{ all -> 0x036b }
            byte[] r13 = getMin     // Catch:{ all -> 0x036b }
            byte r13 = r13[r4]     // Catch:{ all -> 0x036b }
            short r13 = (short) r13     // Catch:{ all -> 0x036b }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x036b }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x036b }
            r11[r6] = r12     // Catch:{ all -> 0x036b }
            java.lang.reflect.Method r2 = r2.getMethod(r9, r11)     // Catch:{ all -> 0x036b }
            java.lang.Object r0 = r2.invoke(r0, r5)     // Catch:{ all -> 0x036b }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x036b }
            int r2 = r0.length
            int[] r2 = new int[r2]
            r5 = 0
        L_0x0088:
            int r9 = r0.length
            if (r5 >= r9) goto L_0x012a
            r9 = r0[r5]
            java.lang.Object[] r11 = new java.lang.Object[r4]     // Catch:{ all -> 0x0121 }
            r11[r6] = r9     // Catch:{ all -> 0x0121 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0121 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0121 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0121 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0121 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0121 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0121 }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0121 }
            java.lang.String r9 = setMax(r9, r12, r14)     // Catch:{ all -> 0x0121 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0121 }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x0121 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0121 }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x0121 }
            short r15 = (short) r15     // Catch:{ all -> 0x0121 }
            r1 = 10257(0x2811, float:1.4373E-41)
            short r1 = (short) r1     // Catch:{ all -> 0x0121 }
            java.lang.String r1 = setMax(r12, r15, r1)     // Catch:{ all -> 0x0121 }
            java.lang.Class[] r12 = new java.lang.Class[r4]     // Catch:{ all -> 0x0121 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0121 }
            byte r15 = r15[r8]     // Catch:{ all -> 0x0121 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0121 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0121 }
            byte r3 = r16[r4]     // Catch:{ all -> 0x0121 }
            short r3 = (short) r3     // Catch:{ all -> 0x0121 }
            java.lang.String r3 = setMax(r15, r3, r10)     // Catch:{ all -> 0x0121 }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x0121 }
            r12[r6] = r3     // Catch:{ all -> 0x0121 }
            java.lang.reflect.Method r1 = r9.getMethod(r1, r12)     // Catch:{ all -> 0x0121 }
            r3 = 0
            java.lang.Object r1 = r1.invoke(r3, r11)     // Catch:{ all -> 0x0121 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0118 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0118 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0118 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0118 }
            byte r11 = r11[r13]     // Catch:{ all -> 0x0118 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0118 }
            java.lang.String r9 = setMax(r9, r11, r14)     // Catch:{ all -> 0x0118 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0118 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0118 }
            byte r11 = r11[r8]     // Catch:{ all -> 0x0118 }
            int r11 = r11 - r4
            byte r11 = (byte) r11     // Catch:{ all -> 0x0118 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0118 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0118 }
            short r12 = (short) r12     // Catch:{ all -> 0x0118 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0118 }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x0118 }
            java.lang.reflect.Method r9 = r9.getMethod(r11, r3)     // Catch:{ all -> 0x0118 }
            java.lang.Object r1 = r9.invoke(r1, r3)     // Catch:{ all -> 0x0118 }
            java.lang.Integer r1 = (java.lang.Integer) r1     // Catch:{ all -> 0x0118 }
            int r1 = r1.intValue()     // Catch:{ all -> 0x0118 }
            r2[r5] = r1
            int r5 = r5 + 1
            r1 = 46
            r3 = 15
            goto L_0x0088
        L_0x0118:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0120
            throw r1
        L_0x0120:
            throw r0
        L_0x0121:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0129
            throw r1
        L_0x0129:
            throw r0
        L_0x012a:
            r1 = 10
            r3 = 47
            r5 = 63
        L_0x0130:
            int r9 = r6 + 1
            r10 = 3
            r11 = 52
            r12 = 4
            r13 = 2
            r0 = r2[r6]     // Catch:{ all -> 0x01f4 }
            int r0 = r7.getMax(r0)     // Catch:{ all -> 0x01f4 }
            r6 = 18
            r14 = 7
            switch(r0) {
                case -23: goto L_0x01ed;
                case -22: goto L_0x01e9;
                case -21: goto L_0x01dc;
                case -20: goto L_0x01cf;
                case -19: goto L_0x01ca;
                case -18: goto L_0x01c6;
                case -17: goto L_0x01c1;
                case -16: goto L_0x01ae;
                case -15: goto L_0x01ab;
                case -14: goto L_0x01aa;
                case -13: goto L_0x01a7;
                case -12: goto L_0x01a4;
                case -11: goto L_0x0196;
                case -10: goto L_0x0189;
                case -9: goto L_0x0180;
                case -8: goto L_0x0178;
                case -7: goto L_0x0175;
                case -6: goto L_0x0172;
                case -5: goto L_0x016d;
                case -4: goto L_0x0167;
                case -3: goto L_0x0151;
                case -2: goto L_0x0148;
                case -1: goto L_0x0145;
                default: goto L_0x0143;
            }     // Catch:{ all -> 0x01f4 }
        L_0x0143:
            goto L_0x01f1
        L_0x0145:
            r6 = 42
            goto L_0x0130
        L_0x0148:
            java.lang.String r0 = "inputPin"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x01f4 }
        L_0x014c:
            r7.getMax(r12)     // Catch:{ all -> 0x01f4 }
            goto L_0x01f1
        L_0x0151:
            r7.setMax = r13     // Catch:{ all -> 0x01f4 }
            r7.getMax(r13)     // Catch:{ all -> 0x01f4 }
            r7.getMax(r10)     // Catch:{ all -> 0x01f4 }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x01f4 }
            r7.getMax(r10)     // Catch:{ all -> 0x01f4 }
            java.lang.Object r6 = r7.isInside     // Catch:{ all -> 0x01f4 }
            java.lang.String r6 = (java.lang.String) r6     // Catch:{ all -> 0x01f4 }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r6)     // Catch:{ all -> 0x01f4 }
            goto L_0x01f1
        L_0x0167:
            java.lang.String r0 = "verificationMethod"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x01f4 }
            goto L_0x014c
        L_0x016d:
            java.lang.String r0 = "securityId"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x01f4 }
            goto L_0x014c
        L_0x0172:
            r6 = 47
            goto L_0x0130
        L_0x0175:
            r6 = 40
            goto L_0x0130
        L_0x0178:
            r7.getMax(r8)     // Catch:{ all -> 0x01f4 }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x01f4 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01f4 }
            throw r0     // Catch:{ all -> 0x01f4 }
        L_0x0180:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01f4 }
            r7.setMax = r0     // Catch:{ all -> 0x01f4 }
        L_0x0184:
            r7.getMax(r6)     // Catch:{ all -> 0x01f4 }
            goto L_0x01f1
        L_0x0189:
            r7.setMax = r4     // Catch:{ all -> 0x01f4 }
            r7.getMax(r13)     // Catch:{ all -> 0x01f4 }
            r7.getMax(r14)     // Catch:{ all -> 0x01f4 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01f4 }
            invoke = r0     // Catch:{ all -> 0x01f4 }
            goto L_0x01f1
        L_0x0196:
            r0 = 34
            r7.getMax(r0)     // Catch:{ all -> 0x01f4 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01f4 }
            if (r0 != 0) goto L_0x01f1
            r0 = 36
            r6 = 36
            goto L_0x0130
        L_0x01a4:
            r6 = 10
            goto L_0x0130
        L_0x01a7:
            r6 = 46
            goto L_0x0130
        L_0x01aa:
            return
        L_0x01ab:
            r6 = 65
            goto L_0x0130
        L_0x01ae:
            r0 = 9
            r7.getMax(r0)     // Catch:{ all -> 0x01f4 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01f4 }
            if (r0 == 0) goto L_0x01be
            if (r0 == r4) goto L_0x01ba
            goto L_0x01be
        L_0x01ba:
            r6 = 52
            goto L_0x0130
        L_0x01be:
            r6 = 1
            goto L_0x0130
        L_0x01c1:
            java.lang.String r0 = "sendOtpStrategy"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x01f4 }
            goto L_0x014c
        L_0x01c6:
            r6 = 12
            goto L_0x0130
        L_0x01ca:
            int r0 = invoke     // Catch:{ all -> 0x01f4 }
            r7.setMax = r0     // Catch:{ all -> 0x01f4 }
            goto L_0x0184
        L_0x01cf:
            r7.setMax = r4     // Catch:{ all -> 0x01f4 }
            r7.getMax(r13)     // Catch:{ all -> 0x01f4 }
            r7.getMax(r14)     // Catch:{ all -> 0x01f4 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01f4 }
            invokeSuspend = r0     // Catch:{ all -> 0x01f4 }
            goto L_0x01f1
        L_0x01dc:
            r7.getMax(r3)     // Catch:{ all -> 0x01f4 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01f4 }
            if (r0 != 0) goto L_0x01f1
            r0 = 89
            r6 = 89
            goto L_0x0130
        L_0x01e9:
            r6 = 38
            goto L_0x0130
        L_0x01ed:
            r6 = 63
            goto L_0x0130
        L_0x01f1:
            r6 = r9
            goto L_0x0130
        L_0x01f4:
            r0 = move-exception
            byte[] r6 = getMin
            byte r14 = r6[r8]
            byte r14 = (byte) r14
            r15 = 4868(0x1304, float:6.822E-42)
            byte r4 = r6[r15]
            short r4 = (short) r4
            r16 = 15
            byte r6 = r6[r16]
            short r6 = (short) r6
            java.lang.String r4 = setMax(r14, r4, r6)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            r6 = 49
            r14 = 37
            r16 = 45
            if (r4 == 0) goto L_0x0220
            if (r9 < r13) goto L_0x0220
            if (r9 > r1) goto L_0x0220
        L_0x021c:
            r13 = 15
            goto L_0x035e
        L_0x0220:
            byte[] r4 = getMin
            byte r13 = r4[r8]
            byte r13 = (byte) r13
            r1 = r13 & 227(0xe3, float:3.18E-43)
            short r1 = (short) r1
            byte r4 = r4[r15]
            short r4 = (short) r4
            java.lang.String r1 = setMax(r13, r1, r4)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x023e
            if (r9 < r10) goto L_0x023e
            if (r9 > r12) goto L_0x023e
            goto L_0x021c
        L_0x023e:
            byte[] r1 = getMin
            byte r4 = r1[r8]
            byte r4 = (byte) r4
            r10 = 4869(0x1305, float:6.823E-42)
            byte r1 = r1[r10]
            short r1 = (short) r1
            r12 = 1139(0x473, float:1.596E-42)
            short r12 = (short) r12
            java.lang.String r1 = setMax(r4, r1, r12)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x0263
            if (r9 < r3) goto L_0x0263
            if (r9 > r11) goto L_0x0263
        L_0x025d:
            r13 = 15
        L_0x025f:
            r16 = 37
            goto L_0x035e
        L_0x0263:
            byte[] r1 = getMin
            byte r4 = r1[r8]
            byte r4 = (byte) r4
            r13 = 4116(0x1014, float:5.768E-42)
            byte r1 = r1[r13]
            short r1 = (short) r1
            r13 = 4837(0x12e5, float:6.778E-42)
            short r13 = (short) r13
            java.lang.String r1 = setMax(r4, r1, r13)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x0283
            if (r9 < r6) goto L_0x0283
            if (r9 > r11) goto L_0x0283
            goto L_0x021c
        L_0x0283:
            byte[] r1 = getMin
            byte r4 = r1[r8]
            byte r4 = (byte) r4
            r13 = 1156(0x484, float:1.62E-42)
            byte r1 = r1[r13]
            int r1 = -r1
            short r1 = (short) r1
            r13 = 5857(0x16e1, float:8.207E-42)
            short r13 = (short) r13
            java.lang.String r1 = setMax(r4, r1, r13)
            java.lang.Class r1 = java.lang.Class.forName(r1)
            boolean r1 = r1.isInstance(r0)
            if (r1 == 0) goto L_0x02a7
            r1 = 50
            if (r9 < r1) goto L_0x02a7
            if (r9 > r11) goto L_0x02a7
            goto L_0x021c
        L_0x02a7:
            r1 = 60
            if (r9 < r1) goto L_0x02b5
            if (r9 > r5) goto L_0x02b5
            r1 = 11
            r13 = 15
            r16 = 11
            goto L_0x035e
        L_0x02b5:
            byte[] r4 = getMin
            byte r11 = r4[r8]
            byte r11 = (byte) r11
            byte r4 = r4[r10]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r11, r4, r12)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x02d4
            r4 = 53
            if (r9 < r4) goto L_0x02d4
            r4 = 54
            if (r9 > r4) goto L_0x02d4
            goto L_0x025d
        L_0x02d4:
            byte[] r4 = getMin
            byte r10 = r4[r8]
            byte r10 = (byte) r10
            r11 = 13
            byte r4 = r4[r11]
            short r4 = (short) r4
            int r11 = length
            r11 = r11 | 7588(0x1da4, float:1.0633E-41)
            short r11 = (short) r11
            java.lang.String r4 = setMax(r10, r4, r11)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x02f9
            r4 = 54
            if (r9 < r4) goto L_0x02f9
            if (r9 > r5) goto L_0x02f9
            goto L_0x025d
        L_0x02f9:
            byte[] r4 = getMin
            byte r10 = r4[r8]
            byte r10 = (byte) r10
            r11 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r11]
            short r4 = (short) r4
            r11 = 10605(0x296d, float:1.4861E-41)
            short r11 = (short) r11
            java.lang.String r4 = setMax(r10, r4, r11)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x031c
            r4 = 56
            if (r9 < r4) goto L_0x031c
            if (r9 > r5) goto L_0x031c
            goto L_0x021c
        L_0x031c:
            byte[] r4 = getMin
            byte r10 = r4[r8]
            byte r10 = (byte) r10
            byte r12 = r4[r15]
            short r12 = (short) r12
            r13 = 15
            byte r4 = r4[r13]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r10, r12, r4)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x033e
            r4 = 57
            if (r9 < r4) goto L_0x033e
            if (r9 > r5) goto L_0x033e
            goto L_0x035e
        L_0x033e:
            byte[] r4 = getMin
            byte r10 = r4[r8]
            byte r10 = (byte) r10
            r12 = 7392(0x1ce0, float:1.0358E-41)
            byte r4 = r4[r12]
            short r4 = (short) r4
            java.lang.String r4 = setMax(r10, r4, r11)
            java.lang.Class r4 = java.lang.Class.forName(r4)
            boolean r4 = r4.isInstance(r0)
            if (r4 == 0) goto L_0x036a
            r4 = 59
            if (r9 < r4) goto L_0x036a
            if (r9 > r1) goto L_0x036a
            goto L_0x025f
        L_0x035e:
            r7.IsOverlapping = r0
            r7.getMax(r6)
            r6 = r16
            r1 = 10
            r4 = 1
            goto L_0x0130
        L_0x036a:
            throw r0
        L_0x036b:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0373
            throw r1
        L_0x0373:
            goto L_0x0375
        L_0x0374:
            throw r0
        L_0x0375:
            goto L_0x0374
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMax(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x014a, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:54:0x01b5, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x0294, code lost:
        if (r13 <= 70) goto L_0x020a;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void setMax(@org.jetbrains.annotations.NotNull java.lang.String r19, @org.jetbrains.annotations.NotNull java.lang.String r20, @org.jetbrains.annotations.NotNull java.lang.String r21, boolean r22) {
        /*
            r18 = this;
            o.TypeConverter r7 = new o.TypeConverter
            r1 = r7
            r2 = r18
            r3 = r19
            r4 = r20
            r5 = r21
            r6 = r22
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r3, (java.lang.Object) r4, (java.lang.Object) r5, (int) r6)
            byte[] r0 = getMin
            r1 = 46
            byte r0 = r0[r1]
            byte r0 = (byte) r0
            r1 = r0 | 260(0x104, float:3.64E-43)
            short r1 = (short) r1
            r2 = 10270(0x281e, float:1.4391E-41)
            short r2 = (short) r2
            java.lang.String r0 = setMax(r0, r1, r2)
            byte[] r1 = getMin
            r2 = 15
            byte r1 = r1[r2]
            byte r1 = (byte) r1
            short r3 = (short) r1
            r4 = r3 | 4577(0x11e1, float:6.414E-42)
            short r4 = (short) r4
            java.lang.String r1 = setMax(r1, r3, r4)
            r3 = 1
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ all -> 0x0356 }
            r5 = 0
            r4[r5] = r1     // Catch:{ all -> 0x0356 }
            byte[] r1 = getMin     // Catch:{ all -> 0x0356 }
            r6 = 8
            byte r1 = r1[r6]     // Catch:{ all -> 0x0356 }
            byte r1 = (byte) r1     // Catch:{ all -> 0x0356 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0356 }
            byte r8 = r8[r3]     // Catch:{ all -> 0x0356 }
            short r8 = (short) r8     // Catch:{ all -> 0x0356 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x0356 }
            java.lang.String r1 = setMax(r1, r8, r9)     // Catch:{ all -> 0x0356 }
            java.lang.Class r1 = java.lang.Class.forName(r1)     // Catch:{ all -> 0x0356 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0356 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x0356 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0356 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0356 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x0356 }
            short r10 = (short) r10     // Catch:{ all -> 0x0356 }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x0356 }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x0356 }
            java.lang.Class[] r10 = new java.lang.Class[r3]     // Catch:{ all -> 0x0356 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0356 }
            byte r11 = r11[r6]     // Catch:{ all -> 0x0356 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0356 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0356 }
            byte r12 = r12[r3]     // Catch:{ all -> 0x0356 }
            short r12 = (short) r12     // Catch:{ all -> 0x0356 }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x0356 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0356 }
            r10[r5] = r11     // Catch:{ all -> 0x0356 }
            java.lang.reflect.Method r1 = r1.getMethod(r8, r10)     // Catch:{ all -> 0x0356 }
            java.lang.Object r0 = r1.invoke(r0, r4)     // Catch:{ all -> 0x0356 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0356 }
            int r1 = r0.length
            int[] r1 = new int[r1]
            r4 = 0
        L_0x0086:
            int r8 = r0.length
            if (r4 >= r8) goto L_0x0126
            r8 = r0[r4]
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ all -> 0x011d }
            r10[r5] = r8     // Catch:{ all -> 0x011d }
            byte[] r8 = getMin     // Catch:{ all -> 0x011d }
            byte r8 = r8[r6]     // Catch:{ all -> 0x011d }
            byte r8 = (byte) r8     // Catch:{ all -> 0x011d }
            byte[] r11 = getMin     // Catch:{ all -> 0x011d }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x011d }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x011d }
            r12 = 1123(0x463, float:1.574E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x011d }
            java.lang.String r8 = setMax(r8, r11, r12)     // Catch:{ all -> 0x011d }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x011d }
            r11 = 74
            byte r11 = (byte) r11     // Catch:{ all -> 0x011d }
            byte[] r13 = getMin     // Catch:{ all -> 0x011d }
            r14 = 32
            byte r13 = r13[r14]     // Catch:{ all -> 0x011d }
            short r13 = (short) r13     // Catch:{ all -> 0x011d }
            r14 = 10257(0x2811, float:1.4373E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x011d }
            java.lang.String r11 = setMax(r11, r13, r14)     // Catch:{ all -> 0x011d }
            java.lang.Class[] r13 = new java.lang.Class[r3]     // Catch:{ all -> 0x011d }
            byte[] r14 = getMin     // Catch:{ all -> 0x011d }
            byte r14 = r14[r6]     // Catch:{ all -> 0x011d }
            byte r14 = (byte) r14     // Catch:{ all -> 0x011d }
            byte[] r15 = getMin     // Catch:{ all -> 0x011d }
            byte r15 = r15[r3]     // Catch:{ all -> 0x011d }
            short r15 = (short) r15     // Catch:{ all -> 0x011d }
            java.lang.String r14 = setMax(r14, r15, r9)     // Catch:{ all -> 0x011d }
            java.lang.Class r14 = java.lang.Class.forName(r14)     // Catch:{ all -> 0x011d }
            r13[r5] = r14     // Catch:{ all -> 0x011d }
            java.lang.reflect.Method r8 = r8.getMethod(r11, r13)     // Catch:{ all -> 0x011d }
            r11 = 0
            java.lang.Object r8 = r8.invoke(r11, r10)     // Catch:{ all -> 0x011d }
            byte[] r10 = getMin     // Catch:{ all -> 0x0114 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x0114 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0114 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0114 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0114 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0114 }
            java.lang.String r10 = setMax(r10, r13, r12)     // Catch:{ all -> 0x0114 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0114 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0114 }
            byte r12 = r12[r6]     // Catch:{ all -> 0x0114 }
            int r12 = r12 - r3
            byte r12 = (byte) r12     // Catch:{ all -> 0x0114 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0114 }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x0114 }
            short r13 = (short) r13     // Catch:{ all -> 0x0114 }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x0114 }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x0114 }
            java.lang.reflect.Method r10 = r10.getMethod(r12, r11)     // Catch:{ all -> 0x0114 }
            java.lang.Object r8 = r10.invoke(r8, r11)     // Catch:{ all -> 0x0114 }
            java.lang.Integer r8 = (java.lang.Integer) r8     // Catch:{ all -> 0x0114 }
            int r8 = r8.intValue()     // Catch:{ all -> 0x0114 }
            r1[r4] = r8
            int r4 = r4 + 1
            goto L_0x0086
        L_0x0114:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011c
            throw r1
        L_0x011c:
            throw r0
        L_0x011d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0125
            throw r1
        L_0x0125:
            throw r0
        L_0x0126:
            r4 = 53
            r10 = 66
            r11 = 21
            r12 = 5
        L_0x012d:
            int r13 = r5 + 1
            r0 = r1[r5]     // Catch:{ all -> 0x01e3 }
            int r0 = r7.getMax(r0)     // Catch:{ all -> 0x01e3 }
            r5 = 18
            r14 = 7
            r15 = 47
            r9 = 4
            r8 = 2
            switch(r0) {
                case -23: goto L_0x01dd;
                case -22: goto L_0x01d8;
                case -21: goto L_0x01d3;
                case -20: goto L_0x01cf;
                case -19: goto L_0x01b9;
                case -18: goto L_0x01b1;
                case -17: goto L_0x01ad;
                case -16: goto L_0x01a1;
                case -15: goto L_0x01a0;
                case -14: goto L_0x019d;
                case -13: goto L_0x019a;
                case -12: goto L_0x018c;
                case -11: goto L_0x017f;
                case -10: goto L_0x017a;
                case -9: goto L_0x0177;
                case -8: goto L_0x016f;
                case -7: goto L_0x016c;
                case -6: goto L_0x0169;
                case -5: goto L_0x015d;
                case -4: goto L_0x014f;
                case -3: goto L_0x0146;
                case -2: goto L_0x0143;
                case -1: goto L_0x0141;
                default: goto L_0x013f;
            }     // Catch:{ all -> 0x01e3 }
        L_0x013f:
            goto L_0x01e0
        L_0x0141:
            r5 = 1
            goto L_0x012d
        L_0x0143:
            r5 = 53
            goto L_0x012d
        L_0x0146:
            int r0 = invoke     // Catch:{ all -> 0x01e3 }
            r7.setMax = r0     // Catch:{ all -> 0x01e3 }
        L_0x014a:
            r7.getMax(r5)     // Catch:{ all -> 0x01e3 }
            goto L_0x01e0
        L_0x014f:
            r7.setMax = r3     // Catch:{ all -> 0x01e3 }
            r7.getMax(r8)     // Catch:{ all -> 0x01e3 }
            r7.getMax(r14)     // Catch:{ all -> 0x01e3 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01e3 }
            invokeSuspend = r0     // Catch:{ all -> 0x01e3 }
            goto L_0x01e0
        L_0x015d:
            r7.getMax(r15)     // Catch:{ all -> 0x01e3 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01e3 }
            if (r0 != 0) goto L_0x01e0
            r0 = 19
            r5 = 19
            goto L_0x012d
        L_0x0169:
            r5 = 50
            goto L_0x012d
        L_0x016c:
            r5 = 67
            goto L_0x012d
        L_0x016f:
            r7.getMax(r6)     // Catch:{ all -> 0x01e3 }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x01e3 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01e3 }
            throw r0     // Catch:{ all -> 0x01e3 }
        L_0x0177:
            r5 = 70
            goto L_0x012d
        L_0x017a:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01e3 }
            r7.setMax = r0     // Catch:{ all -> 0x01e3 }
            goto L_0x014a
        L_0x017f:
            r7.setMax = r3     // Catch:{ all -> 0x01e3 }
            r7.getMax(r8)     // Catch:{ all -> 0x01e3 }
            r7.getMax(r14)     // Catch:{ all -> 0x01e3 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01e3 }
            invoke = r0     // Catch:{ all -> 0x01e3 }
            goto L_0x01e0
        L_0x018c:
            r0 = 34
            r7.getMax(r0)     // Catch:{ all -> 0x01e3 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01e3 }
            if (r0 != 0) goto L_0x01e0
            r0 = 48
            r5 = 48
            goto L_0x012d
        L_0x019a:
            r5 = 66
            goto L_0x012d
        L_0x019d:
            r5 = 51
            goto L_0x012d
        L_0x01a0:
            return
        L_0x01a1:
            r7.getMax(r15)     // Catch:{ all -> 0x01e3 }
            int r0 = r7.setMin     // Catch:{ all -> 0x01e3 }
            if (r0 != 0) goto L_0x01e0
            r0 = 65
            r5 = 65
            goto L_0x012d
        L_0x01ad:
            r5 = 21
            goto L_0x012d
        L_0x01b1:
            java.lang.String r0 = "securityId"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x01e3 }
        L_0x01b5:
            r7.getMax(r9)     // Catch:{ all -> 0x01e3 }
            goto L_0x01e0
        L_0x01b9:
            r7.setMax = r8     // Catch:{ all -> 0x01e3 }
            r7.getMax(r8)     // Catch:{ all -> 0x01e3 }
            r0 = 3
            r7.getMax(r0)     // Catch:{ all -> 0x01e3 }
            java.lang.Object r5 = r7.isInside     // Catch:{ all -> 0x01e3 }
            r7.getMax(r0)     // Catch:{ all -> 0x01e3 }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x01e3 }
            java.lang.String r0 = (java.lang.String) r0     // Catch:{ all -> 0x01e3 }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, r0)     // Catch:{ all -> 0x01e3 }
            goto L_0x01e0
        L_0x01cf:
            r5 = 22
            goto L_0x012d
        L_0x01d3:
            java.lang.String r0 = "inputPin"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x01e3 }
            goto L_0x01b5
        L_0x01d8:
            java.lang.String r0 = "pubKey"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x01e3 }
            goto L_0x01b5
        L_0x01dd:
            r5 = 5
            goto L_0x012d
        L_0x01e0:
            r5 = r13
            goto L_0x012d
        L_0x01e3:
            r0 = move-exception
            byte[] r5 = getMin
            byte r8 = r5[r6]
            byte r8 = (byte) r8
            r9 = 13
            byte r5 = r5[r9]
            short r5 = (short) r5
            int r14 = length
            r14 = r14 | 7588(0x1da4, float:1.0633E-41)
            short r14 = (short) r14
            java.lang.String r5 = setMax(r8, r5, r14)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            r8 = 49
            r14 = 20
            if (r5 == 0) goto L_0x020e
            if (r13 < r12) goto L_0x020e
            r5 = 6
            if (r13 > r5) goto L_0x020e
        L_0x020a:
            r5 = 20
            goto L_0x0349
        L_0x020e:
            byte[] r5 = getMin
            byte r15 = r5[r6]
            byte r15 = (byte) r15
            r16 = 4868(0x1304, float:6.822E-42)
            byte r5 = r5[r16]
            short r5 = (short) r5
            r3 = 10554(0x293a, float:1.479E-41)
            short r3 = (short) r3
            java.lang.String r3 = setMax(r15, r5, r3)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0231
            if (r13 < r2) goto L_0x0231
            if (r13 > r14) goto L_0x0231
        L_0x022d:
            r5 = 49
            goto L_0x0349
        L_0x0231:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r15 = 4869(0x1305, float:6.823E-42)
            byte r3 = r3[r15]
            short r3 = (short) r3
            r2 = 1139(0x473, float:1.596E-42)
            short r2 = (short) r2
            java.lang.String r3 = setMax(r5, r3, r2)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0253
            if (r13 < r4) goto L_0x0253
            r3 = 54
            if (r13 > r3) goto L_0x0253
            goto L_0x022d
        L_0x0253:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r16 = 4116(0x1014, float:5.768E-42)
            byte r3 = r3[r16]
            short r3 = (short) r3
            r4 = 4837(0x12e5, float:6.778E-42)
            short r4 = (short) r4
            java.lang.String r3 = setMax(r5, r3, r4)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0275
            r3 = 61
            if (r13 < r3) goto L_0x0275
            if (r13 > r10) goto L_0x0275
            goto L_0x020a
        L_0x0275:
            byte[] r3 = getMin
            byte r4 = r3[r6]
            byte r4 = (byte) r4
            byte r3 = r3[r11]
            short r3 = (short) r3
            r5 = 10638(0x298e, float:1.4907E-41)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r4, r3, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0298
            r3 = 67
            r4 = 70
            if (r13 < r3) goto L_0x029c
            if (r13 > r4) goto L_0x029c
            goto L_0x020a
        L_0x0298:
            r3 = 67
            r4 = 70
        L_0x029c:
            byte[] r5 = getMin
            byte r3 = r5[r6]
            byte r3 = (byte) r3
            r17 = 7392(0x1ce0, float:1.0358E-41)
            byte r5 = r5[r17]
            short r5 = (short) r5
            r4 = 10605(0x296d, float:1.4861E-41)
            short r4 = (short) r4
            java.lang.String r3 = setMax(r3, r5, r4)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x02c1
            r3 = 68
            if (r13 < r3) goto L_0x02c1
            r3 = 69
            if (r13 > r3) goto L_0x02c1
            goto L_0x022d
        L_0x02c1:
            byte[] r3 = getMin
            byte r4 = r3[r6]
            byte r4 = (byte) r4
            byte r3 = r3[r15]
            short r3 = (short) r3
            java.lang.String r3 = setMax(r4, r3, r2)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x02e1
            r3 = 71
            if (r13 < r3) goto L_0x02e1
            r3 = 72
            if (r13 > r3) goto L_0x02e1
            goto L_0x020a
        L_0x02e1:
            byte[] r3 = getMin
            byte r4 = r3[r6]
            byte r4 = (byte) r4
            byte r3 = r3[r9]
            short r3 = (short) r3
            int r5 = length
            r5 = r5 | 7588(0x1da4, float:1.0633E-41)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r4, r3, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0306
            r3 = 72
            if (r13 < r3) goto L_0x0306
            r3 = 73
            if (r13 > r3) goto L_0x0306
            goto L_0x022d
        L_0x0306:
            byte[] r3 = getMin
            byte r4 = r3[r6]
            byte r4 = (byte) r4
            byte r3 = r3[r8]
            short r3 = (short) r3
            r5 = 9600(0x2580, float:1.3452E-41)
            short r5 = (short) r5
            java.lang.String r3 = setMax(r4, r3, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0329
            r3 = 74
            if (r13 < r3) goto L_0x0329
            r3 = 78
            if (r13 > r3) goto L_0x0329
            goto L_0x020a
        L_0x0329:
            byte[] r3 = getMin
            byte r4 = r3[r6]
            byte r4 = (byte) r4
            byte r3 = r3[r15]
            short r3 = (short) r3
            java.lang.String r2 = setMax(r4, r3, r2)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x0355
            r2 = 75
            if (r13 < r2) goto L_0x0355
            r2 = 78
            if (r13 > r2) goto L_0x0355
            goto L_0x020a
        L_0x0349:
            r7.IsOverlapping = r0
            r7.getMax(r8)
            r2 = 15
            r3 = 1
            r4 = 53
            goto L_0x012d
        L_0x0355:
            throw r0
        L_0x0356:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x035e
            throw r1
        L_0x035e:
            goto L_0x0360
        L_0x035f:
            throw r0
        L_0x0360:
            goto L_0x035f
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMax(java.lang.String, java.lang.String, java.lang.String, boolean):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void setMin() {
        /*
            r18 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r18
            r1.<init>(r2)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = 130(0x82, float:1.82E-43)
            short r3 = (short) r3
            r4 = 14176(0x3760, float:1.9865E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x027c }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x027c }
            byte[] r3 = getMin     // Catch:{ all -> 0x027c }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x027c }
            byte r3 = (byte) r3     // Catch:{ all -> 0x027c }
            byte[] r9 = getMin     // Catch:{ all -> 0x027c }
            byte r9 = r9[r5]     // Catch:{ all -> 0x027c }
            short r9 = (short) r9     // Catch:{ all -> 0x027c }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x027c }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x027c }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x027c }
            byte[] r9 = getMin     // Catch:{ all -> 0x027c }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x027c }
            byte r9 = (byte) r9     // Catch:{ all -> 0x027c }
            byte[] r11 = getMin     // Catch:{ all -> 0x027c }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x027c }
            short r11 = (short) r11     // Catch:{ all -> 0x027c }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x027c }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x027c }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x027c }
            byte[] r12 = getMin     // Catch:{ all -> 0x027c }
            byte r12 = r12[r8]     // Catch:{ all -> 0x027c }
            byte r12 = (byte) r12     // Catch:{ all -> 0x027c }
            byte[] r13 = getMin     // Catch:{ all -> 0x027c }
            byte r13 = r13[r5]     // Catch:{ all -> 0x027c }
            short r13 = (short) r13     // Catch:{ all -> 0x027c }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x027c }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x027c }
            r11[r7] = r12     // Catch:{ all -> 0x027c }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x027c }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x027c }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x027c }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x007d:
            int r9 = r0.length
            r11 = 32
            if (r6 >= r9) goto L_0x011f
            r9 = r0[r6]
            java.lang.Object[] r12 = new java.lang.Object[r5]     // Catch:{ all -> 0x0116 }
            r12[r7] = r9     // Catch:{ all -> 0x0116 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0116 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0116 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            r14 = 4119(0x1017, float:5.772E-42)
            byte r13 = r13[r14]     // Catch:{ all -> 0x0116 }
            int r13 = -r13
            short r13 = (short) r13     // Catch:{ all -> 0x0116 }
            r15 = 1123(0x463, float:1.574E-42)
            short r15 = (short) r15     // Catch:{ all -> 0x0116 }
            java.lang.String r9 = setMax(r9, r13, r15)     // Catch:{ all -> 0x0116 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0116 }
            r13 = 74
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0116 }
            byte r11 = r16[r11]     // Catch:{ all -> 0x0116 }
            short r11 = (short) r11     // Catch:{ all -> 0x0116 }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x0116 }
            java.lang.String r4 = setMax(r13, r11, r4)     // Catch:{ all -> 0x0116 }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x0116 }
            byte[] r13 = getMin     // Catch:{ all -> 0x0116 }
            byte r13 = r13[r8]     // Catch:{ all -> 0x0116 }
            byte r13 = (byte) r13     // Catch:{ all -> 0x0116 }
            byte[] r17 = getMin     // Catch:{ all -> 0x0116 }
            byte r14 = r17[r5]     // Catch:{ all -> 0x0116 }
            short r14 = (short) r14     // Catch:{ all -> 0x0116 }
            java.lang.String r13 = setMax(r13, r14, r10)     // Catch:{ all -> 0x0116 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0116 }
            r11[r7] = r13     // Catch:{ all -> 0x0116 }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r11)     // Catch:{ all -> 0x0116 }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r12)     // Catch:{ all -> 0x0116 }
            byte[] r11 = getMin     // Catch:{ all -> 0x010d }
            byte r11 = r11[r8]     // Catch:{ all -> 0x010d }
            byte r11 = (byte) r11     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x010d }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x010d }
            java.lang.String r11 = setMax(r11, r12, r15)     // Catch:{ all -> 0x010d }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x010d }
            byte[] r12 = getMin     // Catch:{ all -> 0x010d }
            byte r12 = r12[r8]     // Catch:{ all -> 0x010d }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x010d }
            byte[] r13 = getMin     // Catch:{ all -> 0x010d }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010d }
            short r13 = (short) r13     // Catch:{ all -> 0x010d }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010d }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010d }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x010d }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x010d }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x010d }
            int r4 = r4.intValue()     // Catch:{ all -> 0x010d }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            goto L_0x007d
        L_0x010d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0115
            throw r1
        L_0x0115:
            throw r0
        L_0x0116:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011e
            throw r1
        L_0x011e:
            throw r0
        L_0x011f:
            r4 = 39
            r6 = 7
            r9 = 4
            r10 = 2
        L_0x0124:
            int r12 = r7 + 1
            r0 = r3[r7]     // Catch:{ all -> 0x01bf }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x01bf }
            r7 = 3
            switch(r0) {
                case -14: goto L_0x01b9;
                case -13: goto L_0x01a2;
                case -12: goto L_0x0193;
                case -11: goto L_0x017f;
                case -10: goto L_0x016b;
                case -9: goto L_0x0169;
                case -8: goto L_0x0166;
                case -7: goto L_0x0158;
                case -6: goto L_0x014b;
                case -5: goto L_0x0140;
                case -4: goto L_0x013d;
                case -3: goto L_0x013c;
                case -2: goto L_0x0134;
                case -1: goto L_0x0132;
                default: goto L_0x0130;
            }     // Catch:{ all -> 0x01bf }
        L_0x0130:
            goto L_0x01bc
        L_0x0132:
            r7 = 4
            goto L_0x0124
        L_0x0134:
            r1.getMax(r8)     // Catch:{ all -> 0x01bf }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01bf }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x01bf }
            throw r0     // Catch:{ all -> 0x01bf }
        L_0x013c:
            return
        L_0x013d:
            r7 = 32
            goto L_0x0124
        L_0x0140:
            int r0 = invokeSuspend     // Catch:{ all -> 0x01bf }
            r1.setMax = r0     // Catch:{ all -> 0x01bf }
            r0 = 18
            r1.getMax(r0)     // Catch:{ all -> 0x01bf }
            goto L_0x01bc
        L_0x014b:
            r1.setMax = r5     // Catch:{ all -> 0x01bf }
            r1.getMax(r10)     // Catch:{ all -> 0x01bf }
            r1.getMax(r6)     // Catch:{ all -> 0x01bf }
            int r0 = r1.setMin     // Catch:{ all -> 0x01bf }
            invoke = r0     // Catch:{ all -> 0x01bf }
            goto L_0x01bc
        L_0x0158:
            r0 = 34
            r1.getMax(r0)     // Catch:{ all -> 0x01bf }
            int r0 = r1.setMin     // Catch:{ all -> 0x01bf }
            if (r0 != 0) goto L_0x01bc
            r0 = 31
            r7 = 31
            goto L_0x0124
        L_0x0166:
            r7 = 39
            goto L_0x0124
        L_0x0169:
            r7 = 2
            goto L_0x0124
        L_0x016b:
            r1.setMax = r5     // Catch:{ all -> 0x01bf }
            r1.getMax(r10)     // Catch:{ all -> 0x01bf }
            r1.getMax(r7)     // Catch:{ all -> 0x01bf }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01bf }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x01bf }
            o.clearCache r0 = r0.isInside     // Catch:{ all -> 0x01bf }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01bf }
        L_0x017b:
            r1.getMax(r9)     // Catch:{ all -> 0x01bf }
            goto L_0x01bc
        L_0x017f:
            o.onValidateSchema$length r0 = new o.onValidateSchema$length     // Catch:{ all -> 0x01bf }
            r1.setMax = r5     // Catch:{ all -> 0x01bf }
            r1.getMax(r10)     // Catch:{ all -> 0x01bf }
            r1.getMax(r7)     // Catch:{ all -> 0x01bf }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x01bf }
            o.onValidateSchema r7 = (o.onValidateSchema) r7     // Catch:{ all -> 0x01bf }
            r0.<init>(r7)     // Catch:{ all -> 0x01bf }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01bf }
            goto L_0x017b
        L_0x0193:
            r1.setMax = r5     // Catch:{ all -> 0x01bf }
            r1.getMax(r10)     // Catch:{ all -> 0x01bf }
            r1.getMax(r7)     // Catch:{ all -> 0x01bf }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01bf }
            o.setGlobalUserData r0 = (o.setGlobalUserData) r0     // Catch:{ all -> 0x01bf }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x01bf }
            goto L_0x017b
        L_0x01a2:
            r1.setMax = r10     // Catch:{ all -> 0x01bf }
            r1.getMax(r10)     // Catch:{ all -> 0x01bf }
            r1.getMax(r7)     // Catch:{ all -> 0x01bf }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x01bf }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x01bf }
            r1.getMax(r7)     // Catch:{ all -> 0x01bf }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x01bf }
            o.setGlobalUserData r7 = (o.setGlobalUserData) r7     // Catch:{ all -> 0x01bf }
            r0.execute(r7)     // Catch:{ all -> 0x01bf }
            goto L_0x01bc
        L_0x01b9:
            r7 = 7
            goto L_0x0124
        L_0x01bc:
            r7 = r12
            goto L_0x0124
        L_0x01bf:
            r0 = move-exception
            byte[] r7 = getMin
            byte r13 = r7[r8]
            byte r13 = (byte) r13
            r14 = 4869(0x1305, float:6.823E-42)
            byte r7 = r7[r14]
            short r7 = (short) r7
            r14 = 1139(0x473, float:1.596E-42)
            short r14 = (short) r14
            java.lang.String r7 = setMax(r13, r7, r14)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x01e5
            if (r12 < r6) goto L_0x01e5
            if (r12 > r8) goto L_0x01e5
            r7 = 40
        L_0x01e1:
            r16 = 15
            goto L_0x0272
        L_0x01e5:
            byte[] r7 = getMin
            byte r13 = r7[r8]
            byte r13 = (byte) r13
            r14 = r13 & 227(0xe3, float:3.18E-43)
            short r14 = (short) r14
            r15 = 4868(0x1304, float:6.822E-42)
            byte r7 = r7[r15]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r13, r14, r7)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x020a
            r7 = 26
            if (r12 < r7) goto L_0x020a
            r7 = 27
            if (r12 > r7) goto L_0x020a
            r7 = 1
            goto L_0x01e1
        L_0x020a:
            byte[] r7 = getMin
            byte r13 = r7[r8]
            byte r13 = (byte) r13
            byte r14 = r7[r15]
            short r14 = (short) r14
            r16 = 15
            byte r7 = r7[r16]
            short r7 = (short) r7
            java.lang.String r7 = setMax(r13, r14, r7)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x022d
            r7 = 33
            if (r12 < r7) goto L_0x022d
            if (r12 > r4) goto L_0x022d
        L_0x022b:
            r7 = 1
            goto L_0x0272
        L_0x022d:
            byte[] r7 = getMin
            byte r13 = r7[r8]
            byte r13 = (byte) r13
            r14 = 1156(0x484, float:1.62E-42)
            byte r7 = r7[r14]
            int r7 = -r7
            short r7 = (short) r7
            r14 = 5857(0x16e1, float:8.207E-42)
            short r14 = (short) r14
            java.lang.String r7 = setMax(r13, r7, r14)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x0250
            r7 = 36
            if (r12 < r7) goto L_0x0250
            if (r12 > r4) goto L_0x0250
            goto L_0x022b
        L_0x0250:
            byte[] r7 = getMin
            byte r13 = r7[r8]
            byte r13 = (byte) r13
            byte r7 = r7[r15]
            short r7 = (short) r7
            r14 = 10554(0x293a, float:1.479E-41)
            short r14 = (short) r14
            java.lang.String r7 = setMax(r13, r7, r14)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            if (r7 == 0) goto L_0x027b
            r7 = 37
            if (r12 < r7) goto L_0x027b
            r7 = 38
            if (r12 > r7) goto L_0x027b
            goto L_0x022b
        L_0x0272:
            r1.IsOverlapping = r0
            r0 = 49
            r1.getMax(r0)
            goto L_0x0124
        L_0x027b:
            throw r0
        L_0x027c:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0284
            throw r1
        L_0x0284:
            goto L_0x0286
        L_0x0285:
            throw r0
        L_0x0286:
            goto L_0x0285
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMin():void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x014f, code lost:
        r1.getMax(18);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x0180, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x025c, code lost:
        if (r11 <= 20) goto L_0x025e;
     */
    @androidx.annotation.VisibleForTesting
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void setMin(@org.jetbrains.annotations.NotNull id.dana.domain.model.rpc.response.LoginResponse r20) {
        /*
            r19 = this;
            o.TypeConverter r1 = new o.TypeConverter
            r2 = r19
            r0 = r20
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r0)
            byte[] r0 = getMin
            r3 = 46
            byte r0 = r0[r3]
            byte r0 = (byte) r0
            r3 = r0 | 156(0x9c, float:2.19E-43)
            short r3 = (short) r3
            r4 = 13806(0x35ee, float:1.9346E-41)
            short r4 = (short) r4
            java.lang.String r0 = setMax(r0, r3, r4)
            byte[] r3 = getMin
            r4 = 15
            byte r3 = r3[r4]
            byte r3 = (byte) r3
            short r5 = (short) r3
            r6 = r5 | 4577(0x11e1, float:6.414E-42)
            short r6 = (short) r6
            java.lang.String r3 = setMax(r3, r5, r6)
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ all -> 0x034c }
            r7 = 0
            r6[r7] = r3     // Catch:{ all -> 0x034c }
            byte[] r3 = getMin     // Catch:{ all -> 0x034c }
            r8 = 8
            byte r3 = r3[r8]     // Catch:{ all -> 0x034c }
            byte r3 = (byte) r3     // Catch:{ all -> 0x034c }
            byte[] r9 = getMin     // Catch:{ all -> 0x034c }
            byte r9 = r9[r5]     // Catch:{ all -> 0x034c }
            short r9 = (short) r9     // Catch:{ all -> 0x034c }
            r10 = 9395(0x24b3, float:1.3165E-41)
            short r10 = (short) r10     // Catch:{ all -> 0x034c }
            java.lang.String r3 = setMax(r3, r9, r10)     // Catch:{ all -> 0x034c }
            java.lang.Class r3 = java.lang.Class.forName(r3)     // Catch:{ all -> 0x034c }
            byte[] r9 = getMin     // Catch:{ all -> 0x034c }
            r11 = 2662(0xa66, float:3.73E-42)
            byte r9 = r9[r11]     // Catch:{ all -> 0x034c }
            byte r9 = (byte) r9     // Catch:{ all -> 0x034c }
            byte[] r11 = getMin     // Catch:{ all -> 0x034c }
            r12 = 30
            byte r11 = r11[r12]     // Catch:{ all -> 0x034c }
            short r11 = (short) r11     // Catch:{ all -> 0x034c }
            r12 = 1177(0x499, float:1.65E-42)
            short r12 = (short) r12     // Catch:{ all -> 0x034c }
            java.lang.String r9 = setMax(r9, r11, r12)     // Catch:{ all -> 0x034c }
            java.lang.Class[] r11 = new java.lang.Class[r5]     // Catch:{ all -> 0x034c }
            byte[] r12 = getMin     // Catch:{ all -> 0x034c }
            byte r12 = r12[r8]     // Catch:{ all -> 0x034c }
            byte r12 = (byte) r12     // Catch:{ all -> 0x034c }
            byte[] r13 = getMin     // Catch:{ all -> 0x034c }
            byte r13 = r13[r5]     // Catch:{ all -> 0x034c }
            short r13 = (short) r13     // Catch:{ all -> 0x034c }
            java.lang.String r12 = setMax(r12, r13, r10)     // Catch:{ all -> 0x034c }
            java.lang.Class r12 = java.lang.Class.forName(r12)     // Catch:{ all -> 0x034c }
            r11[r7] = r12     // Catch:{ all -> 0x034c }
            java.lang.reflect.Method r3 = r3.getMethod(r9, r11)     // Catch:{ all -> 0x034c }
            java.lang.Object r0 = r3.invoke(r0, r6)     // Catch:{ all -> 0x034c }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x034c }
            int r3 = r0.length
            int[] r3 = new int[r3]
            r6 = 0
        L_0x007f:
            int r9 = r0.length
            if (r6 >= r9) goto L_0x0121
            r9 = r0[r6]
            java.lang.Object[] r11 = new java.lang.Object[r5]     // Catch:{ all -> 0x0118 }
            r11[r7] = r9     // Catch:{ all -> 0x0118 }
            byte[] r9 = getMin     // Catch:{ all -> 0x0118 }
            byte r9 = r9[r8]     // Catch:{ all -> 0x0118 }
            byte r9 = (byte) r9     // Catch:{ all -> 0x0118 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0118 }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x0118 }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x0118 }
            r14 = 1123(0x463, float:1.574E-42)
            short r14 = (short) r14     // Catch:{ all -> 0x0118 }
            java.lang.String r9 = setMax(r9, r12, r14)     // Catch:{ all -> 0x0118 }
            java.lang.Class r9 = java.lang.Class.forName(r9)     // Catch:{ all -> 0x0118 }
            r12 = 74
            byte r12 = (byte) r12     // Catch:{ all -> 0x0118 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0118 }
            r16 = 32
            byte r15 = r15[r16]     // Catch:{ all -> 0x0118 }
            short r15 = (short) r15     // Catch:{ all -> 0x0118 }
            r4 = 10257(0x2811, float:1.4373E-41)
            short r4 = (short) r4     // Catch:{ all -> 0x0118 }
            java.lang.String r4 = setMax(r12, r15, r4)     // Catch:{ all -> 0x0118 }
            java.lang.Class[] r12 = new java.lang.Class[r5]     // Catch:{ all -> 0x0118 }
            byte[] r15 = getMin     // Catch:{ all -> 0x0118 }
            byte r15 = r15[r8]     // Catch:{ all -> 0x0118 }
            byte r15 = (byte) r15     // Catch:{ all -> 0x0118 }
            byte[] r16 = getMin     // Catch:{ all -> 0x0118 }
            byte r13 = r16[r5]     // Catch:{ all -> 0x0118 }
            short r13 = (short) r13     // Catch:{ all -> 0x0118 }
            java.lang.String r13 = setMax(r15, r13, r10)     // Catch:{ all -> 0x0118 }
            java.lang.Class r13 = java.lang.Class.forName(r13)     // Catch:{ all -> 0x0118 }
            r12[r7] = r13     // Catch:{ all -> 0x0118 }
            java.lang.reflect.Method r4 = r9.getMethod(r4, r12)     // Catch:{ all -> 0x0118 }
            r9 = 0
            java.lang.Object r4 = r4.invoke(r9, r11)     // Catch:{ all -> 0x0118 }
            byte[] r11 = getMin     // Catch:{ all -> 0x010f }
            byte r11 = r11[r8]     // Catch:{ all -> 0x010f }
            byte r11 = (byte) r11     // Catch:{ all -> 0x010f }
            byte[] r12 = getMin     // Catch:{ all -> 0x010f }
            r13 = 4119(0x1017, float:5.772E-42)
            byte r12 = r12[r13]     // Catch:{ all -> 0x010f }
            int r12 = -r12
            short r12 = (short) r12     // Catch:{ all -> 0x010f }
            java.lang.String r11 = setMax(r11, r12, r14)     // Catch:{ all -> 0x010f }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x010f }
            byte[] r12 = getMin     // Catch:{ all -> 0x010f }
            byte r12 = r12[r8]     // Catch:{ all -> 0x010f }
            int r12 = r12 - r5
            byte r12 = (byte) r12     // Catch:{ all -> 0x010f }
            byte[] r13 = getMin     // Catch:{ all -> 0x010f }
            r14 = 73
            byte r13 = r13[r14]     // Catch:{ all -> 0x010f }
            short r13 = (short) r13     // Catch:{ all -> 0x010f }
            r14 = r13 | 10256(0x2810, float:1.4372E-41)
            short r14 = (short) r14     // Catch:{ all -> 0x010f }
            java.lang.String r12 = setMax(r12, r13, r14)     // Catch:{ all -> 0x010f }
            java.lang.reflect.Method r11 = r11.getMethod(r12, r9)     // Catch:{ all -> 0x010f }
            java.lang.Object r4 = r11.invoke(r4, r9)     // Catch:{ all -> 0x010f }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ all -> 0x010f }
            int r4 = r4.intValue()     // Catch:{ all -> 0x010f }
            r3[r6] = r4
            int r6 = r6 + 1
            r4 = 15
            goto L_0x007f
        L_0x010f:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0117
            throw r1
        L_0x0117:
            throw r0
        L_0x0118:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0120
            throw r1
        L_0x0120:
            throw r0
        L_0x0121:
            r4 = 29
        L_0x0123:
            r6 = 20
            r9 = 4
            r10 = 2
        L_0x0127:
            int r11 = r7 + 1
            r12 = 34
            r13 = 3
            r0 = r3[r7]     // Catch:{ all -> 0x0213 }
            int r0 = r1.getMax(r0)     // Catch:{ all -> 0x0213 }
            r7 = 18
            r14 = 7
            switch(r0) {
                case -22: goto L_0x020c;
                case -21: goto L_0x01f0;
                case -20: goto L_0x01df;
                case -19: goto L_0x01ca;
                case -18: goto L_0x01c5;
                case -17: goto L_0x01c2;
                case -16: goto L_0x01b5;
                case -15: goto L_0x01a8;
                case -14: goto L_0x01a3;
                case -13: goto L_0x01a0;
                case -12: goto L_0x019f;
                case -11: goto L_0x019d;
                case -10: goto L_0x0185;
                case -9: goto L_0x0172;
                case -8: goto L_0x0170;
                case -7: goto L_0x0162;
                case -6: goto L_0x0154;
                case -5: goto L_0x014b;
                case -4: goto L_0x0143;
                case -3: goto L_0x0140;
                case -2: goto L_0x013d;
                case -1: goto L_0x013a;
                default: goto L_0x0138;
            }     // Catch:{ all -> 0x0213 }
        L_0x0138:
            goto L_0x0210
        L_0x013a:
            r7 = 25
            goto L_0x0127
        L_0x013d:
            r7 = 23
            goto L_0x0127
        L_0x0140:
            r7 = 20
            goto L_0x0127
        L_0x0143:
            r1.getMax(r8)     // Catch:{ all -> 0x0213 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0213 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0213 }
            throw r0     // Catch:{ all -> 0x0213 }
        L_0x014b:
            int r0 = invoke     // Catch:{ all -> 0x0213 }
            r1.setMax = r0     // Catch:{ all -> 0x0213 }
        L_0x014f:
            r1.getMax(r7)     // Catch:{ all -> 0x0213 }
            goto L_0x0210
        L_0x0154:
            r1.setMax = r5     // Catch:{ all -> 0x0213 }
            r1.getMax(r10)     // Catch:{ all -> 0x0213 }
            r1.getMax(r14)     // Catch:{ all -> 0x0213 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0213 }
            invokeSuspend = r0     // Catch:{ all -> 0x0213 }
            goto L_0x0210
        L_0x0162:
            r0 = 47
            r1.getMax(r0)     // Catch:{ all -> 0x0213 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0213 }
            if (r0 != 0) goto L_0x0210
            r0 = 19
            r7 = 19
            goto L_0x0127
        L_0x0170:
            r7 = 1
            goto L_0x0127
        L_0x0172:
            r1.setMax = r5     // Catch:{ all -> 0x0213 }
            r1.getMax(r10)     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0213 }
            o.setGlobalUserData r0 = (o.setGlobalUserData) r0     // Catch:{ all -> 0x0213 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0213 }
        L_0x0180:
            r1.getMax(r9)     // Catch:{ all -> 0x0213 }
            goto L_0x0210
        L_0x0185:
            r1.setMax = r10     // Catch:{ all -> 0x0213 }
            r1.getMax(r10)     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0213 }
            o.parseFailed r0 = (o.parseFailed) r0     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0213 }
            o.setGlobalUserData r7 = (o.setGlobalUserData) r7     // Catch:{ all -> 0x0213 }
            r0.execute(r7)     // Catch:{ all -> 0x0213 }
            goto L_0x0210
        L_0x019d:
            r7 = 4
            goto L_0x0127
        L_0x019f:
            return
        L_0x01a0:
            r7 = 39
            goto L_0x0127
        L_0x01a3:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0213 }
            r1.setMax = r0     // Catch:{ all -> 0x0213 }
            goto L_0x014f
        L_0x01a8:
            r1.setMax = r5     // Catch:{ all -> 0x0213 }
            r1.getMax(r10)     // Catch:{ all -> 0x0213 }
            r1.getMax(r14)     // Catch:{ all -> 0x0213 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0213 }
            invoke = r0     // Catch:{ all -> 0x0213 }
            goto L_0x0210
        L_0x01b5:
            r1.getMax(r12)     // Catch:{ all -> 0x0213 }
            int r0 = r1.setMin     // Catch:{ all -> 0x0213 }
            if (r0 != 0) goto L_0x0210
            r0 = 37
            r7 = 37
            goto L_0x0127
        L_0x01c2:
            r7 = 2
            goto L_0x0127
        L_0x01c5:
            java.lang.String r0 = "loginResponse"
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0213 }
            goto L_0x0180
        L_0x01ca:
            r1.setMax = r10     // Catch:{ all -> 0x0213 }
            r1.getMax(r10)     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0213 }
            java.lang.String r7 = (java.lang.String) r7     // Catch:{ all -> 0x0213 }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r7)     // Catch:{ all -> 0x0213 }
            goto L_0x0210
        L_0x01df:
            r1.setMax = r5     // Catch:{ all -> 0x0213 }
            r1.getMax(r10)     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r0 = r1.isInside     // Catch:{ all -> 0x0213 }
            o.onValidateSchema r0 = (o.onValidateSchema) r0     // Catch:{ all -> 0x0213 }
            o.sendData r0 = r0.values     // Catch:{ all -> 0x0213 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0213 }
            goto L_0x0180
        L_0x01f0:
            o.onValidateSchema$getMax r0 = new o.onValidateSchema$getMax     // Catch:{ all -> 0x0213 }
            r1.setMax = r10     // Catch:{ all -> 0x0213 }
            r1.getMax(r10)     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r7 = r1.isInside     // Catch:{ all -> 0x0213 }
            o.onValidateSchema r7 = (o.onValidateSchema) r7     // Catch:{ all -> 0x0213 }
            r1.getMax(r13)     // Catch:{ all -> 0x0213 }
            java.lang.Object r14 = r1.isInside     // Catch:{ all -> 0x0213 }
            id.dana.domain.model.rpc.response.LoginResponse r14 = (id.dana.domain.model.rpc.response.LoginResponse) r14     // Catch:{ all -> 0x0213 }
            r0.<init>(r7, r14)     // Catch:{ all -> 0x0213 }
            r1.IsOverlapping = r0     // Catch:{ all -> 0x0213 }
            goto L_0x0180
        L_0x020c:
            r7 = 29
            goto L_0x0127
        L_0x0210:
            r7 = r11
            goto L_0x0127
        L_0x0213:
            r0 = move-exception
            byte[] r7 = getMin
            byte r14 = r7[r8]
            byte r14 = (byte) r14
            r15 = 13
            byte r7 = r7[r15]
            short r7 = (short) r7
            int r15 = length
            r15 = r15 | 7588(0x1da4, float:1.0633E-41)
            short r15 = (short) r15
            java.lang.String r7 = setMax(r14, r7, r15)
            java.lang.Class r7 = java.lang.Class.forName(r7)
            boolean r7 = r7.isInstance(r0)
            r14 = 49
            r15 = 38
            if (r7 == 0) goto L_0x023d
            if (r11 < r9) goto L_0x023d
            if (r11 > r6) goto L_0x023d
        L_0x0239:
            r7 = 38
            goto L_0x0343
        L_0x023d:
            byte[] r7 = getMin
            byte r5 = r7[r8]
            byte r5 = (byte) r5
            r17 = 4869(0x1305, float:6.823E-42)
            byte r7 = r7[r17]
            short r7 = (short) r7
            r9 = 1139(0x473, float:1.596E-42)
            short r9 = (short) r9
            java.lang.String r5 = setMax(r5, r7, r9)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0261
            r5 = 15
            if (r11 < r5) goto L_0x0263
            if (r11 > r6) goto L_0x0263
        L_0x025e:
            r7 = 3
            goto L_0x0343
        L_0x0261:
            r5 = 15
        L_0x0263:
            byte[] r7 = getMin
            byte r5 = r7[r8]
            byte r5 = (byte) r5
            r10 = r5 & 227(0xe3, float:3.18E-43)
            short r10 = (short) r10
            r18 = 4868(0x1304, float:6.822E-42)
            byte r7 = r7[r18]
            short r7 = (short) r7
            java.lang.String r5 = setMax(r5, r10, r7)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            r7 = 21
            if (r5 == 0) goto L_0x0285
            if (r11 < r6) goto L_0x0285
            if (r11 > r7) goto L_0x0285
            goto L_0x0239
        L_0x0285:
            byte[] r5 = getMin
            byte r10 = r5[r8]
            byte r10 = (byte) r10
            r6 = r10 & 227(0xe3, float:3.18E-43)
            short r6 = (short) r6
            byte r5 = r5[r18]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r10, r6, r5)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02a5
            if (r11 < r7) goto L_0x02a5
            r5 = 22
            if (r11 > r5) goto L_0x02a5
            goto L_0x025e
        L_0x02a5:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            byte r5 = r5[r17]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r6, r5, r9)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02c1
            if (r11 < r4) goto L_0x02c1
            if (r11 > r15) goto L_0x02c1
            goto L_0x0239
        L_0x02c1:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            byte r5 = r5[r14]
            short r5 = (short) r5
            r10 = 9600(0x2580, float:1.3452E-41)
            short r10 = (short) r10
            java.lang.String r5 = setMax(r6, r5, r10)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x02e2
            r5 = 33
            if (r11 < r5) goto L_0x02e2
            if (r11 > r12) goto L_0x02e2
            goto L_0x0239
        L_0x02e2:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            byte r5 = r5[r17]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r6, r5, r9)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            r6 = 48
            if (r5 == 0) goto L_0x0302
            r5 = 40
            if (r11 < r5) goto L_0x0302
            if (r11 > r6) goto L_0x0302
            goto L_0x025e
        L_0x0302:
            byte[] r5 = getMin
            byte r9 = r5[r8]
            byte r9 = (byte) r9
            byte r5 = r5[r7]
            short r5 = (short) r5
            r10 = 10638(0x298e, float:1.4907E-41)
            short r10 = (short) r10
            java.lang.String r5 = setMax(r9, r5, r10)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x0323
            r5 = 41
            if (r11 < r5) goto L_0x0323
            if (r11 > r6) goto L_0x0323
            goto L_0x025e
        L_0x0323:
            byte[] r5 = getMin
            byte r6 = r5[r8]
            byte r6 = (byte) r6
            byte r5 = r5[r7]
            short r5 = (short) r5
            java.lang.String r5 = setMax(r6, r5, r10)
            java.lang.Class r5 = java.lang.Class.forName(r5)
            boolean r5 = r5.isInstance(r0)
            if (r5 == 0) goto L_0x034b
            r5 = 43
            if (r11 < r5) goto L_0x034b
            r5 = 44
            if (r11 > r5) goto L_0x034b
            goto L_0x025e
        L_0x0343:
            r1.IsOverlapping = r0
            r1.getMax(r14)
            r5 = 1
            goto L_0x0123
        L_0x034b:
            throw r0
        L_0x034c:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0354
            throw r1
        L_0x0354:
            goto L_0x0356
        L_0x0355:
            throw r0
        L_0x0356:
            goto L_0x0355
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMin(id.dana.domain.model.rpc.response.LoginResponse):void");
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:122:0x033f, code lost:
        if (r13 <= 83) goto L_0x0238;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x0169, code lost:
        r1.getMax(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x019e, code lost:
        r1.getMax(18);
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void setMin(@org.jetbrains.annotations.NotNull java.lang.String r18, @org.jetbrains.annotations.NotNull java.lang.String r19, @org.jetbrains.annotations.NotNull java.lang.String r20, boolean r21) {
        /*
            r17 = this;
            o.TypeConverter r7 = new o.TypeConverter
            r1 = r7
            r2 = r17
            r3 = r18
            r4 = r19
            r5 = r20
            r6 = r21
            r1.<init>((java.lang.Object) r2, (java.lang.Object) r3, (java.lang.Object) r4, (java.lang.Object) r5, (int) r6)
            byte[] r0 = getMin
            r1 = 46
            byte r0 = r0[r1]
            byte r0 = (byte) r0
            r1 = 284(0x11c, float:3.98E-43)
            short r1 = (short) r1
            r2 = 12226(0x2fc2, float:1.7132E-41)
            short r2 = (short) r2
            java.lang.String r0 = setMax(r0, r1, r2)
            byte[] r1 = getMin
            r2 = 15
            byte r1 = r1[r2]
            byte r1 = (byte) r1
            short r3 = (short) r1
            r4 = r3 | 4577(0x11e1, float:6.414E-42)
            short r4 = (short) r4
            java.lang.String r1 = setMax(r1, r3, r4)
            r3 = 1
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ all -> 0x0398 }
            r5 = 0
            r4[r5] = r1     // Catch:{ all -> 0x0398 }
            byte[] r1 = getMin     // Catch:{ all -> 0x0398 }
            r6 = 8
            byte r1 = r1[r6]     // Catch:{ all -> 0x0398 }
            byte r1 = (byte) r1     // Catch:{ all -> 0x0398 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0398 }
            byte r8 = r8[r3]     // Catch:{ all -> 0x0398 }
            short r8 = (short) r8     // Catch:{ all -> 0x0398 }
            r9 = 9395(0x24b3, float:1.3165E-41)
            short r9 = (short) r9     // Catch:{ all -> 0x0398 }
            java.lang.String r1 = setMax(r1, r8, r9)     // Catch:{ all -> 0x0398 }
            java.lang.Class r1 = java.lang.Class.forName(r1)     // Catch:{ all -> 0x0398 }
            byte[] r8 = getMin     // Catch:{ all -> 0x0398 }
            r10 = 2662(0xa66, float:3.73E-42)
            byte r8 = r8[r10]     // Catch:{ all -> 0x0398 }
            byte r8 = (byte) r8     // Catch:{ all -> 0x0398 }
            byte[] r10 = getMin     // Catch:{ all -> 0x0398 }
            r11 = 30
            byte r10 = r10[r11]     // Catch:{ all -> 0x0398 }
            short r10 = (short) r10     // Catch:{ all -> 0x0398 }
            r11 = 1177(0x499, float:1.65E-42)
            short r11 = (short) r11     // Catch:{ all -> 0x0398 }
            java.lang.String r8 = setMax(r8, r10, r11)     // Catch:{ all -> 0x0398 }
            java.lang.Class[] r10 = new java.lang.Class[r3]     // Catch:{ all -> 0x0398 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0398 }
            byte r11 = r11[r6]     // Catch:{ all -> 0x0398 }
            byte r11 = (byte) r11     // Catch:{ all -> 0x0398 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0398 }
            byte r12 = r12[r3]     // Catch:{ all -> 0x0398 }
            short r12 = (short) r12     // Catch:{ all -> 0x0398 }
            java.lang.String r11 = setMax(r11, r12, r9)     // Catch:{ all -> 0x0398 }
            java.lang.Class r11 = java.lang.Class.forName(r11)     // Catch:{ all -> 0x0398 }
            r10[r5] = r11     // Catch:{ all -> 0x0398 }
            java.lang.reflect.Method r1 = r1.getMethod(r8, r10)     // Catch:{ all -> 0x0398 }
            java.lang.Object r0 = r1.invoke(r0, r4)     // Catch:{ all -> 0x0398 }
            java.lang.Object[] r0 = (java.lang.Object[]) r0     // Catch:{ all -> 0x0398 }
            int r1 = r0.length
            int[] r1 = new int[r1]
            r4 = 0
        L_0x0086:
            int r8 = r0.length
            if (r4 >= r8) goto L_0x0126
            r8 = r0[r4]
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ all -> 0x011d }
            r10[r5] = r8     // Catch:{ all -> 0x011d }
            byte[] r8 = getMin     // Catch:{ all -> 0x011d }
            byte r8 = r8[r6]     // Catch:{ all -> 0x011d }
            byte r8 = (byte) r8     // Catch:{ all -> 0x011d }
            byte[] r11 = getMin     // Catch:{ all -> 0x011d }
            r12 = 4119(0x1017, float:5.772E-42)
            byte r11 = r11[r12]     // Catch:{ all -> 0x011d }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x011d }
            r13 = 1123(0x463, float:1.574E-42)
            short r13 = (short) r13     // Catch:{ all -> 0x011d }
            java.lang.String r8 = setMax(r8, r11, r13)     // Catch:{ all -> 0x011d }
            java.lang.Class r8 = java.lang.Class.forName(r8)     // Catch:{ all -> 0x011d }
            r11 = 74
            byte r11 = (byte) r11     // Catch:{ all -> 0x011d }
            byte[] r14 = getMin     // Catch:{ all -> 0x011d }
            r15 = 32
            byte r14 = r14[r15]     // Catch:{ all -> 0x011d }
            short r14 = (short) r14     // Catch:{ all -> 0x011d }
            r15 = 10257(0x2811, float:1.4373E-41)
            short r15 = (short) r15     // Catch:{ all -> 0x011d }
            java.lang.String r11 = setMax(r11, r14, r15)     // Catch:{ all -> 0x011d }
            java.lang.Class[] r14 = new java.lang.Class[r3]     // Catch:{ all -> 0x011d }
            byte[] r15 = getMin     // Catch:{ all -> 0x011d }
            byte r15 = r15[r6]     // Catch:{ all -> 0x011d }
            byte r15 = (byte) r15     // Catch:{ all -> 0x011d }
            byte[] r16 = getMin     // Catch:{ all -> 0x011d }
            byte r2 = r16[r3]     // Catch:{ all -> 0x011d }
            short r2 = (short) r2     // Catch:{ all -> 0x011d }
            java.lang.String r2 = setMax(r15, r2, r9)     // Catch:{ all -> 0x011d }
            java.lang.Class r2 = java.lang.Class.forName(r2)     // Catch:{ all -> 0x011d }
            r14[r5] = r2     // Catch:{ all -> 0x011d }
            java.lang.reflect.Method r2 = r8.getMethod(r11, r14)     // Catch:{ all -> 0x011d }
            r8 = 0
            java.lang.Object r2 = r2.invoke(r8, r10)     // Catch:{ all -> 0x011d }
            byte[] r10 = getMin     // Catch:{ all -> 0x0114 }
            byte r10 = r10[r6]     // Catch:{ all -> 0x0114 }
            byte r10 = (byte) r10     // Catch:{ all -> 0x0114 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0114 }
            byte r11 = r11[r12]     // Catch:{ all -> 0x0114 }
            int r11 = -r11
            short r11 = (short) r11     // Catch:{ all -> 0x0114 }
            java.lang.String r10 = setMax(r10, r11, r13)     // Catch:{ all -> 0x0114 }
            java.lang.Class r10 = java.lang.Class.forName(r10)     // Catch:{ all -> 0x0114 }
            byte[] r11 = getMin     // Catch:{ all -> 0x0114 }
            byte r11 = r11[r6]     // Catch:{ all -> 0x0114 }
            int r11 = r11 - r3
            byte r11 = (byte) r11     // Catch:{ all -> 0x0114 }
            byte[] r12 = getMin     // Catch:{ all -> 0x0114 }
            r13 = 73
            byte r12 = r12[r13]     // Catch:{ all -> 0x0114 }
            short r12 = (short) r12     // Catch:{ all -> 0x0114 }
            r13 = r12 | 10256(0x2810, float:1.4372E-41)
            short r13 = (short) r13     // Catch:{ all -> 0x0114 }
            java.lang.String r11 = setMax(r11, r12, r13)     // Catch:{ all -> 0x0114 }
            java.lang.reflect.Method r10 = r10.getMethod(r11, r8)     // Catch:{ all -> 0x0114 }
            java.lang.Object r2 = r10.invoke(r2, r8)     // Catch:{ all -> 0x0114 }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ all -> 0x0114 }
            int r2 = r2.intValue()     // Catch:{ all -> 0x0114 }
            r1[r4] = r2
            int r4 = r4 + 1
            r2 = 15
            goto L_0x0086
        L_0x0114:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x011c
            throw r1
        L_0x011c:
            throw r0
        L_0x011d:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x0125
            throw r1
        L_0x0125:
            throw r0
        L_0x0126:
            r2 = 72
            r4 = 29
            r8 = 56
            r10 = 4
            r11 = 18
            r12 = 2
        L_0x0130:
            int r13 = r5 + 1
            r14 = 9
            r15 = 7
            r0 = r1[r5]     // Catch:{ all -> 0x0211 }
            int r0 = r7.getMax(r0)     // Catch:{ all -> 0x0211 }
            r5 = 55
            r9 = 3
            switch(r0) {
                case -25: goto L_0x01fd;
                case -24: goto L_0x01eb;
                case -23: goto L_0x01e7;
                case -22: goto L_0x01e3;
                case -21: goto L_0x01d4;
                case -20: goto L_0x01c7;
                case -19: goto L_0x01c2;
                case -18: goto L_0x01bf;
                case -17: goto L_0x01bb;
                case -16: goto L_0x01b0;
                case -15: goto L_0x01a3;
                case -14: goto L_0x019a;
                case -13: goto L_0x0199;
                case -12: goto L_0x0197;
                case -11: goto L_0x0194;
                case -10: goto L_0x0191;
                case -9: goto L_0x018c;
                case -8: goto L_0x0189;
                case -7: goto L_0x0184;
                case -6: goto L_0x016e;
                case -5: goto L_0x0165;
                case -4: goto L_0x0151;
                case -3: goto L_0x014e;
                case -2: goto L_0x0146;
                case -1: goto L_0x0143;
                default: goto L_0x0141;
            }     // Catch:{ all -> 0x0211 }
        L_0x0141:
            goto L_0x020e
        L_0x0143:
            r5 = 20
            goto L_0x0130
        L_0x0146:
            r7.getMax(r6)     // Catch:{ all -> 0x0211 }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x0211 }
            java.lang.Throwable r0 = (java.lang.Throwable) r0     // Catch:{ all -> 0x0211 }
            throw r0     // Catch:{ all -> 0x0211 }
        L_0x014e:
            r5 = 72
            goto L_0x0130
        L_0x0151:
            r7.getMax(r14)     // Catch:{ all -> 0x0211 }
            int r0 = r7.setMin     // Catch:{ all -> 0x0211 }
            if (r0 == r5) goto L_0x0160
            if (r0 == r2) goto L_0x015b
            goto L_0x0160
        L_0x015b:
            r0 = 12
            r5 = 12
            goto L_0x0130
        L_0x0160:
            r0 = 66
            r5 = 66
            goto L_0x0130
        L_0x0165:
            java.lang.String r0 = "inputPin"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x0211 }
        L_0x0169:
            r7.getMax(r10)     // Catch:{ all -> 0x0211 }
            goto L_0x020e
        L_0x016e:
            r7.setMax = r12     // Catch:{ all -> 0x0211 }
            r7.getMax(r12)     // Catch:{ all -> 0x0211 }
            r7.getMax(r9)     // Catch:{ all -> 0x0211 }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x0211 }
            r7.getMax(r9)     // Catch:{ all -> 0x0211 }
            java.lang.Object r5 = r7.isInside     // Catch:{ all -> 0x0211 }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ all -> 0x0211 }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r5)     // Catch:{ all -> 0x0211 }
            goto L_0x020e
        L_0x0184:
            java.lang.String r0 = "pubKey"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x0211 }
            goto L_0x0169
        L_0x0189:
            r5 = 56
            goto L_0x0130
        L_0x018c:
            java.lang.String r0 = "securityId"
            r7.IsOverlapping = r0     // Catch:{ all -> 0x0211 }
            goto L_0x0169
        L_0x0191:
            r5 = 26
            goto L_0x0130
        L_0x0194:
            r5 = 29
            goto L_0x0130
        L_0x0197:
            r5 = 4
            goto L_0x0130
        L_0x0199:
            return
        L_0x019a:
            int r0 = invokeSuspend     // Catch:{ all -> 0x0211 }
            r7.setMax = r0     // Catch:{ all -> 0x0211 }
        L_0x019e:
            r7.getMax(r11)     // Catch:{ all -> 0x0211 }
            goto L_0x020e
        L_0x01a3:
            r7.setMax = r3     // Catch:{ all -> 0x0211 }
            r7.getMax(r12)     // Catch:{ all -> 0x0211 }
            r7.getMax(r15)     // Catch:{ all -> 0x0211 }
            int r0 = r7.setMin     // Catch:{ all -> 0x0211 }
            invoke = r0     // Catch:{ all -> 0x0211 }
            goto L_0x020e
        L_0x01b0:
            r0 = 34
            r7.getMax(r0)     // Catch:{ all -> 0x0211 }
            int r0 = r7.setMin     // Catch:{ all -> 0x0211 }
            if (r0 != 0) goto L_0x020e
            goto L_0x0130
        L_0x01bb:
            r5 = 18
            goto L_0x0130
        L_0x01bf:
            r5 = 2
            goto L_0x0130
        L_0x01c2:
            int r0 = invoke     // Catch:{ all -> 0x0211 }
            r7.setMax = r0     // Catch:{ all -> 0x0211 }
            goto L_0x019e
        L_0x01c7:
            r7.setMax = r3     // Catch:{ all -> 0x0211 }
            r7.getMax(r12)     // Catch:{ all -> 0x0211 }
            r7.getMax(r15)     // Catch:{ all -> 0x0211 }
            int r0 = r7.setMin     // Catch:{ all -> 0x0211 }
            invokeSuspend = r0     // Catch:{ all -> 0x0211 }
            goto L_0x020e
        L_0x01d4:
            r0 = 47
            r7.getMax(r0)     // Catch:{ all -> 0x0211 }
            int r0 = r7.setMin     // Catch:{ all -> 0x0211 }
            if (r0 != 0) goto L_0x020e
            r0 = 65
            r5 = 65
            goto L_0x0130
        L_0x01e3:
            r5 = 83
            goto L_0x0130
        L_0x01e7:
            r5 = 24
            goto L_0x0130
        L_0x01eb:
            r7.getMax(r14)     // Catch:{ all -> 0x0211 }
            int r0 = r7.setMin     // Catch:{ all -> 0x0211 }
            r5 = 5
            if (r0 == 0) goto L_0x0130
            if (r0 == r3) goto L_0x01f7
            goto L_0x0130
        L_0x01f7:
            r0 = 73
            r5 = 73
            goto L_0x0130
        L_0x01fd:
            r7.setMax = r3     // Catch:{ all -> 0x0211 }
            r7.getMax(r12)     // Catch:{ all -> 0x0211 }
            r7.getMax(r9)     // Catch:{ all -> 0x0211 }
            java.lang.Object r0 = r7.isInside     // Catch:{ all -> 0x0211 }
            int r0 = super.hashCode()     // Catch:{ all -> 0x0211 }
            r7.setMax = r0     // Catch:{ all -> 0x0211 }
            goto L_0x019e
        L_0x020e:
            r5 = r13
            goto L_0x0130
        L_0x0211:
            r0 = move-exception
            byte[] r5 = getMin
            byte r9 = r5[r6]
            byte r9 = (byte) r9
            r16 = 4868(0x1304, float:6.822E-42)
            byte r2 = r5[r16]
            short r2 = (short) r2
            r16 = 15
            byte r5 = r5[r16]
            short r5 = (short) r5
            java.lang.String r2 = setMax(r9, r2, r5)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            r9 = 70
            if (r2 == 0) goto L_0x023c
            r2 = 6
            if (r13 < r2) goto L_0x023c
            if (r13 > r15) goto L_0x023c
        L_0x0236:
            r3 = 83
        L_0x0238:
            r5 = 70
            goto L_0x038b
        L_0x023c:
            byte[] r2 = getMin
            byte r3 = r2[r6]
            byte r3 = (byte) r3
            r16 = 1156(0x484, float:1.62E-42)
            byte r2 = r2[r16]
            int r2 = -r2
            short r2 = (short) r2
            r5 = 5857(0x16e1, float:8.207E-42)
            short r5 = (short) r5
            java.lang.String r2 = setMax(r3, r2, r5)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x025d
            if (r13 < r15) goto L_0x025d
            if (r13 > r6) goto L_0x025d
            goto L_0x0236
        L_0x025d:
            byte[] r2 = getMin
            byte r3 = r2[r6]
            byte r3 = (byte) r3
            byte r2 = r2[r16]
            int r2 = -r2
            short r2 = (short) r2
            java.lang.String r2 = setMax(r3, r2, r5)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            r3 = 10
            if (r2 == 0) goto L_0x0280
            if (r13 < r14) goto L_0x0280
            if (r13 > r3) goto L_0x0280
        L_0x027a:
            r3 = 83
        L_0x027c:
            r5 = 71
            goto L_0x038b
        L_0x0280:
            byte[] r2 = getMin
            byte r14 = r2[r6]
            byte r14 = (byte) r14
            r15 = 21
            byte r2 = r2[r15]
            short r2 = (short) r2
            r15 = 10638(0x298e, float:1.4907E-41)
            short r15 = (short) r15
            java.lang.String r2 = setMax(r14, r2, r15)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x02a2
            if (r13 < r3) goto L_0x02a2
            r2 = 12
            if (r13 > r2) goto L_0x02a2
            goto L_0x0236
        L_0x02a2:
            r2 = 15
            if (r13 < r2) goto L_0x02ad
            if (r13 > r11) goto L_0x02ad
            r3 = 83
            r5 = 1
            goto L_0x038b
        L_0x02ad:
            byte[] r3 = getMin
            byte r14 = r3[r6]
            byte r14 = (byte) r14
            byte r3 = r3[r16]
            int r3 = -r3
            short r3 = (short) r3
            java.lang.String r3 = setMax(r14, r3, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x02ca
            if (r13 < r4) goto L_0x02ca
            if (r13 > r8) goto L_0x02ca
            goto L_0x0236
        L_0x02ca:
            byte[] r3 = getMin
            byte r14 = r3[r6]
            byte r14 = (byte) r14
            byte r3 = r3[r16]
            int r3 = -r3
            short r3 = (short) r3
            java.lang.String r3 = setMax(r14, r3, r5)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x02e9
            r3 = 50
            if (r13 < r3) goto L_0x02e9
            if (r13 > r8) goto L_0x02e9
            goto L_0x0236
        L_0x02e9:
            r3 = 79
            if (r13 < r3) goto L_0x02f9
            r3 = 83
            if (r13 > r3) goto L_0x02f9
            r3 = 28
            r3 = 83
            r5 = 28
            goto L_0x038b
        L_0x02f9:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r14 = 4116(0x1014, float:5.768E-42)
            byte r3 = r3[r14]
            short r3 = (short) r3
            r14 = 4837(0x12e5, float:6.778E-42)
            short r14 = (short) r14
            java.lang.String r3 = setMax(r5, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x031e
            r3 = 74
            if (r13 < r3) goto L_0x031e
            r3 = 75
            if (r13 > r3) goto L_0x031e
            goto L_0x027a
        L_0x031e:
            byte[] r3 = getMin
            byte r5 = r3[r6]
            byte r5 = (byte) r5
            r14 = 7392(0x1ce0, float:1.0358E-41)
            byte r3 = r3[r14]
            short r3 = (short) r3
            r14 = 10605(0x296d, float:1.4861E-41)
            short r14 = (short) r14
            java.lang.String r3 = setMax(r5, r3, r14)
            java.lang.Class r3 = java.lang.Class.forName(r3)
            boolean r3 = r3.isInstance(r0)
            if (r3 == 0) goto L_0x0343
            r3 = 75
            if (r13 < r3) goto L_0x0343
            r3 = 83
            if (r13 > r3) goto L_0x0345
        L_0x0341:
            goto L_0x0238
        L_0x0343:
            r3 = 83
        L_0x0345:
            byte[] r5 = getMin
            byte r15 = r5[r6]
            byte r15 = (byte) r15
            r16 = 4869(0x1305, float:6.823E-42)
            byte r5 = r5[r16]
            short r5 = (short) r5
            r2 = 1139(0x473, float:1.596E-42)
            short r2 = (short) r2
            java.lang.String r2 = setMax(r15, r5, r2)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x036a
            r2 = 77
            if (r13 < r2) goto L_0x036a
            r2 = 78
            if (r13 > r2) goto L_0x036a
            goto L_0x027c
        L_0x036a:
            byte[] r2 = getMin
            byte r5 = r2[r6]
            byte r5 = (byte) r5
            r15 = 7392(0x1ce0, float:1.0358E-41)
            byte r2 = r2[r15]
            short r2 = (short) r2
            java.lang.String r2 = setMax(r5, r2, r14)
            java.lang.Class r2 = java.lang.Class.forName(r2)
            boolean r2 = r2.isInstance(r0)
            if (r2 == 0) goto L_0x0397
            r2 = 78
            if (r13 < r2) goto L_0x0397
            r2 = 79
            if (r13 > r2) goto L_0x0397
            goto L_0x0341
        L_0x038b:
            r7.IsOverlapping = r0
            r0 = 49
            r7.getMax(r0)
            r2 = 72
            r3 = 1
            goto L_0x0130
        L_0x0397:
            throw r0
        L_0x0398:
            r0 = move-exception
            java.lang.Throwable r1 = r0.getCause()
            if (r1 == 0) goto L_0x03a0
            throw r1
        L_0x03a0:
            goto L_0x03a2
        L_0x03a1:
            throw r0
        L_0x03a2:
            goto L_0x03a1
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.setMin(java.lang.String, java.lang.String, java.lang.String, boolean):void");
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u000e\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u0003\n\u0000\u0010\u0000\u001a\u00020\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0002\b\u0004"}, d2 = {"<anonymous>", "", "throwable", "", "invoke"}, k = 3, mv = {1, 4, 2})
    static final class setMax extends Lambda implements Function1<Throwable, Unit> {
        public static final setMax INSTANCE = new setMax();

        setMax() {
            super(1);
        }

        public final /* bridge */ /* synthetic */ Object invoke(Object obj) {
            invoke((Throwable) obj);
            return Unit.INSTANCE;
        }

        public final void invoke(@NotNull Throwable th) {
            Intrinsics.checkNotNullParameter(th, "throwable");
            StringBuilder sb = new StringBuilder("onError: ");
            sb.append(th.getMessage());
            updateActionSheetContent.e(DanaLogConstants.TAG.FACE_LOGIN, sb.toString());
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u000e\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u000b\n\u0000\u0010\u0000\u001a\u00020\u00012\u0006\u0010\u0002\u001a\u00020\u0003H\n¢\u0006\u0002\b\u0004"}, d2 = {"<anonymous>", "", "enable", "", "invoke"}, k = 3, mv = {1, 4, 2})
    static final class setMin extends Lambda implements Function1<Boolean, Unit> {
        final /* synthetic */ onValidateSchema this$0;

        /* JADX INFO: super call moved to the top of the method (can break code semantics) */
        setMin(onValidateSchema onvalidateschema) {
            super(1);
            this.this$0 = onvalidateschema;
        }

        public final /* synthetic */ Object invoke(Object obj) {
            invoke(((Boolean) obj).booleanValue());
            return Unit.INSTANCE;
        }

        public final void invoke(boolean z) {
            onValidateSchema.getMin(this.this$0).getMin(z);
            onValidateSchema.getMin(this.this$0).getMin();
        }
    }

    /* JADX WARNING: No exception handlers in catch block: Catch:{  } */
    @javax.inject.Inject
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public onValidateSchema(@org.jetbrains.annotations.NotNull o.isMainThread.getMin r19, @org.jetbrains.annotations.NotNull o.DebugMonitor r20, @org.jetbrains.annotations.NotNull o.GriverMonitorAnalyticsConfigManager r21, @org.jetbrains.annotations.NotNull o.setDatabasePath r22, @org.jetbrains.annotations.NotNull o.clearCache r23, @org.jetbrains.annotations.NotNull android.content.Context r24, @org.jetbrains.annotations.NotNull o.getPerformanceTracker r25, @org.jetbrains.annotations.NotNull o.setDomStorageEnabled r26, @org.jetbrains.annotations.NotNull o.UpdateAppCallback r27, @org.jetbrains.annotations.NotNull o.GriverCreateDialogParam r28, @org.jetbrains.annotations.NotNull o.sendData r29, @org.jetbrains.annotations.NotNull o.ShareRecyclerAdapter.ShareViewHolder r30) {
        /*
            r18 = this;
            r1 = r18
            r0 = r19
            r2 = r20
            r3 = r21
            r4 = r22
            r5 = r23
            r6 = r24
            r7 = r25
            r8 = r26
            r9 = r27
            r10 = r28
            r11 = r29
            r12 = r30
            java.lang.String r13 = "view"
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r0, r13)
            java.lang.String r13 = "login"
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r2, r13)
            java.lang.String r13 = "trustRiskLogin"
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r3, r13)
            int r13 = invokeSuspend
            r14 = r13 ^ 13
            r15 = r13 & 13
            r14 = r14 | r15
            r15 = 1
            int r14 = r14 << r15
            r16 = r13 & -14
            r13 = r13 ^ -1
            r17 = 13
            r13 = r17 & r13
            r13 = r16 | r13
            int r13 = -r13
            r16 = r14 ^ r13
            r13 = r13 & r14
            int r13 = r13 << r15
            int r13 = r16 + r13
            int r14 = r13 % 128
            invoke = r14
            int r13 = r13 % 2
            r14 = 75
            if (r13 != 0) goto L_0x0052
            r13 = 75
            goto L_0x0054
        L_0x0052:
            r13 = 58
        L_0x0054:
            java.lang.String r15 = "isAppFirstLaunch"
            java.lang.String r3 = "checkKnowledgeBasedAuthFeature"
            r2 = 0
            if (r13 == r14) goto L_0x0065
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, r3)     // Catch:{ NullPointerException -> 0x0062 }
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, r15)     // Catch:{ NullPointerException -> 0x0062 }
            goto L_0x006c
        L_0x0062:
            r0 = move-exception
            goto L_0x00f5
        L_0x0065:
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r4, r3)
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r5, r15)
            int r3 = r2.length     // Catch:{ all -> 0x00ff }
        L_0x006c:
            int r3 = invoke
            r13 = r3 & 105(0x69, float:1.47E-43)
            r3 = r3 ^ 105(0x69, float:1.47E-43)
            r3 = r3 | r13
            int r13 = r13 + r3
            int r3 = r13 % 128
            invokeSuspend = r3
            int r13 = r13 % 2
            r3 = 99
            if (r13 == 0) goto L_0x0081
            r13 = 99
            goto L_0x0083
        L_0x0081:
            r13 = 20
        L_0x0083:
            java.lang.String r14 = "checkFaceLoginFeature"
            java.lang.String r15 = "deviceInformationProvider"
            java.lang.String r2 = "context"
            if (r13 == r3) goto L_0x0095
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, r2)
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, r15)
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, r14)
            goto L_0x00a2
        L_0x0095:
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r6, r2)
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r7, r15)
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r8, r14)
            r2 = 0
            super.hashCode()     // Catch:{ all -> 0x00fc }
        L_0x00a2:
            int r2 = invokeSuspend
            r3 = r2 | 13
            r13 = 1
            int r3 = r3 << r13
            r2 = r2 ^ 13
            int r3 = r3 - r2
            int r2 = r3 % 128
            invoke = r2
            int r3 = r3 % 2
            if (r3 != 0) goto L_0x00b5
            r13 = 1
            goto L_0x00b6
        L_0x00b5:
            r13 = 0
        L_0x00b6:
            java.lang.String r2 = "getUserInfo"
            java.lang.String r3 = "getUserId"
            java.lang.String r14 = "splitFacade"
            r15 = 1
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r9, r14)
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r10, r3)
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r11, r2)
            if (r13 == r15) goto L_0x00ca
            goto L_0x00cc
        L_0x00ca:
            r2 = 0
            int r2 = r2.length     // Catch:{ all -> 0x00f9 }
        L_0x00cc:
            java.lang.String r2 = "userInfoMapper"
            kotlin.jvm.internal.Intrinsics.checkNotNullParameter(r12, r2)     // Catch:{ NullPointerException -> 0x0062 }
            r18.<init>()
            r1.getMax = r0     // Catch:{ NumberFormatException -> 0x00f4 }
            r0 = r20
            r1.setMin = r0     // Catch:{  }
            r0 = r21
            r1.IsOverlapping = r0     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.toFloatRange = r4     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.isInside = r5     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.toIntRange = r6     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.equals = r7     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.hashCode = r8     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.toString = r9     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.toDoubleRange = r10     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.values = r11     // Catch:{ IllegalStateException -> 0x00f2 }
            r1.FastBitmap$CoordinateSystem = r12     // Catch:{ IllegalStateException -> 0x00f2 }
            return
        L_0x00f2:
            r0 = move-exception
            goto L_0x00f5
        L_0x00f4:
            r0 = move-exception
        L_0x00f5:
            throw r0
        L_0x00f6:
            r0 = move-exception
            r2 = r0
            throw r2
        L_0x00f9:
            r0 = move-exception
            r2 = r0
            throw r2
        L_0x00fc:
            r0 = move-exception
            r2 = r0
            throw r2
        L_0x00ff:
            r0 = move-exception
            r2 = r0
            throw r2
        */
        throw new UnsupportedOperationException("Method not decompiled: o.onValidateSchema.<init>(o.isMainThread$getMin, o.DebugMonitor, o.GriverMonitorAnalyticsConfigManager, o.setDatabasePath, o.clearCache, android.content.Context, o.getPerformanceTracker, o.setDomStorageEnabled, o.UpdateAppCallback, o.GriverCreateDialogParam, o.sendData, o.ShareRecyclerAdapter$ShareViewHolder):void");
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u001d\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u0003\n\u0002\b\u0003*\u0001\u0000\b\n\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\u0016J\u0010\u0010\u0007\u001a\u00020\u00042\u0006\u0010\b\u001a\u00020\u0002H\u0016¨\u0006\t"}, d2 = {"id/dana/challenge/pin/PinLoginPresenter$input$1", "Lid/dana/domain/DefaultObserver;", "Lid/dana/domain/model/rpc/response/LoginResponse;", "onError", "", "e", "", "onNext", "loginResponse", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
    public static final class toIntRange extends GriverAppVirtualHostProxy<LoginResponse> {
        final /* synthetic */ onValidateSchema getMin;
        final /* synthetic */ boolean setMax;

        toIntRange(onValidateSchema onvalidateschema, boolean z) {
            this.getMin = onvalidateschema;
            this.setMax = z;
        }

        public final /* synthetic */ void onNext(Object obj) {
            LoginResponse loginResponse = (LoginResponse) obj;
            Intrinsics.checkNotNullParameter(loginResponse, ChallengePinWithFaceActivity.LOGIN_RESPONSE);
            onValidateSchema.getMin(this.getMin).dismissProgress();
            onValidateSchema.getMin(this.getMin, loginResponse, this.setMax);
        }

        public final void onError(@NotNull Throwable th) {
            Intrinsics.checkNotNullParameter(th, "e");
            onValidateSchema.getMin(this.getMin).dismissProgress();
            onValidateSchema.getMin(this.getMin, th);
            LoginFailureException loginFailureException = new LoginFailureException(th);
            Intrinsics.checkNotNullParameter(loginFailureException, "$this$logToCrashlytics");
            try {
                FirebaseCrashlytics.getInstance().recordException(loginFailureException);
            } catch (Exception unused) {
            }
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u001d\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u0003\n\u0002\b\u0003*\u0001\u0000\b\n\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006H\u0016J\u0010\u0010\u0007\u001a\u00020\u00042\u0006\u0010\b\u001a\u00020\u0002H\u0016¨\u0006\t"}, d2 = {"id/dana/challenge/pin/PinLoginPresenter$inputTrustRisk$1", "Lid/dana/domain/DefaultObserver;", "Lid/dana/domain/model/rpc/response/LoginResponse;", "onError", "", "e", "", "onNext", "loginResponse", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
    public static final class isInside extends GriverAppVirtualHostProxy<LoginResponse> {
        final /* synthetic */ boolean length;
        final /* synthetic */ onValidateSchema setMin;

        isInside(onValidateSchema onvalidateschema, boolean z) {
            this.setMin = onvalidateschema;
            this.length = z;
        }

        public final /* synthetic */ void onNext(Object obj) {
            LoginResponse loginResponse = (LoginResponse) obj;
            Intrinsics.checkNotNullParameter(loginResponse, ChallengePinWithFaceActivity.LOGIN_RESPONSE);
            BlurProcess.getMin(TrackerKey.Event.OTP_INPUT);
            onValidateSchema.getMin(this.setMin).dismissProgress();
            onValidateSchema.getMin(this.setMin, loginResponse, this.length);
        }

        public final void onError(@NotNull Throwable th) {
            Intrinsics.checkNotNullParameter(th, "e");
            onValidateSchema.getMin(this.setMin).dismissProgress();
            onValidateSchema.getMin(this.setMin, th);
            LoginFailureException loginFailureException = new LoginFailureException(th);
            Intrinsics.checkNotNullParameter(loginFailureException, "$this$logToCrashlytics");
            try {
                FirebaseCrashlytics.getInstance().recordException(loginFailureException);
            } catch (Exception unused) {
            }
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0017\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002*\u0001\u0000\b\n\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0002H\u0016¨\u0006\u0006"}, d2 = {"id/dana/challenge/pin/PinLoginPresenter$checkKnowledgeBasedAuthFeature$1", "Lid/dana/domain/DefaultObserver;", "", "onNext", "", "knowledgeBasedAuthEnable", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
    public static final class getMin extends GriverAppVirtualHostProxy<Boolean> {
        final /* synthetic */ onValidateSchema length;

        getMin(onValidateSchema onvalidateschema) {
            this.length = onvalidateschema;
        }

        public final /* synthetic */ void onNext(Object obj) {
            onValidateSchema.getMin(this.length).length(((Boolean) obj).booleanValue());
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0017\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002*\u0001\u0000\b\n\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0002H\u0016¨\u0006\u0006"}, d2 = {"id/dana/challenge/pin/PinLoginPresenter$checkIsAppFirstLaunch$1", "Lid/dana/domain/DefaultObserver;", "", "onNext", "", "status", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
    public static final class length extends GriverAppVirtualHostProxy<Boolean> {
        final /* synthetic */ onValidateSchema length;

        length(onValidateSchema onvalidateschema) {
            this.length = onvalidateschema;
        }

        public final /* synthetic */ void onNext(Object obj) {
            onValidateSchema.getMax(this.length, ((Boolean) obj).booleanValue());
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0017\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002*\u0001\u0000\b\n\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0002H\u0016¨\u0006\u0006"}, d2 = {"id/dana/challenge/pin/PinLoginPresenter$initMixpanelEventConfig$1", "Lid/dana/domain/DefaultObserver;", "Lid/dana/domain/user/UserInfoResponse;", "onNext", "", "userInfoResponse", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
    public static final class getMax extends GriverAppVirtualHostProxy<disconnect> {
        final /* synthetic */ onValidateSchema getMin;
        final /* synthetic */ LoginResponse setMax;

        getMax(onValidateSchema onvalidateschema, LoginResponse loginResponse) {
            this.getMin = onvalidateschema;
            this.setMax = loginResponse;
        }

        public final /* synthetic */ void onNext(Object obj) {
            disconnect disconnect = (disconnect) obj;
            Intrinsics.checkNotNullParameter(disconnect, "userInfoResponse");
            getPagePerfKey min = onValidateSchema.setMin(this.getMin).setMin(disconnect);
            getTypefaceByCat.setMin setmin = new getTypefaceByCat.setMin();
            setmin.getMax = onValidateSchema.setMax(this.getMin);
            setmin.equals = BlurProcess.length();
            String str = null;
            if (onValidateSchema.length(this.getMin, this.setMax)) {
                UserInfo userInfo = this.setMax.getUserInfo();
                setmin.setMin = userInfo != null ? userInfo.getUserId() : null;
            }
            if (onValidateSchema.length(this.getMin, min)) {
                activityGetScreenOrientation activitygetscreenorientation = min.setMax;
                if (activitygetscreenorientation != null) {
                    str = activitygetscreenorientation.getMax;
                }
                setmin.setMin(str);
            }
            judgeRes.setMin(new getTypefaceByCat(setmin, (byte) 0), TrackerType.MIXPANEL, onValidateSchema.length(this.getMin)).length();
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0017\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002*\u0001\u0000\b\n\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0002H\u0016¨\u0006\u0006"}, d2 = {"id/dana/challenge/pin/PinLoginPresenter$trackPinLogin$1", "Lid/dana/domain/DefaultObserver;", "Lid/dana/domain/user/UserInfoResponse;", "onNext", "", "userInfoResponse", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
    public static final class equals extends GriverAppVirtualHostProxy<disconnect> {
        final /* synthetic */ onValidateSchema getMax;

        equals(onValidateSchema onvalidateschema) {
            this.getMax = onvalidateschema;
        }

        public final /* synthetic */ void onNext(Object obj) {
            disconnect disconnect = (disconnect) obj;
            Intrinsics.checkNotNullParameter(disconnect, "userInfoResponse");
            getPagePerfKey min = onValidateSchema.setMin(this.getMax).setMin(disconnect);
            Map hashMap = new HashMap();
            hashMap.put("Login Type", "Normal");
            if (onValidateSchema.length(this.getMax, min)) {
                activityGetScreenOrientation activitygetscreenorientation = min.setMax;
                Intrinsics.checkNotNull(activitygetscreenorientation);
                String str = activitygetscreenorientation.getMax;
                Intrinsics.checkNotNullExpressionValue(str, "userInfo.kycInfo!!.level");
                hashMap.put("KYC Level", str);
            }
            this.getMax.getMin();
            convertDipToPx.length length = new convertDipToPx.length(onValidateSchema.setMax(this.getMax));
            length.getMax = "Login";
            convertDipToPx.length length2 = length.setMax("Login Challenge", "Password").length((Map<String, String>) hashMap);
            ScreenBrightnessBridgeExtension screenBrightnessBridgeExtension = ScreenBrightnessBridgeExtension.getMin;
            if (ScreenBrightnessBridgeExtension.Grayscale$Algorithm().length() > 0) {
                ScreenBrightnessBridgeExtension screenBrightnessBridgeExtension2 = ScreenBrightnessBridgeExtension.getMin;
                length2.setMax("Merchant Name", ScreenBrightnessBridgeExtension.Grayscale$Algorithm());
            } else {
                length2.setMax("Merchant Name", onValidateSchema.setMax(this.getMax).getString(R.string.dana_string));
            }
            length2.setMin();
            genTextSelector.getMax(new convertDipToPx(length2, (byte) 0));
            onValidateSchema.isInside(this.getMax);
            UpdateAppCallback.getMin("login_challenge_type", "Password");
        }
    }

    @Metadata(bv = {1, 0, 3}, d1 = {"\u0000\u0017\n\u0000\n\u0002\u0018\u0002\n\u0002\u0010\u000e\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0002*\u0001\u0000\b\n\u0018\u00002\n\u0012\u0006\u0012\u0004\u0018\u00010\u00020\u0001J\u0010\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0002H\u0016¨\u0006\u0006"}, d2 = {"id/dana/challenge/pin/PinLoginPresenter$userId$1", "Lid/dana/domain/DefaultObserver;", "", "onNext", "", "userId", "app_productionRelease"}, k = 1, mv = {1, 4, 2})
    public static final class IsOverlapping extends GriverAppVirtualHostProxy<String> {
        final /* synthetic */ onValidateSchema length;

        IsOverlapping(onValidateSchema onvalidateschema) {
            this.length = onvalidateschema;
        }

        public final /* synthetic */ void onNext(Object obj) {
            String str = (String) obj;
            Intrinsics.checkNotNullParameter(str, "userId");
            if (!TextUtils.isEmpty(str)) {
                onValidateSchema.length(this.length, str);
                if (onValidateSchema.getMax(this.length)) {
                    onValidateSchema.toFloatRange(this.length);
                }
            }
        }
    }
}
