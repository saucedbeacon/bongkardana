package o;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public final class readVersion {
    public static final readVersion FastBitmap$CoordinateSystem;
    public static final readVersion Grayscale$Algorithm;
    public static final readVersion ICustomTabsCallback;
    public static final readVersion ICustomTabsCallback$Default;
    public static final readVersion ICustomTabsCallback$Stub;
    public static final readVersion ICustomTabsCallback$Stub$Proxy;
    public static final readVersion ICustomTabsService;
    public static final readVersion ICustomTabsService$Default;
    public static final readVersion ICustomTabsService$Stub;
    public static final readVersion ICustomTabsService$Stub$Proxy;
    public static final readVersion IMediaControllerCallback;
    public static final readVersion IMediaControllerCallback$Stub;
    public static final readVersion IMediaControllerCallback$Stub$Proxy;
    public static final readVersion IMediaSession;
    public static final readVersion INotificationSideChannel;
    public static final readVersion INotificationSideChannel$Default;
    public static final readVersion INotificationSideChannel$Stub;
    public static final readVersion INotificationSideChannel$Stub$Proxy;
    public static final readVersion IPostMessageService;
    public static final readVersion IPostMessageService$Default;
    public static final readVersion IPostMessageService$Stub;
    public static final readVersion IPostMessageService$Stub$Proxy;
    public static final readVersion ITrustedWebActivityCallback;
    public static final readVersion ITrustedWebActivityCallback$Default;
    public static final readVersion ITrustedWebActivityCallback$Stub;
    public static final readVersion ITrustedWebActivityCallback$Stub$Proxy;
    public static final readVersion ITrustedWebActivityService;
    public static final readVersion ITrustedWebActivityService$Default;
    public static final readVersion ITrustedWebActivityService$Stub;
    public static final readVersion ITrustedWebActivityService$Stub$Proxy;
    public static final readVersion IconCompatParcelizer;
    public static final readVersion IsOverlapping;
    public static final readVersion Mean$Arithmetic;
    public static final readVersion MediaBrowserCompat$CustomActionResultReceiver;
    public static final readVersion MediaBrowserCompat$ItemReceiver;
    public static final readVersion MediaBrowserCompat$MediaItem;
    public static final readVersion MediaBrowserCompat$MediaItem$Flags;
    public static final readVersion MediaBrowserCompat$SearchResultReceiver;
    public static final readVersion MediaDescriptionCompat;
    public static final readVersion MediaMetadataCompat;
    public static final readVersion MediaMetadataCompat$BitmapKey;
    public static final readVersion MediaMetadataCompat$LongKey;
    public static final readVersion MediaMetadataCompat$RatingKey;
    public static final readVersion MediaMetadataCompat$TextKey;
    public static final readVersion RatingCompat;
    public static final readVersion RatingCompat$StarStyle;
    public static final readVersion RatingCompat$Style;
    public static final readVersion RemoteActionCompatParcelizer;
    public static final readVersion areNotificationsEnabled;
    public static final readVersion asBinder;
    public static final readVersion asInterface;
    public static final readVersion b;
    public static final readVersion cancel;
    public static final readVersion cancelAll;
    public static final readVersion cancelNotification;
    public static final readVersion create;
    public static final readVersion equals;
    public static final readVersion extraCallback;
    public static final readVersion extraCallbackWithResult;
    public static final readVersion extraCommand;
    public static final readVersion getActiveNotifications;
    public static final readVersion getCause;
    public static final readVersion getDefaultImpl;
    public static final readVersion getInterfaceDescriptor;
    public static final readVersion getMax;
    static final Comparator<String> getMin = new Comparator<String>() {
        public final /* synthetic */ int compare(Object obj, Object obj2) {
            String str = (String) obj;
            String str2 = (String) obj2;
            int min = Math.min(str.length(), str2.length());
            for (int i = 4; i < min; i++) {
                char charAt = str.charAt(i);
                char charAt2 = str2.charAt(i);
                if (charAt != charAt2) {
                    return charAt < charAt2 ? -1 : 1;
                }
            }
            int length = str.length();
            int length2 = str2.length();
            if (length != length2) {
                return length < length2 ? -1 : 1;
            }
            return 0;
        }
    };
    public static final readVersion getSmallIconBitmap;
    public static final readVersion getSmallIconId;
    private static final Map<String, readVersion> getTag = new LinkedHashMap();
    public static final readVersion hashCode;
    public static final readVersion invoke;
    public static final readVersion invokeSuspend;
    public static final readVersion isInside;
    public static final readVersion isTransportControlEnabled;
    public static final readVersion length;
    public static final readVersion mayLaunchUrl;
    public static final readVersion newSession;
    public static final readVersion newSessionWithExtras;
    public static final readVersion notify;
    public static final readVersion notifyNotificationWithChannel;
    public static final readVersion onCaptioningEnabledChanged;
    public static final readVersion onEvent;
    public static final readVersion onExtraCallback;
    public static final readVersion onExtrasChanged;
    public static final readVersion onMessageChannelReady;
    public static final readVersion onMetadataChanged;
    public static final readVersion onNavigationEvent;
    public static final readVersion onPlaybackStateChanged;
    public static final readVersion onPostMessage;
    public static final readVersion onQueueChanged;
    public static final readVersion onQueueTitleChanged;
    public static final readVersion onRelationshipValidationResult;
    public static final readVersion onRepeatModeChanged;
    public static final readVersion onSessionDestroyed;
    public static final readVersion onSessionReady;
    public static final readVersion onShuffleModeChanged;
    public static final readVersion onShuffleModeChangedRemoved;
    public static final readVersion onTransact;
    public static final readVersion onVolumeInfoChanged;
    public static final readVersion postMessage;
    public static final readVersion read;
    public static final readVersion receiveFile;
    public static final readVersion registerCallbackListener;
    public static final readVersion requestPostMessageChannel;
    public static final readVersion requestPostMessageChannelWithExtras;
    public static final readVersion sendCommand;
    public static final readVersion sendMediaButton;
    public static final readVersion setDefaultImpl;
    public static final readVersion setMax;
    public static final readVersion setMin;
    public static final readVersion toDoubleRange;
    public static final readVersion toFloatRange;
    public static final readVersion toIntRange;
    public static final readVersion toString;
    public static final readVersion unregisterCallbackListener;
    public static final readVersion updateVisuals;
    public static final readVersion validateRelationship;
    public static final readVersion valueOf;
    public static final readVersion values;
    public static final readVersion warmup;
    public static final readVersion write;
    final String getVolumeAttributes;

    static {
        readVersion readversion = new readVersion("SSL_RSA_WITH_NULL_MD5");
        getTag.put("SSL_RSA_WITH_NULL_MD5", readversion);
        setMin = readversion;
        readVersion readversion2 = new readVersion("SSL_RSA_WITH_NULL_SHA");
        getTag.put("SSL_RSA_WITH_NULL_SHA", readversion2);
        getMax = readversion2;
        readVersion readversion3 = new readVersion("SSL_RSA_EXPORT_WITH_RC4_40_MD5");
        getTag.put("SSL_RSA_EXPORT_WITH_RC4_40_MD5", readversion3);
        setMax = readversion3;
        readVersion readversion4 = new readVersion("SSL_RSA_WITH_RC4_128_MD5");
        getTag.put("SSL_RSA_WITH_RC4_128_MD5", readversion4);
        length = readversion4;
        readVersion readversion5 = new readVersion("SSL_RSA_WITH_RC4_128_SHA");
        getTag.put("SSL_RSA_WITH_RC4_128_SHA", readversion5);
        equals = readversion5;
        readVersion readversion6 = new readVersion("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA");
        getTag.put("SSL_RSA_EXPORT_WITH_DES40_CBC_SHA", readversion6);
        isInside = readversion6;
        readVersion readversion7 = new readVersion("SSL_RSA_WITH_DES_CBC_SHA");
        getTag.put("SSL_RSA_WITH_DES_CBC_SHA", readversion7);
        IsOverlapping = readversion7;
        readVersion readversion8 = new readVersion("SSL_RSA_WITH_3DES_EDE_CBC_SHA");
        getTag.put("SSL_RSA_WITH_3DES_EDE_CBC_SHA", readversion8);
        toFloatRange = readversion8;
        readVersion readversion9 = new readVersion("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA");
        getTag.put("SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", readversion9);
        toIntRange = readversion9;
        readVersion readversion10 = new readVersion("SSL_DHE_DSS_WITH_DES_CBC_SHA");
        getTag.put("SSL_DHE_DSS_WITH_DES_CBC_SHA", readversion10);
        toString = readversion10;
        readVersion readversion11 = new readVersion("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA");
        getTag.put("SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", readversion11);
        values = readversion11;
        readVersion readversion12 = new readVersion("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA");
        getTag.put("SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", readversion12);
        toDoubleRange = readversion12;
        readVersion readversion13 = new readVersion("SSL_DHE_RSA_WITH_DES_CBC_SHA");
        getTag.put("SSL_DHE_RSA_WITH_DES_CBC_SHA", readversion13);
        hashCode = readversion13;
        readVersion readversion14 = new readVersion("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA");
        getTag.put("SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", readversion14);
        FastBitmap$CoordinateSystem = readversion14;
        readVersion readversion15 = new readVersion("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5");
        getTag.put("SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", readversion15);
        invoke = readversion15;
        readVersion readversion16 = new readVersion("SSL_DH_anon_WITH_RC4_128_MD5");
        getTag.put("SSL_DH_anon_WITH_RC4_128_MD5", readversion16);
        Mean$Arithmetic = readversion16;
        readVersion readversion17 = new readVersion("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA");
        getTag.put("SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", readversion17);
        Grayscale$Algorithm = readversion17;
        readVersion readversion18 = new readVersion("SSL_DH_anon_WITH_DES_CBC_SHA");
        getTag.put("SSL_DH_anon_WITH_DES_CBC_SHA", readversion18);
        valueOf = readversion18;
        readVersion readversion19 = new readVersion("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
        getTag.put("SSL_DH_anon_WITH_3DES_EDE_CBC_SHA", readversion19);
        invokeSuspend = readversion19;
        readVersion readversion20 = new readVersion("TLS_KRB5_WITH_DES_CBC_SHA");
        getTag.put("TLS_KRB5_WITH_DES_CBC_SHA", readversion20);
        create = readversion20;
        readVersion readversion21 = new readVersion("TLS_KRB5_WITH_3DES_EDE_CBC_SHA");
        getTag.put("TLS_KRB5_WITH_3DES_EDE_CBC_SHA", readversion21);
        onNavigationEvent = readversion21;
        readVersion readversion22 = new readVersion("TLS_KRB5_WITH_RC4_128_SHA");
        getTag.put("TLS_KRB5_WITH_RC4_128_SHA", readversion22);
        b = readversion22;
        readVersion readversion23 = new readVersion("TLS_KRB5_WITH_DES_CBC_MD5");
        getTag.put("TLS_KRB5_WITH_DES_CBC_MD5", readversion23);
        getCause = readversion23;
        readVersion readversion24 = new readVersion("TLS_KRB5_WITH_3DES_EDE_CBC_MD5");
        getTag.put("TLS_KRB5_WITH_3DES_EDE_CBC_MD5", readversion24);
        ICustomTabsCallback = readversion24;
        readVersion readversion25 = new readVersion("TLS_KRB5_WITH_RC4_128_MD5");
        getTag.put("TLS_KRB5_WITH_RC4_128_MD5", readversion25);
        extraCallbackWithResult = readversion25;
        readVersion readversion26 = new readVersion("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA");
        getTag.put("TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", readversion26);
        onRelationshipValidationResult = readversion26;
        readVersion readversion27 = new readVersion("TLS_KRB5_EXPORT_WITH_RC4_40_SHA");
        getTag.put("TLS_KRB5_EXPORT_WITH_RC4_40_SHA", readversion27);
        onMessageChannelReady = readversion27;
        readVersion readversion28 = new readVersion("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5");
        getTag.put("TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5", readversion28);
        extraCallback = readversion28;
        readVersion readversion29 = new readVersion("TLS_KRB5_EXPORT_WITH_RC4_40_MD5");
        getTag.put("TLS_KRB5_EXPORT_WITH_RC4_40_MD5", readversion29);
        onPostMessage = readversion29;
        readVersion readversion30 = new readVersion("TLS_RSA_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_RSA_WITH_AES_128_CBC_SHA", readversion30);
        onTransact = readversion30;
        readVersion readversion31 = new readVersion("TLS_DHE_DSS_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_DHE_DSS_WITH_AES_128_CBC_SHA", readversion31);
        ICustomTabsCallback$Stub = readversion31;
        readVersion readversion32 = new readVersion("TLS_DHE_RSA_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_DHE_RSA_WITH_AES_128_CBC_SHA", readversion32);
        asInterface = readversion32;
        readVersion readversion33 = new readVersion("TLS_DH_anon_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_DH_anon_WITH_AES_128_CBC_SHA", readversion33);
        ICustomTabsCallback$Default = readversion33;
        readVersion readversion34 = new readVersion("TLS_RSA_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_RSA_WITH_AES_256_CBC_SHA", readversion34);
        asBinder = readversion34;
        readVersion readversion35 = new readVersion("TLS_DHE_DSS_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_DHE_DSS_WITH_AES_256_CBC_SHA", readversion35);
        getDefaultImpl = readversion35;
        readVersion readversion36 = new readVersion("TLS_DHE_RSA_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_DHE_RSA_WITH_AES_256_CBC_SHA", readversion36);
        getInterfaceDescriptor = readversion36;
        readVersion readversion37 = new readVersion("TLS_DH_anon_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_DH_anon_WITH_AES_256_CBC_SHA", readversion37);
        ICustomTabsCallback$Stub$Proxy = readversion37;
        readVersion readversion38 = new readVersion("TLS_RSA_WITH_NULL_SHA256");
        getTag.put("TLS_RSA_WITH_NULL_SHA256", readversion38);
        ICustomTabsService = readversion38;
        readVersion readversion39 = new readVersion("TLS_RSA_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_RSA_WITH_AES_128_CBC_SHA256", readversion39);
        setDefaultImpl = readversion39;
        readVersion readversion40 = new readVersion("TLS_RSA_WITH_AES_256_CBC_SHA256");
        getTag.put("TLS_RSA_WITH_AES_256_CBC_SHA256", readversion40);
        newSession = readversion40;
        readVersion readversion41 = new readVersion("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", readversion41);
        extraCommand = readversion41;
        readVersion readversion42 = new readVersion("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA");
        getTag.put("TLS_RSA_WITH_CAMELLIA_128_CBC_SHA", readversion42);
        newSessionWithExtras = readversion42;
        readVersion readversion43 = new readVersion("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA");
        getTag.put("TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA", readversion43);
        mayLaunchUrl = readversion43;
        readVersion readversion44 = new readVersion("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA");
        getTag.put("TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA", readversion44);
        warmup = readversion44;
        readVersion readversion45 = new readVersion("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", readversion45);
        updateVisuals = readversion45;
        readVersion readversion46 = new readVersion("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256");
        getTag.put("TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", readversion46);
        requestPostMessageChannelWithExtras = readversion46;
        readVersion readversion47 = new readVersion("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256");
        getTag.put("TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", readversion47);
        requestPostMessageChannel = readversion47;
        readVersion readversion48 = new readVersion("TLS_DH_anon_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_DH_anon_WITH_AES_128_CBC_SHA256", readversion48);
        validateRelationship = readversion48;
        readVersion readversion49 = new readVersion("TLS_DH_anon_WITH_AES_256_CBC_SHA256");
        getTag.put("TLS_DH_anon_WITH_AES_256_CBC_SHA256", readversion49);
        postMessage = readversion49;
        readVersion readversion50 = new readVersion("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA");
        getTag.put("TLS_RSA_WITH_CAMELLIA_256_CBC_SHA", readversion50);
        ICustomTabsService$Default = readversion50;
        readVersion readversion51 = new readVersion("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA");
        getTag.put("TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA", readversion51);
        IPostMessageService = readversion51;
        readVersion readversion52 = new readVersion("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA");
        getTag.put("TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", readversion52);
        ICustomTabsService$Stub = readversion52;
        readVersion readversion53 = new readVersion("TLS_PSK_WITH_RC4_128_SHA");
        getTag.put("TLS_PSK_WITH_RC4_128_SHA", readversion53);
        ICustomTabsService$Stub$Proxy = readversion53;
        readVersion readversion54 = new readVersion("TLS_PSK_WITH_3DES_EDE_CBC_SHA");
        getTag.put("TLS_PSK_WITH_3DES_EDE_CBC_SHA", readversion54);
        receiveFile = readversion54;
        readVersion readversion55 = new readVersion("TLS_PSK_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_PSK_WITH_AES_128_CBC_SHA", readversion55);
        ITrustedWebActivityCallback = readversion55;
        readVersion readversion56 = new readVersion("TLS_PSK_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_PSK_WITH_AES_256_CBC_SHA", readversion56);
        IPostMessageService$Stub = readversion56;
        readVersion readversion57 = new readVersion("TLS_RSA_WITH_SEED_CBC_SHA");
        getTag.put("TLS_RSA_WITH_SEED_CBC_SHA", readversion57);
        onExtraCallback = readversion57;
        readVersion readversion58 = new readVersion("TLS_RSA_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_RSA_WITH_AES_128_GCM_SHA256", readversion58);
        IPostMessageService$Default = readversion58;
        readVersion readversion59 = new readVersion("TLS_RSA_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_RSA_WITH_AES_256_GCM_SHA384", readversion59);
        IPostMessageService$Stub$Proxy = readversion59;
        readVersion readversion60 = new readVersion("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", readversion60);
        ITrustedWebActivityCallback$Default = readversion60;
        readVersion readversion61 = new readVersion("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", readversion61);
        areNotificationsEnabled = readversion61;
        readVersion readversion62 = new readVersion("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", readversion62);
        ITrustedWebActivityService = readversion62;
        readVersion readversion63 = new readVersion("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", readversion63);
        ITrustedWebActivityCallback$Stub$Proxy = readversion63;
        readVersion readversion64 = new readVersion("TLS_DH_anon_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_DH_anon_WITH_AES_128_GCM_SHA256", readversion64);
        ITrustedWebActivityCallback$Stub = readversion64;
        readVersion readversion65 = new readVersion("TLS_DH_anon_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_DH_anon_WITH_AES_256_GCM_SHA384", readversion65);
        cancelNotification = readversion65;
        readVersion readversion66 = new readVersion("TLS_EMPTY_RENEGOTIATION_INFO_SCSV");
        getTag.put("TLS_EMPTY_RENEGOTIATION_INFO_SCSV", readversion66);
        notifyNotificationWithChannel = readversion66;
        readVersion readversion67 = new readVersion("TLS_FALLBACK_SCSV");
        getTag.put("TLS_FALLBACK_SCSV", readversion67);
        getActiveNotifications = readversion67;
        readVersion readversion68 = new readVersion("TLS_ECDH_ECDSA_WITH_NULL_SHA");
        getTag.put("TLS_ECDH_ECDSA_WITH_NULL_SHA", readversion68);
        getSmallIconBitmap = readversion68;
        readVersion readversion69 = new readVersion("TLS_ECDH_ECDSA_WITH_RC4_128_SHA");
        getTag.put("TLS_ECDH_ECDSA_WITH_RC4_128_SHA", readversion69);
        getSmallIconId = readversion69;
        readVersion readversion70 = new readVersion("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA");
        getTag.put("TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", readversion70);
        INotificationSideChannel = readversion70;
        readVersion readversion71 = new readVersion("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", readversion71);
        ITrustedWebActivityService$Stub = readversion71;
        readVersion readversion72 = new readVersion("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", readversion72);
        ITrustedWebActivityService$Default = readversion72;
        readVersion readversion73 = new readVersion("TLS_ECDHE_ECDSA_WITH_NULL_SHA");
        getTag.put("TLS_ECDHE_ECDSA_WITH_NULL_SHA", readversion73);
        ITrustedWebActivityService$Stub$Proxy = readversion73;
        readVersion readversion74 = new readVersion("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA");
        getTag.put("TLS_ECDHE_ECDSA_WITH_RC4_128_SHA", readversion74);
        notify = readversion74;
        readVersion readversion75 = new readVersion("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA");
        getTag.put("TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", readversion75);
        cancelAll = readversion75;
        readVersion readversion76 = new readVersion("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", readversion76);
        cancel = readversion76;
        readVersion readversion77 = new readVersion("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", readversion77);
        INotificationSideChannel$Stub = readversion77;
        readVersion readversion78 = new readVersion("TLS_ECDH_RSA_WITH_NULL_SHA");
        getTag.put("TLS_ECDH_RSA_WITH_NULL_SHA", readversion78);
        INotificationSideChannel$Default = readversion78;
        readVersion readversion79 = new readVersion("TLS_ECDH_RSA_WITH_RC4_128_SHA");
        getTag.put("TLS_ECDH_RSA_WITH_RC4_128_SHA", readversion79);
        INotificationSideChannel$Stub$Proxy = readversion79;
        readVersion readversion80 = new readVersion("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA");
        getTag.put("TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", readversion80);
        MediaBrowserCompat$CustomActionResultReceiver = readversion80;
        readVersion readversion81 = new readVersion("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", readversion81);
        IconCompatParcelizer = readversion81;
        readVersion readversion82 = new readVersion("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", readversion82);
        RemoteActionCompatParcelizer = readversion82;
        readVersion readversion83 = new readVersion("TLS_ECDHE_RSA_WITH_NULL_SHA");
        getTag.put("TLS_ECDHE_RSA_WITH_NULL_SHA", readversion83);
        read = readversion83;
        readVersion readversion84 = new readVersion("TLS_ECDHE_RSA_WITH_RC4_128_SHA");
        getTag.put("TLS_ECDHE_RSA_WITH_RC4_128_SHA", readversion84);
        write = readversion84;
        readVersion readversion85 = new readVersion("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA");
        getTag.put("TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", readversion85);
        MediaBrowserCompat$ItemReceiver = readversion85;
        readVersion readversion86 = new readVersion("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", readversion86);
        MediaBrowserCompat$SearchResultReceiver = readversion86;
        readVersion readversion87 = new readVersion("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", readversion87);
        MediaBrowserCompat$MediaItem = readversion87;
        readVersion readversion88 = new readVersion("TLS_ECDH_anon_WITH_NULL_SHA");
        getTag.put("TLS_ECDH_anon_WITH_NULL_SHA", readversion88);
        MediaBrowserCompat$MediaItem$Flags = readversion88;
        readVersion readversion89 = new readVersion("TLS_ECDH_anon_WITH_RC4_128_SHA");
        getTag.put("TLS_ECDH_anon_WITH_RC4_128_SHA", readversion89);
        MediaDescriptionCompat = readversion89;
        readVersion readversion90 = new readVersion("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA");
        getTag.put("TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", readversion90);
        MediaMetadataCompat$TextKey = readversion90;
        readVersion readversion91 = new readVersion("TLS_ECDH_anon_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_ECDH_anon_WITH_AES_128_CBC_SHA", readversion91);
        MediaMetadataCompat$RatingKey = readversion91;
        readVersion readversion92 = new readVersion("TLS_ECDH_anon_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_ECDH_anon_WITH_AES_256_CBC_SHA", readversion92);
        MediaMetadataCompat = readversion92;
        readVersion readversion93 = new readVersion("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", readversion93);
        MediaMetadataCompat$BitmapKey = readversion93;
        readVersion readversion94 = new readVersion("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384");
        getTag.put("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", readversion94);
        MediaMetadataCompat$LongKey = readversion94;
        readVersion readversion95 = new readVersion("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", readversion95);
        RatingCompat$StarStyle = readversion95;
        readVersion readversion96 = new readVersion("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384");
        getTag.put("TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", readversion96);
        RatingCompat = readversion96;
        readVersion readversion97 = new readVersion("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", readversion97);
        IMediaControllerCallback = readversion97;
        readVersion readversion98 = new readVersion("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384");
        getTag.put("TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", readversion98);
        RatingCompat$Style = readversion98;
        readVersion readversion99 = new readVersion("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256");
        getTag.put("TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", readversion99);
        onEvent = readversion99;
        readVersion readversion100 = new readVersion("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384");
        getTag.put("TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", readversion100);
        onMetadataChanged = readversion100;
        readVersion readversion101 = new readVersion("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", readversion101);
        onSessionDestroyed = readversion101;
        readVersion readversion102 = new readVersion("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", readversion102);
        onQueueTitleChanged = readversion102;
        readVersion readversion103 = new readVersion("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", readversion103);
        onPlaybackStateChanged = readversion103;
        readVersion readversion104 = new readVersion("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", readversion104);
        onQueueChanged = readversion104;
        readVersion readversion105 = new readVersion("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", readversion105);
        onShuffleModeChangedRemoved = readversion105;
        readVersion readversion106 = new readVersion("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", readversion106);
        onExtrasChanged = readversion106;
        readVersion readversion107 = new readVersion("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256");
        getTag.put("TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", readversion107);
        onVolumeInfoChanged = readversion107;
        readVersion readversion108 = new readVersion("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384");
        getTag.put("TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", readversion108);
        onRepeatModeChanged = readversion108;
        readVersion readversion109 = new readVersion("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA");
        getTag.put("TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA", readversion109);
        onCaptioningEnabledChanged = readversion109;
        readVersion readversion110 = new readVersion("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA");
        getTag.put("TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA", readversion110);
        onShuffleModeChanged = readversion110;
        readVersion readversion111 = new readVersion("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256");
        getTag.put("TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", readversion111);
        IMediaControllerCallback$Stub$Proxy = readversion111;
        readVersion readversion112 = new readVersion("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256");
        getTag.put("TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", readversion112);
        IMediaControllerCallback$Stub = readversion112;
        readVersion readversion113 = new readVersion("TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256");
        getTag.put("TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", readversion113);
        onSessionReady = readversion113;
        readVersion readversion114 = new readVersion("TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256");
        getTag.put("TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256", readversion114);
        IMediaSession = readversion114;
        readVersion readversion115 = new readVersion("TLS_AES_128_GCM_SHA256");
        getTag.put("TLS_AES_128_GCM_SHA256", readversion115);
        registerCallbackListener = readversion115;
        readVersion readversion116 = new readVersion("TLS_AES_256_GCM_SHA384");
        getTag.put("TLS_AES_256_GCM_SHA384", readversion116);
        unregisterCallbackListener = readversion116;
        readVersion readversion117 = new readVersion("TLS_CHACHA20_POLY1305_SHA256");
        getTag.put("TLS_CHACHA20_POLY1305_SHA256", readversion117);
        isTransportControlEnabled = readversion117;
        readVersion readversion118 = new readVersion("TLS_AES_128_CCM_SHA256");
        getTag.put("TLS_AES_128_CCM_SHA256", readversion118);
        sendCommand = readversion118;
        readVersion readversion119 = new readVersion("TLS_AES_256_CCM_8_SHA256");
        getTag.put("TLS_AES_256_CCM_8_SHA256", readversion119);
        sendMediaButton = readversion119;
    }

    public static synchronized readVersion getMax(String str) {
        readVersion readversion;
        String str2;
        synchronized (readVersion.class) {
            readversion = getTag.get(str);
            if (readversion == null) {
                Map<String, readVersion> map = getTag;
                if (str.startsWith("TLS_")) {
                    StringBuilder sb = new StringBuilder("SSL_");
                    sb.append(str.substring(4));
                    str2 = sb.toString();
                } else if (str.startsWith("SSL_")) {
                    StringBuilder sb2 = new StringBuilder("TLS_");
                    sb2.append(str.substring(4));
                    str2 = sb2.toString();
                } else {
                    str2 = str;
                }
                readversion = map.get(str2);
                if (readversion == null) {
                    readversion = new readVersion(str);
                }
                getTag.put(str, readversion);
            }
        }
        return readversion;
    }

    static List<readVersion> setMin(String... strArr) {
        ArrayList arrayList = new ArrayList(strArr.length);
        for (String max : strArr) {
            arrayList.add(getMax(max));
        }
        return Collections.unmodifiableList(arrayList);
    }

    private readVersion(String str) {
        if (str != null) {
            this.getVolumeAttributes = str;
            return;
        }
        throw null;
    }

    public final String toString() {
        return this.getVolumeAttributes;
    }
}
